(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{328:function(t,a,s){"use strict";s.r(a);var n=s(9),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"键名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#键名"}},[t._v("#")]),t._v(" 键名")]),t._v(" "),s("p",[t._v("对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。")]),t._v(" "),s("p",[t._v("如果键名是数值，会被自动转为字符串。")]),t._v(" "),s("p",[t._v("如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。")]),t._v(" "),s("blockquote",[s("p",[t._v("数值键名不能使用点运算符（因为会被当成小数点），只能使用方括号运算符。")])]),t._v(" "),s("h2",{attrs:{id:"键值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#键值"}},[t._v("#")]),t._v(" 键值")]),t._v(" "),s("p",[t._v("键值可以是任何数据类型。")]),t._v(" "),s("p",[t._v("如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用。")]),t._v(" "),s("p",[t._v("属性可以动态创建，不必在对象声明时就指定。")]),t._v(" "),s("h2",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),s("h3",{attrs:{id:"删除属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除属性"}},[t._v("#")]),t._v(" 删除属性")]),t._v(" "),s("p",[t._v("只有一种情况，delete命令会返回false，那就是该属性存在，且不得删除。")]),t._v(" "),s("p",[t._v("另外，需要注意的是，delete命令只能删除对象本身的属性，无法删除继承的属性")]),t._v(" "),s("h3",{attrs:{id:"in运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in运算符"}},[t._v("#")]),t._v(" in运算符⭐️")]),t._v(" "),s("p",[t._v("in运算符用于检查对象是否包含某个属性如果包含就返回true，否则返回false。它的左边是一个字符串，表示属性名，右边是一个对象。")]),t._v(" "),s("p",[s("strong",[t._v("in运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。")])]),t._v(" "),s("blockquote",[s("p",[t._v("hasOwnProperty方法可以判断是否为对象自身的属性。")])]),t._v(" "),s("h2",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("对象属性的相关方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Object.keys()")]),t._v(" "),s("td",[t._v("遍历对象属性")])]),t._v(" "),s("tr",[s("td",[t._v("Object.getOwnPropertyNames()")]),t._v(" "),s("td",[t._v("遍历对象属性")])]),t._v(" "),s("tr",[s("td",[t._v("Object.getOwnPropertyDescriptor()")]),t._v(" "),s("td",[t._v("获取某个属性的描述对象。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.defineProperty()")]),t._v(" "),s("td",[t._v("通过描述对象，定义某个属性。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.defineProperties()")]),t._v(" "),s("td",[t._v("通过描述对象，定义多个属性。")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("控制对象状态的方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Object.preventExtensions()")]),t._v(" "),s("td",[t._v("防止对象扩展。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.isExtensible()")]),t._v(" "),s("td",[t._v("判断对象是否可扩展。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.seal()")]),t._v(" "),s("td",[t._v("禁止对象配置。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.isSealed()")]),t._v(" "),s("td",[t._v("判断一个对象是否可配置。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.freeze()")]),t._v(" "),s("td",[t._v("冻结一个对象。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.isFrozen()")]),t._v(" "),s("td",[t._v("判断一个对象是否被冻结。")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("原型链相关的方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Object.create()")]),t._v(" "),s("td",[t._v("该方法可以指定原型对象和属性，返回一个新的对象。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.getPrototypeOf()")]),t._v(" "),s("td",[t._v("获取对象的Prototype对象。")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("实例方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Object.prototype.valueOf()")]),t._v(" "),s("td",[t._v("返回当前对象对应的值。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.prototype.toString()")]),t._v(" "),s("td",[t._v("返回当前对象对应的字符串形式。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.prototype.toLocaleString()")]),t._v(" "),s("td",[t._v("返回当前对象对应的本地字符串形式。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.prototype.hasOwnProperty()")]),t._v(" "),s("td",[t._v("判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.prototype.isPrototypeOf()")]),t._v(" "),s("td",[t._v("判断当前对象是否为另一个对象的原型。")])]),t._v(" "),s("tr",[s("td",[t._v("Object.prototype.propertyIsEnumerable()")]),t._v(" "),s("td",[t._v("判断某个属性是否可枚举。")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("数组、字符串、函数、Date 对象都分别部署了自定义的toString方法")])]),t._v(" "),s("h3",{attrs:{id:"object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object()")]),t._v(" "),s("p",[t._v("将任意值转为对象。")]),t._v(" "),s("p",[t._v("如果参数为空（或者为undefined和null），Object()返回一个空对象。")]),t._v(" "),s("blockquote",[s("p",[t._v("如果Object方法的参数是一个对象，它总是返回该对象，即不用转换。")])]),t._v(" "),s("p",[t._v("以当作构造函数使用,，即前面可以使用new命令。生成新对象。")]),t._v(" "),s("p",[s("strong",[t._v("通过var obj = new Object()的写法生成新对象，与字面量的写法var obj = {}是等价的。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Boolean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("h3",{attrs:{id:"object-keys"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[t._v("#")]),t._v(" Object.keys()")]),t._v(" "),s("p",[t._v("Object.keys方法用来遍历对象的属性。")]),t._v(" "),s("p",[t._v("Object.keys方法的参数是一个对象，返回一个数组。")]),t._v(" "),s("p",[s("strong",[t._v("该数组的成员都是该对象自身的（而不是继承的）所有属性名。")])]),t._v(" "),s("p",[s("strong",[t._v("Object.keys方法只返回可枚举的属性")])]),t._v(" "),s("h3",{attrs:{id:"object-getownpropertynames"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames"}},[t._v("#")]),t._v(" Object.getOwnPropertyNames()")]),t._v(" "),s("p",[t._v("Object.getOwnPropertyNames方法用来遍历对象的属性。")]),t._v(" "),s("p",[s("strong",[t._v("Object.getOwnPropertyNames方法还返回不可枚举的属性名。")])]),t._v(" "),s("h3",{attrs:{id:"object-getownpropertydescriptor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptor"}},[t._v("#")]),t._v(" Object.getOwnPropertyDescriptor()⭐️")]),t._v(" "),s("p",[t._v("Object.getOwnPropertyDescriptor()方法可以获取属性描述对象。")]),t._v(" "),s("p",[t._v("它的第一个参数是目标对象，第二个参数是一个字符串，对应目标对象的某个属性名。")]),t._v(" "),s("p",[s("strong",[t._v("Object.getOwnPropertyDescriptor()方法只能用于对象自身的属性，不能用于继承的属性。")])]),t._v(" "),s("h3",{attrs:{id:"object-defineproperty-，object-defineproperties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty-，object-defineproperties"}},[t._v("#")]),t._v(" Object.defineProperty()，Object.defineProperties()")]),t._v(" "),s("p",[t._v("Object.defineProperty()方法允许通过属性描述对象，定义或修改一个属性，然后返回修改后的对象，它的用法如下。")]),t._v(" "),s("p",[s("code",[t._v("Object.defineProperty(object, propertyName, attributesObject)")])]),t._v(" "),s("p",[t._v("Object.defineProperty方法接受三个参数，依次如下。")]),t._v(" "),s("ul",[s("li",[t._v("object：属性所在的对象")]),t._v(" "),s("li",[t._v("propertyName：字符串，表示属性名")]),t._v(" "),s("li",[t._v("attributesObject：属性描述对象（包含value、configurable、enumerable、writable、set和get）")])]),t._v(" "),s("p",[t._v("如果属性已经存在，Object.defineProperty()方法相当于更新该属性的属性描述对象。")]),t._v(" "),s("p",[t._v("如果一次性定义或修改多个属性，可以使用Object.defineProperties()方法。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("一旦定义了取值函数get（或存值函数set），就不能将writable属性设为true，或者同时定义value属性，否则会报错。")])]),t._v(" "),s("h3",{attrs:{id:"object-prototype-propertyisenumerable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-propertyisenumerable"}},[t._v("#")]),t._v(" Object.prototype.propertyIsEnumerable()")]),t._v(" "),s("p",[t._v("propertyIsEnumerable()方法返回一个布尔值，用来判断某个属性是否可遍历。")]),t._v(" "),s("p",[s("strong",[t._v("注意，这个方法只能用于判断对象自身的属性，对于继承的属性一律返回false。")])]),t._v(" "),s("h3",{attrs:{id:"object-preventextensions-、object-isextensible"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-preventextensions-、object-isextensible"}},[t._v("#")]),t._v(" Object.preventExtensions()、Object.isExtensible()")]),t._v(" "),s("p",[s("strong",[t._v("Object.preventExtensions方法可以使得一个对象无法再添加新的属性。")])]),t._v(" "),s("p",[t._v("Object.isExtensible方法用于检查是否可以为一个对象添加属性。")]),t._v(" "),s("h3",{attrs:{id:"object-seal-、object-issealed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-seal-、object-issealed"}},[t._v("#")]),t._v(" Object.seal()、Object.isSealed()")]),t._v(" "),s("p",[s("strong",[t._v("Object.seal方法使得一个对象既无法添加新属性，也无法删除旧属性。")])]),t._v(" "),s("p",[t._v("Object.seal实质是把属性描述对象的configurable属性设为false，因此属性描述对象不再能改变了。")]),t._v(" "),s("p",[s("strong",[t._v("Object.seal只是禁止新增或删除属性，并不影响修改某个属性的值。")])]),t._v(" "),s("p",[t._v("Object.isSealed方法用于检查一个对象是否使用了Object.seal方法。")]),t._v(" "),s("h3",{attrs:{id:"object-freeze-、object-isfrozen"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-freeze-、object-isfrozen"}},[t._v("#")]),t._v(" Object.freeze()、Object.isFrozen()")]),t._v(" "),s("p",[t._v("Object.freeze方法可以使得一个对象"),s("strong",[t._v("无法添加新属性、无法删除旧属性、也无法改变属性的值")]),t._v("，使得这个对象实际上变成了常量。")]),t._v(" "),s("blockquote",[s("p",[t._v("对obj对象进行Object.freeze()以后，修改属性、新增属性、删除属性无效并且不报错，默默失败。如果在严格模式下，则会报错。")])]),t._v(" "),s("p",[t._v("Object.isFrozen方法用于检查一个对象是否使用了Object.freeze方法")]),t._v(" "),s("blockquote",[s("p",[t._v("使用Object.freeze方法以后，Object.isSealed将会返回true，Object.isExtensible返回false。")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("局限性")]),t._v(" "),s("p",[t._v("三个方法锁定对象的可写性有一个漏洞：可以通过改变原型对象，来为对象增加属性。")]),t._v(" "),s("p",[s("strong",[t._v("如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。")])])]),t._v(" "),s("h2",{attrs:{id:"遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[t._v("#")]),t._v(" 遍历⭐️")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Object.keys方法（自身，可遍历属性）")])]),t._v(" "),s("li",[s("p",[t._v("Object.getOwnPropertyNames方法(自身，不可遍历+可遍历属性)")])]),t._v(" "),s("li",[s("p",[t._v("for in（自身+继承，可遍历属性）")]),t._v(" "),s("blockquote",[s("p",[t._v("in运算符不区分该属性是对象自身的属性，还是继承的属性。配合hasOwnProperty()可以遍历自身属性")])])])]),t._v(" "),s("h2",{attrs:{id:"用symbol-iterator实现对象遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用symbol-iterator实现对象遍历"}},[t._v("#")]),t._v(" 用symbol.iterator实现对象遍历⭐️")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myFavouriteAuthors "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tallAuthors"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tfiction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Agatha Christie'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n      \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'J. K. Rowling'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Dr. Seuss'")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \tscienceFiction"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Neal Stephenson'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Arthur Clarke'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Isaac Asimov'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n      \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Robert Heinlein'")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \tfantasy"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      \t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'J. R. R. Tolkien'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      \t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'J. K. Rowling'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      \t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Terry Pratchett'")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取数组中的所有作者")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" genres "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allAuthors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Object.values()方法返回一个给定对象自身的所有可枚举属性值的数组，")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储当前类型和索引")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentAuthorIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentGenreIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Implementation of next()")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       \t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据当前的索引获取对应的作者信息")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" authors "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" genres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("currentGenreIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当遍历完数组 authors时,doNotHaveMoreAuthors 为 true")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" doNothaveMoreAuthors "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentAuthorIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" authors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//console.log(currentAuthorIndex, authors.length, doNothaveMoreAuthors);")]),t._v("\n\n        \t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doNothaveMoreAuthors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         \t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加一继续访问下一个")]),t._v("\n          \t\t\tcurrentGenreIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          \t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置")]),t._v("\n          \t\t\tcurrentAuthorIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果所有 genres 都遍历完了结，那么我们需要告诉迭代器不能提供更多的值。")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" doNotHaveMoreGenres "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentGenreIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" genres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doNotHaveMoreGenres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         \t\t\t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            \t\t\tvalue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Undefined"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            \t\t\tdone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n          \t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果一切正常，从当genre 返回 作者和当前作者索引，以便下次，下一个作者可以返回。")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          \t\t\tvalue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" genres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("currentGenreIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("currentAuthorIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          \t\t\tdone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n        \t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      \t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" author "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" myFavouriteAuthors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("author"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("myFavouriteAuthors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"获得对象的所有属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获得对象的所有属性"}},[t._v("#")]),t._v(" 获得对象的所有属性")]),t._v(" "),s("p",[t._v("不管是自身的还是继承的，也不管是否可枚举")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inheritedPropertyNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" props "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取原型链上的属性")]),t._v("\n    obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//props是一个对象，成员是属性名，值是true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Object.getOwnPropertyNames返回props对象的键，也就是对象所有的属性")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"for-in"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for in")]),t._v(" "),s("p",[t._v("for...in")]),t._v(" "),s("ul",[s("li",[t._v("它遍历的是对象所有"),s("strong",[t._v("可遍历（enumerable）的属性(除Symbol外)，会跳过不可遍历的属性。")])]),t._v(" "),s("li",[t._v("它"),s("strong",[t._v("不仅遍历对象自身的属性，还遍历继承的属性")]),t._v("。")])]),t._v(" "),s("p",[t._v("举例来说，对象都继承了toString属性，但是for...in循环不会遍历到这个属性。")]),t._v(" "),s("p",[t._v("for ... in是为遍历对象属性而构建的，不建议与数组一起使用，数组可以用Array.prototype.forEach()和for ... of，")]),t._v(" "),s("h3",{attrs:{id:"for-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[t._v("#")]),t._v(" for of")]),t._v(" "),s("p",[t._v("ES6 为字符串添加了遍历器接口（详见《Iterator》一章），使得字符串可以被for...of循环遍历。")]),t._v(" "),s("p",[s("strong",[t._v("for...in 语句以任意顺序迭代对象的可枚举属性。")])]),t._v(" "),s("p",[t._v("for...of 语句遍历可迭代对象定义要迭代的数据。")]),t._v(" "),s("h3",{attrs:{id:"for-in-和普通for循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in-和普通for循环"}},[t._v("#")]),t._v(" for in 和普通for循环")]),t._v(" "),s("ul",[s("li",[t._v("for循环可遍历数组，而for in循环可以遍历数组和对象")]),t._v(" "),s("li",[t._v("使用for in循环会将Array当成对象遍历，而Array的存取速度明显比Object要快。所以使用for循环遍历数组比for in循环遍历快。")]),t._v(" "),s("li",[t._v("for循环遍历的是索引数组，通过索引来调用，i的返回值是number类型；而for in循环遍历的是关联数组，通过key来调用，i的返回值是string类型")])]),t._v(" "),s("h2",{attrs:{id:"怎么判断一个对象是不是可迭代的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么判断一个对象是不是可迭代的"}},[t._v("#")]),t._v(" 怎么判断一个对象是不是可迭代的⭐️")]),t._v(" "),s("p",[t._v("一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”")]),t._v(" "),s("p",[t._v("同时Symbol.iterator方法对应的是遍历器生成函数（即会返回一个遍历器对象）")]),t._v(" "),s("h2",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v("构造函数的特点有两个。")]),t._v(" "),s("ul",[s("li",[t._v("函数体内部使用了this关键字，代表了所要生成的对象实例。")]),t._v(" "),s("li",[t._v("生成对象的时候，必须使用new命令。（不使用会造成错误）")])]),t._v(" "),s("p",[t._v("为了保证构造函数必须与new命令一起使用")]),t._v(" "),s("p",[t._v("一个解决办法是，构造函数内部使用严格模式，即第一行加上use strict。")]),t._v(" "),s("p",[t._v("另一个解决办法，构造函数内部判断是否使用new命令，如果发现没有使用，则直接返回一个实例对象。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fubar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fubar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fubar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fubar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_foo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fubar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_foo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[t._v("#")]),t._v(" new⭐️")]),t._v(" "),s("p",[t._v("new命令的作用，就是执行构造函数，返回一个实例对象")]),t._v(" "),s("p",[t._v("如果对普通函数（内部没有this关键字的函数）使用new命令，则会返回一个空对象。")]),t._v(" "),s("p",[t._v("这是因为new命令总是返回一个对象，要么是实例对象，要么是return语句指定的对象。")]),t._v(" "),s("h3",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理⭐️")]),t._v(" "),s("p",[t._v("使用new命令时，它后面的函数依次执行下面的步骤。")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("创建一个空对象，作为将要返回的对象实例。")])]),t._v(" "),s("li",[s("strong",[t._v("将这个空对象的原型，指向构造函数的prototype属性。")])]),t._v(" "),s("li",[s("strong",[t._v("将这个空对象赋值给函数内部的this关键字。")])]),t._v(" "),s("li",[s("strong",[t._v("开始执行构造函数内部的代码。")])])]),t._v(" "),s("p",[t._v("构造函数内部，this指的是一个新生成的空对象，所有针对this的操作，都会发生在这个空对象上")]),t._v(" "),s("p",[s("strong",[t._v("如果构造函数内部有return语句，而且return后面跟着一个对象，new命令会返回return语句指定的对象；")])]),t._v(" "),s("p",[s("strong",[t._v("否则，就会不管return语句，返回this对象。")])]),t._v(" "),s("h3",{attrs:{id:"new-target"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-target"}},[t._v("#")]),t._v(" new.target")]),t._v(" "),s("p",[t._v("函数内部可以使用new.target属性。如果当前函数是new命令调用，new.target指向当前函数，否则为undefined。")]),t._v(" "),s("h3",{attrs:{id:"new出的对象有哪些实例属性和方法以及原型属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new出的对象有哪些实例属性和方法以及原型属性和方法"}},[t._v("#")]),t._v(" new出的对象有哪些实例属性和方法以及原型属性和方法")]),t._v(" "),s("ul",[s("li",[t._v("this属性")]),t._v(" "),s("li",[t._v("prototype属性")]),t._v(" "),s("li",[t._v("constructor")])]),t._v(" "),s("h3",{attrs:{id:"哪些函数不能被new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哪些函数不能被new"}},[t._v("#")]),t._v(" 哪些函数不能被new")]),t._v(" "),s("p",[t._v("new操作符会去查看该对象内部是否实现了Construct方法，未实现则抛出"),s("code",[t._v("Uncaught TypeError: xxx is not a constructor")])]),t._v(" "),s("ul",[s("li",[t._v("箭头函数")]),t._v(" "),s("li",[t._v("Symbol")]),t._v(" "),s("li",[t._v("内置对象上的一些静态方法,如Math.pow()、JSON.parse()")]),t._v(" "),s("li",[t._v("内置对象的一些实例方法，[].spilt()")])]),t._v(" "),s("h3",{attrs:{id:"在new中有返回值，那么会返回什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在new中有返回值，那么会返回什么"}},[t._v("#")]),t._v(" 在new中有返回值，那么会返回什么")]),t._v(" "),s("p",[t._v("只有在返回类型是引用类型时，才会覆盖实例")]),t._v(" "),s("h3",{attrs:{id:"new和直接｛｝区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new和直接｛｝区别"}},[t._v("#")]),t._v(" new和直接｛｝区别")]),t._v(" "),s("p",[t._v("通过var obj = new Object()的写法生成新对象，与字面量的写法var obj = {}是等价的")]),t._v(" "),s("h2",{attrs:{id:"object-create"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-create"}},[t._v("#")]),t._v(" Object.create()⭐️")]),t._v(" "),s("p",[t._v("构造函数作为模板，可以生成实例对象。但是，有时拿不到构造函数，只能拿到一个现有的对象。")]),t._v(" "),s("p",[t._v("以现有的对象作为模板，生成新的实例对象，这时就可以使用Object.create()方法。")]),t._v(" "),s("p",[t._v("必须提供对象原型，即参数不能为空，或者不是对象，否则会报错。")]),t._v(" "),s("p",[s("strong",[t._v("Object.create()方法还可以接受第二个参数。该参数是一个属性描述对象，它所描述的对象属性，会添加到实例对象，作为该对象自身的属性。")])]),t._v(" "),s("p",[t._v("Object.create()方法生成的新对象，动态继承了原型，继承了它的原型对象的构造函数。")]),t._v(" "),s("p",[t._v("在原型上添加或修改任何方法，会立刻反映在新对象之上。")]),t._v(" "),s("p",[t._v("Object.create方法的第二个参数添加的对象属性，如果不显式声明，默认是不可遍历的，因为其属性描述对象的enumerable默认是false")]),t._v(" "),s("h3",{attrs:{id:"object-create-和-new-创建对象有什么区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-create-和-new-创建对象有什么区别？"}},[t._v("#")]),t._v(" Object.create 和 new 创建对象有什么区别？")]),t._v(" "),s("p",[t._v("Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__")]),t._v(" "),s("p",[t._v("字面量和new关键字创建的对象是Object的实例，原型指向Object.prototype，继承内置对象Object")]),t._v(" "),s("p",[t._v("Object.create(arg, pro)创建的对象的原型取决于arg，arg为null，新对象是空对象，没有原型，不继承任何对象；arg为指定对象，新对象的原型指向指定对象，继承指定对象")]),t._v(" "),s("h3",{attrs:{id:"实现object-create方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现object-create方法"}},[t._v("#")]),t._v(" 实现Object.create方法⭐️")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新建一个空的构造函数F")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//然后让F.prototype属性指向参数对象obj")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最后返回一个F的实例，从而实现让该实例继承obj的属性。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"生成的新对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成的新对象"}},[t._v("#")]),t._v(" 生成的新对象")]),t._v(" "),s("p",[t._v("三种生成新对象方法：")]),t._v(" "),s("ul",[s("li",[t._v("var obj1 = Object.create({});")]),t._v(" "),s("li",[t._v("var obj2 = Object.create(Object.prototype);")]),t._v(" "),s("li",[t._v("var obj3 = new Object();")])]),t._v(" "),s("p",[t._v("生成一个不继承任何属性（比如没有toString()和valueOf()方法）的对象，可以将Object.create()的参数设为null。")]),t._v(" "),s("h2",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),s("p",[t._v("简单说，this就是属性或方法“当前”所在的对象。它总是返回一个对象。")]),t._v(" "),s("h3",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("全局环境")]),t._v(" "),s("p",[t._v("全局环境使用this，它指的就是顶层对象window。")])]),t._v(" "),s("li",[s("p",[t._v("构造函数")]),t._v(" "),s("p",[t._v("构造函数中的this，指的是实例对象。")])]),t._v(" "),s("li",[s("p",[t._v("对象的方法")]),t._v(" "),s("p",[t._v("如果对象的方法里面包含this，this的指向就是方法运行时所在的对象。")]),t._v(" "),s("p",[t._v("该方法赋值给另一个对象，就会改变this的指向。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下面这几种用法，都会改变this的指向。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况三")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window")]),t._v("\n")])])]),s("p",[t._v("obj和obj.foo储存在两个内存地址，称为地址一和地址二。")]),t._v(" "),s("p",[t._v("obj.foo()这样调用时，是从地址一调用地址二，因此地址二的运行环境是地址一，this指向obj。")]),t._v(" "),s("p",[t._v("但是，上面三种情况，都是直接取出地址二进行调用，这样的话，运行环境就是全局环境，因此this指向全局环境")])])]),t._v(" "),s("h3",{attrs:{id:"使用注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用注意"}},[t._v("#")]),t._v(" 使用注意⭐️")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("避免多层 this")]),t._v(" "),s("p",[t._v("若要使用时，使用一个变量固定this的值，然后内层函数调用这个变量")])]),t._v(" "),s("li",[s("p",[t._v("避免数组处理方法中的 this")]),t._v(" "),s("p",[s("strong",[t._v("数组的map和foreach方法，允许提供一个函数作为参数。这个函数内部不应该使用this。（指向window对象）")])]),t._v(" "),s("p",[t._v("解决方法：")]),t._v(" "),s("ul",[s("li",[t._v("使用中间变量固定this")]),t._v(" "),s("li",[t._v("将this当作foreach方法的第二个参数，固定它的运行环境。")])])]),t._v(" "),s("li",[s("p",[t._v("避免回调函数中的 this")])])]),t._v(" "),s("h3",{attrs:{id:"绑定this的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绑定this的方法"}},[t._v("#")]),t._v(" 绑定this的方法⭐️")]),t._v(" "),s("h4",{attrs:{id:"function-prototype-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-prototype-call"}},[t._v("#")]),t._v(" Function.prototype.call()")]),t._v(" "),s("p",[t._v("函数实例的call方法，可以指定函数内部this的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。")]),t._v(" "),s("p",[s("strong",[t._v("call方法的参数，应该是一个对象。")]),t._v(" 如果参数为空、null和undefined，则默认传入全局对象。")]),t._v(" "),s("p",[s("strong",[t._v("call方法还可以接受多个参数。")])]),t._v(" "),s("p",[t._v("如果call方法的参数是一个原始值，那么这个原始值会自动转成对应的包装对象，然后传入call方法。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("应用")]),t._v(" "),s("p",[t._v("call方法的一个应用是调用对象的原生方法。")])]),t._v(" "),s("h4",{attrs:{id:"function-prototype-apply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-prototype-apply"}},[t._v("#")]),t._v(" Function.prototype.apply()")]),t._v(" "),s("p",[t._v("apply方法的作用与call方法类似，也是改变this指向，然后再调用该函数。")]),t._v(" "),s("p",[s("strong",[t._v("唯一的区别就是，它接收一个数组作为函数执行时的参数")])]),t._v(" "),s("p",[t._v("apply方法的第一个参数也是this所要指向的那个对象，如果设为null或undefined，则等同于指定全局对象。")]),t._v(" "),s("p",[t._v("第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。")]),t._v(" "),s("p",[s("strong",[t._v("原函数的参数，在call方法中必须一个个添加，但是在apply方法中，必须以数组形式添加。")])]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("应用")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("找出数组最大元素")]),t._v(" "),s("p",[t._v("使用apply方法和Math.max方法，就可以返回数组的最大元素。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("将数组的空元素变为undefined")]),t._v(" "),s("p",[t._v("通过apply方法，利用Array构造函数将数组的空元素变成undefined。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', undefined, 'b' ]")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("转换类似数组的对象")]),t._v(" "),s("p",[t._v("利用数组对象的slice方法，可以将一个类似数组的对象（比如arguments对象）转为真正的数组。")])]),t._v(" "),s("li",[s("p",[t._v("绑定回调函数的对象")])])])]),t._v(" "),s("h4",{attrs:{id:"function-prototype-bind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-prototype-bind"}},[t._v("#")]),t._v(" Function.prototype.bind()")]),t._v(" "),s("p",[t._v("由于apply()方法（或者call()方法）不仅绑定函数执行时所在的对象，还会立即执行函数，因此不得不把绑定语句写在一个函数体内。")]),t._v(" "),s("p",[t._v("bind()方法用于将函数体内的this绑定到某个对象，"),s("strong",[t._v("然后返回一个新函数。")])]),t._v(" "),s("p",[t._v("bind方法的参数就是所要绑定this的对象")]),t._v(" "),s("p",[t._v("bind()还可以接受更多的参数，将这些参数绑定原函数的参数。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tm"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newAdd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n")])])]),s("p",[t._v("如果bind()方法的第一个参数是null或undefined，等于将this绑定到全局对象，函数运行时this指向顶层对象（浏览器为window）。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("每一次返回一个新函数")]),t._v(" "),s("p",[t._v("假如click事件绑定bind()方法生成一个匿名函数。这样会导致无法取消绑定")])])]),t._v(" "),s("h2",{attrs:{id:"如何设置对象属性不可删除、不可修改、不可遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何设置对象属性不可删除、不可修改、不可遍历"}},[t._v("#")]),t._v(" 如何设置对象属性不可删除、不可修改、不可遍历")]),t._v(" "),s("ul",[s("li",[t._v("Object.preventExtensions()，不能增加对象属性")]),t._v(" "),s("li",[t._v("Object.seal()，不可新增、不可删除对象属性")]),t._v(" "),s("li",[t._v("Object.frozen()，不可新增、不可删除、不可修改对象属性")]),t._v(" "),s("li",[t._v("Object.defineProperty(object, propertyName, {enumerable: false})方法通过属性描述对象，修改enumerable属性")])]),t._v(" "),s("h2",{attrs:{id:"如何删除对象的属性，有哪些方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何删除对象的属性，有哪些方法"}},[t._v("#")]),t._v(" 如何删除对象的属性，有哪些方法")]),t._v(" "),s("p",[t._v("delete，用于删除对象的某个属性；如果没有指向这个属性的引用，那它最终会被释放。")]),t._v(" "),s("p",[t._v("一般情况下返回值都是true，除非属性是一个自身的不可配置的属性，在这种情况下，非严格模式返回 false。严格模式下，抛出TypeError")]),t._v(" "),s("p",[t._v("如果试图删除的属性不存在，那么delete将不会起任何作用，但仍会返回true")]),t._v(" "),s("p",[t._v("delete操作只会在自身的属性上起作用")]),t._v(" "),s("p",[t._v("任何使用 var 声明的属性不能从全局作用域或函数的作用域中删除")]),t._v(" "),s("p",[t._v("任何用let或const声明的属性不能够从它被声明的作用域中删除。")]),t._v(" "),s("p",[t._v("不可设置的(Non-configurable)属性不能被移除。这意味着像Math, Array, Object内置对象的属性以及使用Object.defineProperty()方法设置为不可设置的属性不能被删除。")]),t._v(" "),s("h2",{attrs:{id:"javascript-的-private-属性是怎样实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的-private-属性是怎样实现的"}},[t._v("#")]),t._v(" JavaScript 的 private 属性是怎样实现的⭐️")]),t._v(" "),s("ul",[s("li",[t._v("变量命名约定")]),t._v(" "),s("li",[t._v("使用闭包")]),t._v(" "),s("li",[t._v("使用WeakMap")])]),t._v(" "),s("h2",{attrs:{id:"说一下map和object有什么区别。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下map和object有什么区别。"}},[t._v("#")]),t._v(" 说一下map和object有什么区别。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("object的键只能是String 和 Symbol ，而Map的键可以是任意的数据类型")])]),t._v(" "),s("li",[s("p",[t._v("同名碰撞")]),t._v(" "),s("p",[t._v("Map的键存的地址只要不一样，就是两个不同的键，这就解决了同名属性的碰撞问题")])]),t._v(" "),s("li",[s("p",[t._v("迭代")]),t._v(" "),s("p",[t._v("Map实现了迭代器，可用for…of遍历，而Object不行。")])]),t._v(" "),s("li",[s("p",[t._v("size")]),t._v(" "),s("p",[t._v("Map可以直接拿到长度，而Object不行。")])]),t._v(" "),s("li",[s("p",[t._v("有序性")]),t._v(" "),s("p",[t._v("填入Map的元素，会保持原有的顺序，而Object无法做到。")])]),t._v(" "),s("li",[s("p",[t._v("扩展运算符")]),t._v(" "),s("p",[t._v("Map可以使用扩展运算符展开，而Object不行。")])])]),t._v(" "),s("h2",{attrs:{id:"如何判断一个对象为空（如何判断symbol对象为空）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个对象为空（如何判断symbol对象为空）"}},[t._v("#")]),t._v(" 如何判断一个对象为空（如何判断symbol对象为空）⭐️")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("for in")])]),t._v(" "),s("li",[s("p",[t._v("for of")])]),t._v(" "),s("li",[s("p",[t._v("JSON.stringify() == '{}'")]),t._v(" "),s("p",[t._v("将对象转换成JSON 后再判断是否为{}")])]),t._v(" "),s("li",[s("p",[t._v("Object.getOwnPropertyNames()")]),t._v(" "),s("p",[t._v("获取属性值，然后通过判断返回的数组的长度是否为0")])]),t._v(" "),s("li",[s("p",[t._v("Object.keys()")])]),t._v(" "),s("li",[s("p",[t._v("Object.values()")])])]),t._v(" "),s("p",[s("strong",[t._v("但是Symbol值会例外，因为获取不到，所以需要用上Object.getOwnPropertySymbols()，或者是Reflect.ownKeys()")])]),t._v(" "),s("h2",{attrs:{id:"如何判断两个对象内容相等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断两个对象内容相等"}},[t._v("#")]),t._v(" 如何判断两个对象内容相等")]),t._v(" "),s("p",[t._v("转化成string")]),t._v(" "),s("h2",{attrs:{id:"如何在实例化一个对象时传参，考虑已知参数数量和未知两种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在实例化一个对象时传参，考虑已知参数数量和未知两种情况"}},[t._v("#")]),t._v(" 如何在实例化一个对象时传参，考虑已知参数数量和未知两种情况")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("arguments")])]),t._v(" "),s("li",[s("p",[t._v("rest参数···")]),t._v(" "),s("p",[t._v("只能是最后一个参数，且一个函数定义中只能有一个不定参数")])])]),t._v(" "),s("h2",{attrs:{id:"map怎么转为对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map怎么转为对象"}},[t._v("#")]),t._v(" map怎么转为对象")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("循环里一个个赋值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("Object.fromEntries()方法是Object.entries()的逆操作，用于将一个键值对数组转为对象。")])])]),t._v(" "),s("h2",{attrs:{id:"object-prototype-tostring-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call"}},[t._v("#")]),t._v(" Object.prototype.toString.call()")]),t._v(" "),s("p",[t._v('如果在自定义对象中未被覆盖，toString() 返回 "[object type]"')]),t._v(" "),s("p",[t._v("只有undefined、null和Object.create(null)没有toString方法。")]),t._v(" "),s("h3",{attrs:{id:"为什么不能直接调用obj-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么不能直接调用obj-tostring"}},[t._v("#")]),t._v(" 为什么不能直接调用obj.toString")]),t._v(" "),s("p",[t._v("直接调用的toString可以自己修改")]),t._v(" "),s("h2",{attrs:{id:"有哪些对象是可迭代的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些对象是可迭代的"}},[t._v("#")]),t._v(" 有哪些对象是可迭代的")]),t._v(" "),s("ul",[s("li",[t._v("Array")]),t._v(" "),s("li",[t._v("Map")]),t._v(" "),s("li",[t._v("Set")]),t._v(" "),s("li",[t._v("String")]),t._v(" "),s("li",[t._v("arguments")]),t._v(" "),s("li",[t._v("DOM 元素集合，比如一个NodeList对象")])]),t._v(" "),s("h2",{attrs:{id:"包装对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包装对象"}},[t._v("#")]),t._v(" 包装对象⭐️")]),t._v(" "),s("p",[t._v("指的是与数值、字符串、布尔值分别相对应的Number、String、Boolean三个原生对象。")]),t._v(" "),s("p",[s("strong",[t._v("这三个对象作为构造函数使用（带有new）时，可以将原始类型的值转为对象；")])]),t._v(" "),s("p",[s("strong",[t._v("作为普通函数使用时（不带有new），可以将任意类型的值，转为原始类型的值。")])]),t._v(" "),s("p",[s("code",[t._v("valueOf()")]),t._v("方法返回包装对象实例对应的原始类型的值。")]),t._v(" "),s("p",[s("code",[t._v("toString()")]),t._v("方法返回对应的字符串形式。")]),t._v(" "),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("p",[t._v("某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。")]),t._v(" "),s("p",[t._v("这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。")]),t._v(" "),s("p",[t._v("比如，字符串可以调用length属性，返回字符串的长度。")]),t._v(" "),s("blockquote",[s("p",[t._v("自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。")])]),t._v(" "),s("h3",{attrs:{id:"boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),s("p",[t._v("注意对比")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("h3",{attrs:{id:"number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Number.POSITIVE_INFINITY")]),t._v(" "),s("td",[t._v("正的无限，指向Infinity。")])]),t._v(" "),s("tr",[s("td",[t._v("Number.NEGATIVE_INFINITY")]),t._v(" "),s("td",[t._v("负的无限，指向-Infinity。")])]),t._v(" "),s("tr",[s("td",[t._v("Number.NaN")]),t._v(" "),s("td",[t._v("表示非数值，指向NaN。")])]),t._v(" "),s("tr",[s("td",[t._v("Number.MIN_VALUE")]),t._v(" "),s("td",[t._v("表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最接近0的负数为-Number.MIN_VALUE。")])]),t._v(" "),s("tr",[s("td",[t._v("Number.MAX_SAFE_INTEGER")]),t._v(" "),s("td",[t._v("表示能够精确表示的最大整数，即9007199254740991。")])]),t._v(" "),s("tr",[s("td",[t._v("Number.MIN_SAFE_INTEGER")]),t._v(" "),s("td",[t._v("表示能够精确表示的最小整数，即-9007199254740991。")])])])]),t._v(" "),s("h4",{attrs:{id:"number-prototype-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-tostring"}},[t._v("#")]),t._v(" Number.prototype.toString()")]),t._v(" "),s("p",[t._v("将一个数值转为字符串形式。")]),t._v(" "),s("p",[t._v("toString方法可以接受一个参数，表示输出的进制。")]),t._v(" "),s("p",[t._v("如果省略这个参数，默认将数值先转为十进制，再输出字符串；")]),t._v(" "),s("p",[t._v("否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。")]),t._v(" "),s("p",[s("strong",[t._v("通过方括号运算符也可以调用toString方法。")])]),t._v(" "),s("p",[t._v("toString方法只能将十进制的数，转为其他进制的字符串。")]),t._v(" "),s("blockquote",[s("p",[t._v("如果要将其他进制的数，转回十进制，需要使用parseInt方法。")])]),t._v(" "),s("h4",{attrs:{id:"number-prototype-tofixed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-tofixed"}},[t._v("#")]),t._v(" Number.prototype.toFixed()")]),t._v(" "),s("p",[t._v("toFixed()方法先将一个数转为指定位数的小数，然后返回这个小数对应的字符串。")]),t._v(" "),s("p",[t._v("toFixed()方法的参数为小数位数，有效范围为0到100，超出这个范围将抛出 RangeError 错误。")]),t._v(" "),s("p",[t._v("由于浮点数的原因，小数5的四舍五入是不确定的，使用的时候必须小心。因为采用的银行家舍入法")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("补充")]),t._v(" "),s("p",[t._v("银行家舍入法：\n四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。")])]),t._v(" "),s("h4",{attrs:{id:"number-prototype-toexponential"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-toexponential"}},[t._v("#")]),t._v(" Number.prototype.toExponential()")]),t._v(" "),s("p",[t._v("toExponential方法用于将一个数转为科学计数法形式.")]),t._v(" "),s("p",[t._v("toExponential方法的参数是小数点后有效数字的位数，范围为0到100，超出这个范围，会抛出一个 RangeError 错误。")]),t._v(" "),s("h4",{attrs:{id:"number-prototype-toprecision"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-toprecision"}},[t._v("#")]),t._v(" Number.prototype.toPrecision()")]),t._v(" "),s("p",[t._v("Number.prototype.toPrecision()方法用于将一个数转为指定位数的有效数字。")]),t._v(" "),s("p",[t._v("该方法的参数为有效数字的位数，范围是1到100，超出这个范围会抛出 RangeError 错误。")]),t._v(" "),s("p",[t._v("该方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关.")]),t._v(" "),s("h4",{attrs:{id:"number-prototype-tolocalestring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-tolocalestring"}},[t._v("#")]),t._v(" Number.prototype.toLocaleString()")]),t._v(" "),s("p",[t._v("Number.prototype.toLocaleString()方法接受一个地区码作为参数，返回一个字符串，表示当前数字在该地区的当地书写形式。\n"),s("code",[t._v("(123).toLocaleString('zh-Hans-CN-u-nu-hanidec') // \"一二三\"")])]),t._v(" "),s("p",[t._v("该方法还可以接受第二个参数配置对象，用来定制指定用途的返回字符串。")]),t._v(" "),s("p",[t._v("该对象的style属性指定输出样式，")]),t._v(" "),s("p",[t._v("默认值是decimal，表示输出十进制形式。")]),t._v(" "),s("p",[t._v("如果值为percent，表示输出百分数。")]),t._v(" "),s("p",[t._v("值为currency，输出指定格式的货币字符串形式。")]),t._v(" "),s("h2",{attrs:{id:"对象描述属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象描述属性"}},[t._v("#")]),t._v(" 对象描述属性⭐️")]),t._v(" "),s("p",[t._v("属性描述对象提供6个元属性。")]),t._v(" "),s("h3",{attrs:{id:"value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[t._v("#")]),t._v(" value")]),t._v(" "),s("p",[t._v("value是该属性的属性值，默认为undefined。")]),t._v(" "),s("p",[s("strong",[t._v("只要writable和configurable有一个为true，就允许改动。")])]),t._v(" "),s("p",[t._v("当都为false的时候，直接目标属性赋值，不报错，但不会成功。（严格模式才报错）")]),t._v(" "),s("p",[t._v("属性描述符必须是数据描述符或者存取描述符两种形式之一，不能同时是两者 。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"writable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writable"}},[t._v("#")]),t._v(" writable")]),t._v(" "),s("p",[t._v("writable是一个布尔值，表示属性值（value）是否可改变（即是否可写），默认为true。")]),t._v(" "),s("h3",{attrs:{id:"enumerable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enumerable"}},[t._v("#")]),t._v(" enumerable")]),t._v(" "),s("p",[t._v("enumerable是一个布尔值，表示该属性是否可遍历，默认为true。")]),t._v(" "),s("p",[t._v("如果设为false，会使得某些操作（"),s("strong",[t._v("比如for...in循环、Object.keys()、JSON.stringify方法")]),t._v("）跳过该属性。")]),t._v(" "),s("h3",{attrs:{id:"configurable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configurable"}},[t._v("#")]),t._v(" configurable")]),t._v(" "),s("p",[t._v("configurable是一个布尔值，表示可配置性，默认为true。")]),t._v(" "),s("p",[t._v("如果设为false，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（value属性除外）。")]),t._v(" "),s("p",[s("strong",[t._v("configurable为false时，writable(true可改为false)、enumerable和configurable都不能被修改了")])]),t._v(" "),s("p",[t._v("也就是说，configurable属性控制了属性描述对象的可写性。")]),t._v(" "),s("p",[t._v("可配置性决定了目标属性是否可以被删除（delete）")]),t._v(" "),s("h3",{attrs:{id:"get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" get")]),t._v(" "),s("p",[t._v("get是一个函数，表示该属性的取值函数（getter），默认为undefined。")]),t._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" set")]),t._v(" "),s("p",[t._v("set是一个函数，表示该属性的存值函数（setter），默认为undefined")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写法一：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'getter'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setter: '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写法二：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'getter'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setter: '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n**第一种写法，属性p的configurable和enumerable都为true，属性p可遍历\n**第二种写法，属性p的configurable和enumerable都为false，属性p是不可遍历的；\n*/")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("Object.defineProperty()和Object.defineProperties()参数里面的属性描述对象，\nwritable、configurable、enumerable这三个属性的默认值都为false。")])]),t._v(" "),s("p",[s("strong",[t._v("如果原型对象的某个属性的writable为false，那么子对象将无法自定义这个属性。")])]),t._v(" "),s("p",[t._v("但是，有一个规避方法，就是通过覆盖属性描述对象，绕过这个限制。原因是这种情况下，原型链会被完全忽视。")]),t._v(" "),s("h2",{attrs:{id:"math对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math对象"}},[t._v("#")]),t._v(" Math对象")]),t._v(" "),s("p",[t._v("Math对象的静态属性，提供以下一些数学常数。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Math.E")]),t._v(" "),s("td",[t._v("常数e。")])]),t._v(" "),s("tr",[s("td",[t._v("Math.LN2")]),t._v(" "),s("td",[t._v("2 的自然对数。")])]),t._v(" "),s("tr",[s("td",[t._v("Math.LN10")]),t._v(" "),s("td",[t._v("10 的自然对数。")])]),t._v(" "),s("tr",[s("td",[t._v("Math.LOG2E")]),t._v(" "),s("td",[t._v("以 2 为底的e的对数。")])]),t._v(" "),s("tr",[s("td",[t._v("Math.LOG10E")]),t._v(" "),s("td",[t._v("以 10 为底的e的对数。")])]),t._v(" "),s("tr",[s("td",[t._v("Math.PI")]),t._v(" "),s("td",[t._v("常数π。")])]),t._v(" "),s("tr",[s("td",[t._v("Math.SQRT1_2")]),t._v(" "),s("td",[t._v("0.5 的平方根。")])]),t._v(" "),s("tr",[s("td",[t._v("Math.SQRT2")]),t._v(" "),s("td",[t._v("2 的平方根。")])])])]),t._v(" "),s("p",[t._v("Math对象提供以下一些静态方法。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Math.abs()")]),t._v(" "),s("td",[t._v("绝对值")])]),t._v(" "),s("tr",[s("td",[t._v("Math.ceil()")]),t._v(" "),s("td",[t._v("向上取整")])]),t._v(" "),s("tr",[s("td",[t._v("Math.floor()")]),t._v(" "),s("td",[t._v("向下取整")])]),t._v(" "),s("tr",[s("td",[t._v("Math.max()")]),t._v(" "),s("td",[t._v("最大值")])]),t._v(" "),s("tr",[s("td",[t._v("Math.min()")]),t._v(" "),s("td",[t._v("最小值")])]),t._v(" "),s("tr",[s("td",[t._v("Math.pow()")]),t._v(" "),s("td",[t._v("幂运算")])]),t._v(" "),s("tr",[s("td",[t._v("Math.sqrt()")]),t._v(" "),s("td",[t._v("平方根")])]),t._v(" "),s("tr",[s("td",[t._v("Math.log()")]),t._v(" "),s("td",[t._v("自然对数")])]),t._v(" "),s("tr",[s("td",[t._v("Math.exp()")]),t._v(" "),s("td",[t._v("e的指数")])]),t._v(" "),s("tr",[s("td",[t._v("Math.round()")]),t._v(" "),s("td",[t._v("四舍五入")])]),t._v(" "),s("tr",[s("td",[t._v("Math.random()")]),t._v(" "),s("td",[t._v("随机数")])])])]),t._v(" "),s("p",[t._v("Math对象还提供一系列三角函数方法。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("三角函数方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Math.sin()")]),t._v(" "),s("td",[t._v("返回参数的正弦（参数为弧度值）")])]),t._v(" "),s("tr",[s("td",[t._v("Math.cos()")]),t._v(" "),s("td",[t._v("返回参数的余弦（参数为弧度值）")])]),t._v(" "),s("tr",[s("td",[t._v("Math.tan()")]),t._v(" "),s("td",[t._v("返回参数的正切（参数为弧度值）")])]),t._v(" "),s("tr",[s("td",[t._v("Math.asin()")]),t._v(" "),s("td",[t._v("返回参数的反正弦（返回值为弧度值）")])]),t._v(" "),s("tr",[s("td",[t._v("Math.acos()")]),t._v(" "),s("td",[t._v("返回参数的反余弦（返回值为弧度值）")])]),t._v(" "),s("tr",[s("td",[t._v("Math.atan()")]),t._v(" "),s("td",[t._v("返回参数的反正切（返回值为弧度值）")])])])]),t._v(" "),s("h3",{attrs:{id:"math-max-，math-min"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-max-，math-min"}},[t._v("#")]),t._v(" Math.max()，Math.min()")]),t._v(" "),s("p",[t._v("Math.max方法返回参数之中最大的那个值，Math.min返回最小的那个值。")]),t._v(" "),s("p",[t._v("如果参数为空, Math.min返回Infinity, Math.max返回-Infinity。")]),t._v(" "),s("h3",{attrs:{id:"math-round"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-round"}},[t._v("#")]),t._v(" Math.round()")]),t._v(" "),s("p",[t._v("Math.round方法用于四舍五入。")]),t._v(" "),s("p",[t._v("注意：\n"),s("code",[t._v("Math.round(-1.5) // -1")])]),t._v(" "),s("h3",{attrs:{id:"math-sqrt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-sqrt"}},[t._v("#")]),t._v(" Math.sqrt()")]),t._v(" "),s("p",[t._v("Math.sqrt方法返回参数值的平方根。如果参数是一个负值，则返回NaN。")]),t._v(" "),s("h3",{attrs:{id:"math-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-log"}},[t._v("#")]),t._v(" Math.log()")]),t._v(" "),s("p",[t._v("Math.log方法返回以e为底的自然对数值。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以10为底")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LN10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以2为底")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LN2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),s("h3",{attrs:{id:"math-random"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-random"}},[t._v("#")]),t._v(" Math.random()")]),t._v(" "),s("p",[t._v("Math.random()返回0到1之间的一个伪随机数，"),s("strong",[t._v("可能等于0，但是一定小于1。")])]),t._v(" "),s("p",[t._v("任意范围的随机数生成函数如下。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandomArbitrary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("任意范围的随机整数生成函数如下。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandomInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("返回随机字符的例子如下。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random_str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ALPHABET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ABCDEFGHIJKLMNOPQRSTUVWXYZ'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ALPHABET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefghijklmnopqrstuvwxyz'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ALPHABET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0123456789-_'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rand "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ALPHABET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ALPHABET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rand "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"date对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date对象"}},[t._v("#")]),t._v(" Date对象")]),t._v(" "),s("p",[t._v("Date实例求值的时候，默认调用的是toString()方法")]),t._v(" "),s("blockquote",[s("p",[t._v("其他对象是调用valueOf方法")])]),t._v(" "),s("p",[t._v("Date对象可以作为普通函数直接调用，"),s("strong",[t._v("返回一个代表当前时间的字符串。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意，即使带有参数，Date作为普通函数使用时，返回的还是当前时间。")])]),t._v(" "),s("p",[t._v("Date还可以当作构造函数使用。对它使用new命令，会返回一个Date对象的实例。")]),t._v(" "),s("blockquote",[s("p",[t._v("如果不加参数，实例代表的就是当前时间。")])]),t._v(" "),s("p",[t._v("使用 new 关键字来调用构造函数时，不能直接使用数组+ apply 的方式（apply 执行的是调用 "),s("code",[t._v("[[Call]]")]),t._v(" , 而不是构造 "),s("code",[t._v("[[Construct]]")]),t._v("）。当然, 有了展开语法, 将数组展开为构造函数的参数就很简单了：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dateFields "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1970")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1970年1月1日")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("dateFields"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("作为构造函数时，Date对象可以接受多种格式的参数，返回一个该参数对应的时间实例。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("参数为时间零点开始计算的毫秒数")]),t._v(" "),s("blockquote",[s("p",[t._v("参数可以是负整数，代表1970年元旦之前的时间。")])])]),t._v(" "),s("li",[s("p",[t._v("参数为日期字符串")]),t._v(" "),s("blockquote",[s("p",[t._v("只要是能被Date.parse()方法解析的字符串，都可以当作参数。")])])]),t._v(" "),s("li",[s("p",[t._v("参数为多个整数，代表年、月、日、小时、分钟、秒、毫秒")])])]),t._v(" "),s("p",[t._v("参数为年、月、日等多个整数时，年和月是不能省略的，因为如果只使用“年”这一个参数，Date会将其解释为毫秒数。")]),t._v(" "),s("blockquote",[s("p",[t._v("月份从0开始计算，但是，天数从1开始计算。另外，除了日期的默认值为1，小时、分钟、秒钟和毫秒的默认值都是0")])]),t._v(" "),s("p",[t._v("这些参数如果超出了正常范围，会被自动折算。比如，如果月设为15，就折算为下一年的4月。")]),t._v(" "),s("h3",{attrs:{id:"类型自动转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型自动转换"}},[t._v("#")]),t._v(" 类型自动转换")]),t._v(" "),s("p",[t._v("类型自动转换时，Date实例如果转为数值，则等于对应的毫秒数；（减法）")]),t._v(" "),s("p",[t._v("如果转为字符串，则等于对应的日期字符串。（加法）")]),t._v(" "),s("h3",{attrs:{id:"静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),s("h4",{attrs:{id:"date-now"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-now"}},[t._v("#")]),t._v(" Date.now()")]),t._v(" "),s("p",[t._v("Date.now方法返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数")]),t._v(" "),s("h4",{attrs:{id:"date-parse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-parse"}},[t._v("#")]),t._v(" Date.parse()")]),t._v(" "),s("p",[t._v("Date.parse方法用来解析日期字符串，返回该时间距离时间零点（1970年1月1日 00:00:00）的毫秒数。")]),t._v(" "),s("blockquote",[s("p",[t._v("可以解析多种日期格式")])]),t._v(" "),s("p",[t._v("如果解析失败，返回NaN。")]),t._v(" "),s("h4",{attrs:{id:"date-utc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-utc"}},[t._v("#")]),t._v(" Date.UTC()")]),t._v(" "),s("p",[t._v("Date.UTC方法接受年、月、日等变量作为参数，返回该时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数。")]),t._v(" "),s("h3",{attrs:{id:"实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),s("h4",{attrs:{id:"date-prototype-valueof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-prototype-valueof"}},[t._v("#")]),t._v(" Date.prototype.valueOf()")]),t._v(" "),s("p",[t._v("valueOf方法返回实例对象距离时间零点（1970年1月1日00:00:00 UTC）对应的毫秒数，该方法等同于getTime方法。")]),t._v(" "),s("h4",{attrs:{id:"date-prototype-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-prototype-tostring"}},[t._v("#")]),t._v(" Date.prototype.toString()")]),t._v(" "),s("p",[t._v("toString方法返回一个完整的日期字符串。")]),t._v(" "),s("h4",{attrs:{id:"date-prototype-toutcstring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-prototype-toutcstring"}},[t._v("#")]),t._v(" Date.prototype.toUTCString()")]),t._v(" "),s("p",[t._v("toUTCString方法返回对应的 UTC 时间，也就是比北京时间晚8个小时。")]),t._v(" "),s("h4",{attrs:{id:"date-prototype-tojson"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-prototype-tojson"}},[t._v("#")]),t._v(" Date.prototype.toJSON()")]),t._v(" "),s("p",[t._v("toJSON方法返回一个符合 JSON 格式的 ISO 日期字符串，与toISOString方法的返回结果完全相同。")]),t._v(" "),s("p",[s("code",[t._v('"2012-12-31T16:00:00.000Z"')])]),t._v(" "),s("h4",{attrs:{id:"date-prototype-todatestring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-prototype-todatestring"}},[t._v("#")]),t._v(" Date.prototype.toDateString()")]),t._v(" "),s("p",[t._v("toDateString方法返回日期字符串（不含小时、分和秒）。")]),t._v(" "),s("h4",{attrs:{id:"date-prototype-totimestring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-prototype-totimestring"}},[t._v("#")]),t._v(" Date.prototype.toTimeString()")]),t._v(" "),s("p",[t._v("toTimeString方法返回时间字符串（不含年月日）。")]),t._v(" "),s("p",[t._v("Date对象提供了一系列get*方法，用来获取实例对象某个方面的值(当前时区的时间)。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("getTime()")]),t._v(" "),s("td",[t._v("返回实例距离1970年1月1日00:00:00的毫秒数，等同于valueOf方法。")])]),t._v(" "),s("tr",[s("td",[t._v("getDate()")]),t._v(" "),s("td",[t._v("返回实例对象对应每个月的几号（从1开始）。")])]),t._v(" "),s("tr",[s("td",[t._v("getDay()")]),t._v(" "),s("td",[t._v("返回星期几，星期日为0，星期一为1，以此类推。")])]),t._v(" "),s("tr",[s("td",[t._v("getFullYear()")]),t._v(" "),s("td",[t._v("返回四位的年份。")])]),t._v(" "),s("tr",[s("td",[t._v("getMonth()")]),t._v(" "),s("td",[t._v("返回月份（0表示1月，11表示12月）。")])]),t._v(" "),s("tr",[s("td",[t._v("getHours()")]),t._v(" "),s("td",[t._v("返回小时（0-23）。")])]),t._v(" "),s("tr",[s("td",[t._v("getMilliseconds()")]),t._v(" "),s("td",[t._v("返回毫秒（0-999）。")])]),t._v(" "),s("tr",[s("td",[t._v("getMinutes()")]),t._v(" "),s("td",[t._v("返回分钟（0-59）。")])]),t._v(" "),s("tr",[s("td",[t._v("getSeconds()")]),t._v(" "),s("td",[t._v("返回秒（0-59）。")])]),t._v(" "),s("tr",[s("td",[t._v("getTimezoneOffset()")]),t._v(" "),s("td",[t._v("返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素。")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("注意getDay()是返回星期几，getDate()是返回每个月的几号")])]),t._v(" "),s("p",[t._v("Date对象还提供了这些方法对应的 UTC 版本，用来返回 UTC 时间。如getUTCDate()")]),t._v(" "),s("p",[t._v("Date对象提供了一系列set*方法，用来设置实例对象的各个方面。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("setDate(date)")]),t._v(" "),s("td",[t._v("设置实例对象对应的每个月的几号（1-31），返回改变后毫秒时间戳。")])]),t._v(" "),s("tr",[s("td",[t._v("setFullYear(year [, month, date])")]),t._v(" "),s("td",[t._v("设置四位年份。")])]),t._v(" "),s("tr",[s("td",[t._v("setHours(hour [, min, sec, ms])")]),t._v(" "),s("td",[t._v("设置小时（0-23）。")])]),t._v(" "),s("tr",[s("td",[t._v("setMilliseconds()")]),t._v(" "),s("td",[t._v("设置毫秒（0-999）。")])]),t._v(" "),s("tr",[s("td",[t._v("setMinutes(min [, sec, ms])")]),t._v(" "),s("td",[t._v("设置分钟（0-59）。")])]),t._v(" "),s("tr",[s("td",[t._v("etMonth(month [, date])")]),t._v(" "),s("td",[t._v("设置月份（0-11）。")])]),t._v(" "),s("tr",[s("td",[t._v("setSeconds(sec [, ms])")]),t._v(" "),s("td",[t._v("设置秒（0-59）。")])]),t._v(" "),s("tr",[s("td",[t._v("setTime(milliseconds)")]),t._v(" "),s("td",[t._v("设置毫秒时间戳。")])])])]),t._v(" "),s("p",[t._v("set*方法的参数都会自动折算。以setDate()为例，如果参数超过当月的最大天数，则向下一个月顺延，")]),t._v(" "),s("p",[t._v("如果参数是负数，表示从上个月的最后一天开始减去的天数。")]),t._v(" "),s("p",[t._v("set*系列方法除了setTime()，都有对应的 UTC 版本，即设置 UTC 时区的时间")]),t._v(" "),s("h3",{attrs:{id:"如何获取当前时间的毫秒数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何获取当前时间的毫秒数"}},[t._v("#")]),t._v(" 如何获取当前时间的毫秒数")]),t._v(" "),s("ul",[s("li",[t._v("Date.now()")]),t._v(" "),s("li",[t._v("Date.prototype.valueOf()")]),t._v(" "),s("li",[t._v("getTime()")])]),t._v(" "),s("h2",{attrs:{id:"json对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json对象"}},[t._v("#")]),t._v(" JSON对象")]),t._v(" "),s("p",[t._v("JSON 格式（JavaScript Object Notation 的缩写）是一种用于数据交换的文本格式")]),t._v(" "),s("p",[t._v("每个 JSON 对象就是一个值，可能是一个数组或对象，也可能是一个原始类型的值。总之，只能是一个值，不能是两个或更多的值。")]),t._v(" "),s("p",[t._v("JSON 对值的类型和格式有严格的规定。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("复合类型的值只能是数组或对象")]),t._v("，不能是函数、正则表达式对象、日期对象。")]),t._v(" "),s("li",[t._v("原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和null（不能使用NaN, Infinity, -Infinity和undefined）。")]),t._v(" "),s("li",[t._v("字符串必须使用双引号表示，不能使用单引号。")]),t._v(" "),s("li",[t._v("对象的键名必须放在双引号里面。")]),t._v(" "),s("li",[t._v("数组或对象最后一个成员的后面，不能加逗号。")])]),t._v(" "),s("h3",{attrs:{id:"json-stringify"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify"}},[t._v("#")]),t._v(" JSON.stringify()")]),t._v(" "),s("p",[t._v("JSON.stringify()方法用于将一个值转为 JSON 字符串。")]),t._v(" "),s("p",[t._v("该字符串符合 JSON 格式，并且可以被JSON.parse()方法还原。")]),t._v(" "),s("blockquote",[s("p",[t._v("对于原始类型的字符串，转换结果会带双引号。")])]),t._v(" "),s("p",[t._v("JSON.stringify()方法还可以接受一个数组，作为第二个参数，指定参数对象的哪些属性需要转成字符串。")]),t._v(" "),s("blockquote",[s("p",[t._v("这个类似白名单的数组，只对对象的属性有效，对数组无效。")])]),t._v(" "),s("p",[t._v("第二个参数还可以是一个函数，用来更改JSON.stringify()的返回值,"),s("strong",[t._v("这个处理函数是递归处理所有的键。")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果处理函数返回undefined或没有返回值，则该属性会被忽略。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"["')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"]:"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []:[object Object]，第一次键名为空，键值是整个对象obj")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [a]:[object Object]，第二次键名为a，键值是{b: 1}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [b]:1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//默认输出")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// \'{"a":{"b":1}}\'')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//忽略属性的例子")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '{\"b\": 123}'")]),t._v("\n")])])]),s("p",[t._v("JSON.stringify()还可以接受第三个参数，用于增加返回的 JSON 字符串的可读性。")]),t._v(" "),s("p",[t._v("默认返回的是单行字符串，对于大型的 JSON 对象，可读性非常差。")]),t._v(" "),s("p",[t._v("第三个参数使得每个属性单独占据一行，并且将每个属性前面添加指定的前缀（不超过10个字符）。")]),t._v(" "),s("blockquote",[s("p",[t._v("第三个属性如果是一个数字，则表示每个属性前面添加的空格（最多不超过10个）。")])]),t._v(" "),s("p",[t._v("如果参数对象有自定义的toJSON()方法，那么JSON.stringify()会使用这个方法的返回值作为参数，而忽略原对象的其他属性。")]),t._v(" "),s("blockquote",[s("p",[t._v("Date对象就有一个自己的toJSON()方法")])]),t._v(" "),s("p",[t._v("toJSON()方法的一个应用是，将正则对象自动转为字符串。")]),t._v(" "),s("p",[t._v("JSON.stringify()再处理字符串")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[s("strong",[t._v("如果对象的属性是undefined、函数或 XML 对象，该属性会被JSON.stringify()过滤。")])]),t._v(" "),s("p",[s("strong",[t._v("如果数组的成员是undefined、函数或 XML 对象，则这些值被转成null")])]),t._v(" "),s("p",[s("strong",[t._v("正则对象会被转成空对象。")])]),t._v(" "),s("p",[s("strong",[t._v("JSON.stringify()方法会忽略对象的不可遍历的属性。")])])]),t._v(" "),s("h3",{attrs:{id:"json-parse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json-parse"}},[t._v("#")]),t._v(" JSON.parse()")]),t._v(" "),s("p",[t._v("JSON.parse()方法用于将 JSON 字符串转换成对应的值")]),t._v(" "),s("p",[t._v("如果传入的字符串不是有效的 JSON 格式，JSON.parse()方法将报错。")]),t._v(" "),s("p",[t._v("JSON.parse()方法可以接受一个处理函数，作为第二个参数，用法与JSON.stringify()方法类似。")])])}),[],!1,null,null,null);a.default=e.exports}}]);