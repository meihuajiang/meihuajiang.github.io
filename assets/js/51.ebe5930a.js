(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{310:function(t,s,a){"use strict";a.r(s);var n=a(9),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[t._v("本质上，数组属于一种特殊的对象。typeof运算符会返回数组的类型是object")]),t._v(" "),a("h3",{attrs:{id:"生成新数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成新数组"}},[t._v("#")]),t._v(" 生成新数组")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用字面量")])]),t._v(" "),a("li",[a("p",[t._v("new Array() (不推荐使用)")]),t._v(" "),a("p",[t._v("参数不同时，行为不一致")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数时，返回一个空数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单个正整数参数，表示返回的新数组的长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ empty ]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ empty x 2 ]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非正整数的数值作为参数，会报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RangeError: Invalid array length")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RangeError: Invalid array length")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单个非数值（比如字符串、布尔值、对象等）作为参数，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 则该参数是返回的新数组的成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['abc']")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [Array[1]]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多参数时，所有参数都是返回的新数组的成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['a', 'b', 'c']")]),t._v("\n\n")])])]),a("p",[t._v("如果参数是一个正整数，返回数组的成员都是空位。")]),t._v(" "),a("p",[t._v("虽然读取的时候返回undefined，但实际上该位置没有任何值。")]),t._v(" "),a("p",[t._v("虽然这时可以读取到length属性，但是取不到键名。")]),t._v(" "),a("p",[t._v("数组允许同时存在多种类型")])])]),t._v(" "),a("h3",{attrs:{id:"创建二维数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建二维数组"}},[t._v("#")]),t._v(" 创建二维数组⭐️")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"键名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#键名"}},[t._v("#")]),t._v(" 键名")]),t._v(" "),a("p",[t._v("数组的键名是按次序排列的一组整数（0，1，2...）。")]),t._v(" "),a("p",[t._v("数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。")]),t._v(" "),a("h4",{attrs:{id:"in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in"}},[t._v("#")]),t._v(" in")]),t._v(" "),a("p",[t._v("检查某个键名是否存在的运算符in，也适用于数组。")]),t._v(" "),a("p",[a("strong",[t._v("注意，如果数组的某个位置是空位，in运算符返回false")])]),t._v(" "),a("h3",{attrs:{id:"length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[t._v("#")]),t._v(" length")]),t._v(" "),a("p",[a("strong",[t._v("数组的数字键不需要连续，length属性的值总是比最大的那个整数键大1")])]),t._v(" "),a("p",[t._v("length属性是可写的。")]),t._v(" "),a("p",[t._v("如果人为设置一个小于当前成员个数的值，该数组的成员数量会自动减少到length设置的值。")]),t._v(" "),a("p",[t._v("如果人为设置length大于当前元素个数，则数组的成员数量会增加到这个值，"),a("strong",[t._v("新增的位置都是空位（undefined）")])]),t._v(" "),a("p",[t._v("如果数组的键名是添加超出范围的数值，该键名会自动转为字符串。"),a("strong",[t._v("且不会改变length")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ <5 empty items>, '-1': 1 ], 键名自动转为字符串")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5，长度没有发生任何改变")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("用法")]),t._v(" "),a("p",[t._v("清空数组的一个有效方法，就是将length属性设为0。")])]),t._v(" "),a("h3",{attrs:{id:"空位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空位"}},[t._v("#")]),t._v(" 空位")]),t._v(" "),a("p",[t._v("当数组的某个位置是空元素，即两个逗号之间没有任何值，则称该数组存在空位（hole）。")]),t._v(" "),a("p",[a("strong",[t._v("数组的空位不影响length属性。（仍被计算在内）")])]),t._v(" "),a("p",[a("strong",[t._v("如果最后一个元素后面有逗号，并不会产生空位。也就是说，有没有这个逗号，结果都是一样的。")])]),t._v(" "),a("blockquote",[a("p",[t._v("使用delete命令删除一个数组成员，会形成空位，并且不会影响length属性")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("数组的某个位置是空位，与某个位置是undefined，是不一样的。")]),t._v(" "),a("p",[t._v("如果是空位，使用数组的"),a("strong",[t._v("forEach方法、map方法、for...in结构、以及Object.keys方法进行遍历，空位都会被跳过")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("join方法会将空位处理成空字符串（undefined、null也是）")])])]),t._v(" "),a("h2",{attrs:{id:"数组方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组方法"}},[t._v("#")]),t._v(" 数组方法")]),t._v(" "),a("h3",{attrs:{id:"array-isarray"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-isarray"}},[t._v("#")]),t._v(" Array.isArray()")]),t._v(" "),a("p",[t._v("Array.isArray方法返回一个布尔值，表示参数是否为数组。它可以弥补typeof运算符的不足。")]),t._v(" "),a("h3",{attrs:{id:"valueof-，tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valueof-，tostring"}},[t._v("#")]),t._v(" valueOf()，toString()")]),t._v(" "),a("p",[t._v("数组的valueOf方法返回数组本身。")]),t._v(" "),a("p",[t._v("数组的toString方法返回数组的字符串形式。")]),t._v(" "),a("h3",{attrs:{id:"push-，pop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-，pop"}},[t._v("#")]),t._v(" push()，pop()")]),t._v(" "),a("p",[t._v("push方法用于在数组的末端添加一个或多个元素，"),a("strong",[t._v("并返回添加新元素后的数组长度")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("注意，该方法会改变原数组")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3，返回添加新元素后的数组的长度")]),t._v("\n")])])]),a("p",[t._v("pop方法用于删除数组的最后一个元素，"),a("strong",[t._v("并返回该元素")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("对空数组使用pop方法，不会报错，而是返回undefined。")])]),t._v(" "),a("p",[a("strong",[t._v("注意，该方法会改变原数组。")])]),t._v(" "),a("h3",{attrs:{id:"shift-，unshift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shift-，unshift"}},[t._v("#")]),t._v(" shift()，unshift()")]),t._v(" "),a("p",[t._v("shift()方法用于删除数组的第一个元素，"),a("strong",[t._v("并返回该元素")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("注意，该方法会改变原数组。")])]),t._v(" "),a("p",[t._v("unshift()方法用于在数组的第一个位置添加一个或多个元素，"),a("strong",[t._v("并返回添加新元素后的数组长度。")])]),t._v(" "),a("p",[a("strong",[t._v("注意，该方法会改变原数组。")])]),t._v(" "),a("h3",{attrs:{id:"join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" join()")]),t._v(" "),a("p",[t._v("join()方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。")]),t._v(" "),a("p",[t._v("如果不提供参数，默认用逗号分隔。")]),t._v(" "),a("p",[a("strong",[t._v("如果数组成员是undefined或null或空位，会被转成空字符串。")])]),t._v(" "),a("p",[t._v("通过call方法，这个方法也可以用于字符串或类似数组的对象。")]),t._v(" "),a("p",[a("code",[t._v("Array.prototype.join.call('hello', '-') // \"h-e-l-l-o\"")])]),t._v(" "),a("p",[t._v("如果只有一个成员，则返回其字符串形式，没有连接")]),t._v(" "),a("h3",{attrs:{id:"concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[t._v("#")]),t._v(" concat()")]),t._v(" "),a("p",[t._v("concat方法用于多个数组的合并。")]),t._v(" "),a("p",[t._v("它将新数组的成员，添加到原数组成员的后部，然后"),a("strong",[t._v("返回一个新数组，原数组不变。")])]),t._v(" "),a("p",[t._v("如果数组成员包括对象，concat方法返回当前数组的一个"),a("strong",[t._v("浅拷贝")])]),t._v(" "),a("h3",{attrs:{id:"reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[t._v("#")]),t._v(" reverse()")]),t._v(" "),a("p",[t._v("reverse方法用于颠倒排列数组元素，返回改变后的数组。")]),t._v(" "),a("p",[a("strong",[t._v("注意，该方法将改变原数组。")])]),t._v(" "),a("h3",{attrs:{id:"slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[t._v("#")]),t._v(" slice()")]),t._v(" "),a("p",[t._v("slice()方法用于提取目标数组的一部分，"),a("strong",[t._v("返回一个新数组，原数组不变。")])]),t._v(" "),a("p",[a("code",[t._v("arr.slice(start, end);")])]),t._v(" "),a("p",[t._v("它的第一个参数为起始位置（从0开始，会包括在返回的新数组之中）")]),t._v(" "),a("p",[t._v("第二个参数为终止位置（但该位置的元素本身不包括在内）。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果省略第二个参数，则一直返回到原数组的最后一个成员。")])]),t._v(" "),a("p",[a("strong",[t._v("如果slice()方法的参数是负数，则表示倒数计算的位置。")])]),t._v(" "),a("p",[a("strong",[t._v("如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("重要应用")]),t._v(" "),a("p",[t._v("将类似数组的对象转为真正的数组。")]),t._v(" "),a("p",[a("code",[t._v("Array.prototype.slice.call()")])])]),t._v(" "),a("h3",{attrs:{id:"splice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splice"}},[t._v("#")]),t._v(" splice()")]),t._v(" "),a("p",[t._v("splice()方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，"),a("strong",[t._v("返回值是被删除的元素")])]),t._v(" "),a("p",[a("strong",[t._v("注意，该方法会改变原数组。")])]),t._v(" "),a("p",[a("code",[t._v("arr.splice(start, count, addElement1, addElement2, ...);")])]),t._v(" "),a("p",[t._v("splice的第一个参数是删除的起始位置（从0开始），")]),t._v(" "),a("blockquote",[a("p",[t._v("起始位置如果是负数，就表示从倒数位置开始删除")])]),t._v(" "),a("p",[t._v("第二个参数是被删除的元素个数。")]),t._v(" "),a("p",[t._v("如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。")]),t._v(" "),a("h3",{attrs:{id:"sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[t._v("#")]),t._v(" sort()")]),t._v(" "),a("p",[t._v("sort方法对数组成员进行排序，默认转为字符串后，按照字典顺序排序。排序后，原数组将被改变。")]),t._v(" "),a("h4",{attrs:{id:"函数传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数传参"}},[t._v("#")]),t._v(" 函数传参")]),t._v(" "),a("p",[t._v("如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数。")]),t._v(" "),a("h3",{attrs:{id:"内部使用的数值排序方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部使用的数值排序方法"}},[t._v("#")]),t._v(" 内部使用的数值排序方法")]),t._v(" "),a("p",[t._v("基础是一个Quicksort（快速排序），对于较短的数组（长度<10）则降级为插入排序（Insertion Sort）")]),t._v(" "),a("p",[t._v("当Quicksort在分治的处理中递归出长度小于10的子数组时，也使用插入排序处理。因为插入排序对于较短的数组更高效。这是因为Quicksort在分区后，需要递归调用两次。每个这样的递归调用都有创建（和丢弃）栈帧的开销")]),t._v(" "),a("p",[t._v("选择合适的轴元素（pivot）对Quicksort的性能有着很大的影响。V8采用了两条策略：")]),t._v(" "),a("ul",[a("li",[t._v("找到数组中的第一个，最后一个和“第三个”元素，然后选择这三个元素的中间值作为pivot。对于较短数组，“第三个”的的元素就是中间 元素。")]),t._v(" "),a("li",[t._v("对于较长的数组，就从中抽出一个小数组进行排序，并将排序后中位数作为上述计算中的“第三个”元素。")])]),t._v(" "),a("p",[t._v("Quicksort的优点之一是：它是就地排序，不需要太多的内存开销。")]),t._v(" "),a("blockquote",[a("p",[t._v("只有在处理大型数组时，需要为选择的样本数组分配内存，以及log（n）栈空间。")])]),t._v(" "),a("p",[t._v("它的缺点是：它不是稳定的排序算法，并且在最坏情况下，时间复杂度会降级到O（n ^ 2）。")]),t._v(" "),a("p",[a("strong",[t._v("Timsort从V8 v7.0和Chrome 70开始生效")])]),t._v(" "),a("blockquote",[a("p",[t._v("可以被认为是自适应的稳定的归并排序（Mergesort）的变种。")])]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map()")]),t._v(" "),a("p",[t._v("map方法将数组的所有成员依次传入参数函数，然后"),a("strong",[t._v("把每一次的执行结果组成一个新数组返回,原数组没有变化。")])]),t._v(" "),a("p",[t._v("map方法接受一个函数作为参数。")]),t._v(" "),a("p",[t._v("该函数调用时，map方法向它传入三个参数："),a("strong",[t._v("当前成员、当前位置和数组本身")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("map方法还可以接受第二个参数，用来绑定回调函数内部的this变量")])]),t._v(" "),a("p",[a("strong",[t._v("如果数组有空位，map方法的回调函数在这个位置不会执行，会跳过数组的空位。（新数组仍保留空位）")])]),t._v(" "),a("h3",{attrs:{id:"foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[t._v("#")]),t._v(" forEach()")]),t._v(" "),a("p",[t._v("对数组的所有成员依次执行参数函数。")]),t._v(" "),a("p",[a("strong",[t._v("forEach方法不返回值，只用来操作数据。")])]),t._v(" "),a("p",[t._v("forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。")]),t._v(" "),a("p",[t._v("forEach方法也可以接受第二个参数，绑定参数函数的this变量。")]),t._v(" "),a("p",[a("strong",[t._v("forEach方法也会跳过数组的空位。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("forEach方法无法中断执行，总是会将所有成员遍历完。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果希望符合某种条件时，就中断遍历，要使用for循环。")])]),t._v(" "),a("p",[t._v("无法中途跳出forEach循环，break命令或return命令都不能奏效。")])]),t._v(" "),a("h3",{attrs:{id:"filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[t._v("#")]),t._v(" filter()")]),t._v(" "),a("p",[t._v("filter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。")]),t._v(" "),a("p",[a("strong",[t._v("它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。")])]),t._v(" "),a("p",[t._v("filter方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。")]),t._v(" "),a("p",[t._v("filter方法还可以接受第二个参数，用来绑定参数函数内部的this变量。")]),t._v(" "),a("p",[t._v("该方法不会改变原数组。")]),t._v(" "),a("h3",{attrs:{id:"some-，every"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#some-，every"}},[t._v("#")]),t._v(" some()，every()")]),t._v(" "),a("p",[t._v("它们接受一个函数作为参数，所有数组成员依次执行该函数。")]),t._v(" "),a("blockquote",[a("p",[t._v("该函数接受三个参数：当前成员、当前位置和整个数组，")])]),t._v(" "),a("p",[t._v("然后返回一个布尔值。")]),t._v(" "),a("p",[t._v("some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。")]),t._v(" "),a("p",[t._v("every方法是所有成员的返回值都是true，整个every方法才返回true，否则返回false。")]),t._v(" "),a("p",[a("strong",[t._v("对于空数组，some方法返回false，every方法返回true，回调函数都不会执行。")])]),t._v(" "),a("h3",{attrs:{id:"reduce-，reduceright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce-，reduceright"}},[t._v("#")]),t._v(" reduce()，reduceRight()")]),t._v(" "),a("p",[t._v("reduce方法和reduceRight方法依次处理数组的每个成员，"),a("strong",[t._v("最终累计为一个值。")])]),t._v(" "),a("p",[t._v("reduce为数组中的每一个元素依次执行callback函数，不包括数组中被删除或从未被赋值的元素")]),t._v(" "),a("p",[t._v("它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员）")]),t._v(" "),a("p",[t._v("reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样。")]),t._v(" "),a("p",[t._v("reduce方法和reduceRight方法的第一个参数都是一个函数。")]),t._v(" "),a("p",[t._v("该函数接受以下四个参数。")]),t._v(" "),a("ol",[a("li",[t._v("累积值，默认为数组的第一个成员")]),t._v(" "),a("li",[t._v("当前处理值，默认为数组的第二个成员")]),t._v(" "),a("li",[t._v("当前位置（从0开始）")]),t._v(" "),a("li",[t._v("原数组")])]),t._v(" "),a("blockquote",[a("p",[t._v("这四个参数之中，只有前两个是必须的，后两个则是可选的。")])]),t._v(" "),a("p",[t._v("如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数。")]),t._v(" "),a("blockquote",[a("p",[t._v("第二个参数相当于设定了默认值，处理空数组时尤其有用。")])]),t._v(" "),a("h3",{attrs:{id:"indexof-，lastindexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexof-，lastindexof"}},[t._v("#")]),t._v(" indexOf()，lastIndexOf()")]),t._v(" "),a("p",[t._v("indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。")]),t._v(" "),a("p",[t._v("indexOf方法还可以接受第二个参数，表示搜索的开始位置。")]),t._v(" "),a("p",[t._v("lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("注意，"),a("strong",[t._v("这两个方法不能用来搜索NaN的位置，即它们无法确定数组成员是否包含NaN。")])]),t._v(" "),a("p",[t._v("这是因为这两个方法内部，使用严格相等运算符（===）进行比较，而NaN是唯一一个不等于自身的值。")])]),t._v(" "),a("h3",{attrs:{id:"数组的es6方法，为什么要设置一个初始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的es6方法，为什么要设置一个初始值"}},[t._v("#")]),t._v(" 数组的ES6方法，为什么要设置一个初始值")]),t._v(" "),a("p",[t._v("比如map，如果没有提供初始值，将会使用数组中的第一个元素。这样的话在没有初始值的空数组上调用 reduce 将报错。")]),t._v(" "),a("h2",{attrs:{id:"改变原数组的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变原数组的方法"}},[t._v("#")]),t._v(" 改变原数组的方法")]),t._v(" "),a("ul",[a("li",[t._v("push")]),t._v(" "),a("li",[t._v("pop")]),t._v(" "),a("li",[t._v("shift")]),t._v(" "),a("li",[t._v("unshift")]),t._v(" "),a("li",[t._v("reverse")]),t._v(" "),a("li",[t._v("splice")]),t._v(" "),a("li",[t._v("sort")]),t._v(" "),a("li",[t._v("copyWithin")])]),t._v(" "),a("h2",{attrs:{id:"可以绑定函数内部this的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可以绑定函数内部this的方法"}},[t._v("#")]),t._v(" 可以绑定函数内部this的方法")]),t._v(" "),a("ul",[a("li",[t._v("map")]),t._v(" "),a("li",[t._v("forEach")]),t._v(" "),a("li",[t._v("filter")]),t._v(" "),a("li",[t._v("some")]),t._v(" "),a("li",[t._v("every")]),t._v(" "),a("li",[t._v("Array.from")]),t._v(" "),a("li",[t._v("flatMap")]),t._v(" "),a("li",[t._v("find")]),t._v(" "),a("li",[t._v("findIndex")])]),t._v(" "),a("h2",{attrs:{id:"indexof的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexof的原理"}},[t._v("#")]),t._v(" indexOf的原理")]),t._v(" "),a("p",[t._v("内部使用严格相等运算符（===）进行比较")]),t._v(" "),a("p",[t._v("又因为NaN是唯一一个不等于自身的值，所以无法判断NaN")]),t._v(" "),a("h2",{attrs:{id:"可以判断出nan的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可以判断出nan的"}},[t._v("#")]),t._v(" 可以判断出NaN的⭐️")]),t._v(" "),a("ul",[a("li",[t._v("find()")]),t._v(" "),a("li",[t._v("findIndex()")]),t._v(" "),a("li",[t._v("includes()")]),t._v(" "),a("li",[t._v("isNaN()（非数值会先转换为数值再进行判断）")]),t._v(" "),a("li",[t._v("Number.isNaN()（直接进行判断，不转换）")]),t._v(" "),a("li",[t._v("Object.is()（NaN会等于自身）")]),t._v(" "),a("li",[t._v("向 Set 加入值时认为NaN等于自身")]),t._v(" "),a("li",[t._v("Map会将NaN看成是一个键")])]),t._v(" "),a("h2",{attrs:{id:"foreach-怎么跳出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach-怎么跳出"}},[t._v("#")]),t._v(" forEach()怎么跳出⭐️")]),t._v(" "),a("p",[t._v("try，catch")]),t._v(" "),a("p",[t._v("break 和 return 无法跳出")]),t._v(" "),a("h2",{attrs:{id:"foreach-与-map-的区别，是否修改原数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach-与-map-的区别，是否修改原数组"}},[t._v("#")]),t._v(" forEach 与 map 的区别，是否修改原数组")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("返回值")]),t._v(" "),a("p",[t._v("map方法将数组的所有成员依次传入参数函数，然后"),a("strong",[t._v("把每一次的执行结果组成一个新数组返回,原数组没有变化。")])]),t._v(" "),a("p",[a("strong",[t._v("forEach方法不返回值，只用来操作数据。")])])]),t._v(" "),a("li",[a("p",[t._v("参数")]),t._v(" "),a("p",[t._v("forEach的用法与map方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。")]),t._v(" "),a("p",[t._v("都可以接受第二个参数，用来绑定回调函数内部的this变量")])]),t._v(" "),a("li",[a("p",[t._v("空位")]),t._v(" "),a("p",[a("strong",[t._v("如果数组有空位，map方法的回调函数在这个位置不会执行，会跳过数组的空位。（新数组仍保留空位）")])]),t._v(" "),a("p",[a("strong",[t._v("forEach方法也会跳过数组的空位。")])])])]),t._v(" "),a("h2",{attrs:{id:"array-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[t._v("#")]),t._v(" Array.from")]),t._v(" "),a("p",[t._v("Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）")]),t._v(" "),a("h2",{attrs:{id:"数组的join方法，不传参数是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的join方法，不传参数是什么"}},[t._v("#")]),t._v(" 数组的join方法，不传参数是什么")]),t._v(" "),a("p",[t._v("join()方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。")]),t._v(" "),a("p",[t._v("如果不提供参数，默认用逗号分隔。")]),t._v(" "),a("p",[a("strong",[t._v("如果数组成员是undefined或null或空位，会被转成空字符串。")])]),t._v(" "),a("h2",{attrs:{id:"遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[t._v("#")]),t._v(" 遍历⭐️")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("for循环、")])]),t._v(" "),a("li",[a("p",[t._v("while循环")])]),t._v(" "),a("li",[a("p",[t._v("forEach()")]),t._v(" "),a("p",[t._v("无法中途跳出forEach循环，break命令或return命令都不能奏效。")]),t._v(" "),a("p",[a("strong",[t._v("跳过空位")])])]),t._v(" "),a("li",[a("p",[t._v("for in")]),t._v(" "),a("p",[t._v("for...in循环可以遍历数组的键名")]),t._v(" "),a("p",[t._v("数组的键名是数字，但是for...in循环是以字符串作为键名“0”、“1”、“2”等等。")]),t._v(" "),a("p",[a("strong",[t._v("for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。")])]),t._v(" "),a("blockquote",[a("p",[t._v("但是不包含不可枚举的属性")])]),t._v(" "),a("blockquote",[a("p",[t._v("不推荐这种方式\n"),a("strong",[t._v("for...in循环主要是为遍历对象而设计的，不适用于遍历数组")])])]),t._v(" "),a("p",[a("strong",[t._v("跳过空位")])]),t._v(" "),a("p",[t._v("效率很低")])]),t._v(" "),a("li",[a("p",[t._v("Objects.keys()")]),t._v(" "),a("p",[a("strong",[t._v("跳过空位")])])]),t._v(" "),a("li",[a("p",[t._v("for of")]),t._v(" "),a("p",[t._v("它可以与break、continue 和 return配合使用。")]),t._v(" "),a("p",[t._v("提供了遍历所有数据结构的统一操作接口。")])])]),t._v(" "),a("h2",{attrs:{id:"空位处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空位处理"}},[t._v("#")]),t._v(" 空位处理⭐️")]),t._v(" "),a("p",[t._v("不同方法在处理数组空位时有较大差异")]),t._v(" "),a("h3",{attrs:{id:"跳过空位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳过空位"}},[t._v("#")]),t._v(" 跳过空位⭐️")]),t._v(" "),a("ul",[a("li",[t._v("forEach")]),t._v(" "),a("li",[t._v("map（仍保留空位）")]),t._v(" "),a("li",[t._v("for in")]),t._v(" "),a("li",[t._v("Objects.keys")]),t._v(" "),a("li",[t._v("filter")]),t._v(" "),a("li",[t._v("reduce")]),t._v(" "),a("li",[t._v("every")]),t._v(" "),a("li",[t._v("some")]),t._v(" "),a("li",[t._v("flat")])]),t._v(" "),a("h3",{attrs:{id:"处理空位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理空位"}},[t._v("#")]),t._v(" 处理空位⭐️")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Array.from")]),t._v("（转为undefined）")]),t._v(" "),a("li",[t._v("扩展运算符（"),a("code",[t._v("...")]),t._v("）也会将空位转为undefined。")]),t._v(" "),a("li",[a("code",[t._v("in")]),t._v("运算符（返回false）")]),t._v(" "),a("li",[a("code",[t._v("copyWithin()")]),t._v(" 会连空位一起拷贝")]),t._v(" "),a("li",[a("code",[t._v("fill()")]),t._v("会将空位视为正常的数组位置。")]),t._v(" "),a("li",[a("code",[t._v("for...of")]),t._v("循环也会遍历空位。")]),t._v(" "),a("li",[a("code",[t._v("join")]),t._v("（视为undefined，返回空字符串）")]),t._v(" "),a("li",[a("code",[t._v("toString")]),t._v("（视为undefined）")]),t._v(" "),a("li",[a("code",[t._v("entries()")]),t._v("、"),a("code",[t._v("keys()")]),t._v("、"),a("code",[t._v("values()")]),t._v("会将空位处理成undefined。")]),t._v(" "),a("li",[a("code",[t._v("find()")]),t._v("和"),a("code",[t._v("findIndex()")]),t._v("会将空位处理成undefined。")])]),t._v(" "),a("h2",{attrs:{id:"sort方法，返回类型可以返回布尔值吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sort方法，返回类型可以返回布尔值吗"}},[t._v("#")]),t._v(" sort方法，返回类型可以返回布尔值吗")]),t._v(" "),a("p",[t._v("sort方法的返回值是排序后的数组")]),t._v(" "),a("h2",{attrs:{id:"reduce方法，及参数还可以是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reduce方法，及参数还可以是什么"}},[t._v("#")]),t._v(" reduce方法，及参数还可以是什么")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("accumulator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initialValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("reduce为数组中的每一个元素依次执行callback函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：")]),t._v(" "),a("ul",[a("li",[t._v("accumulator 累计器")]),t._v(" "),a("li",[t._v("currentValue 当前值")]),t._v(" "),a("li",[t._v("currentIndex 当前索引")]),t._v(" "),a("li",[t._v("array 数组")])]),t._v(" "),a("h2",{attrs:{id:"_1-2-3-map-parseint-what-why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-map-parseint-what-why"}},[t._v("#")]),t._v(" ['1', '2', '3'].map(parseInt) what & why")]),t._v(" "),a("p",[t._v("[1, NaN, NaN]。")]),t._v(" "),a("p",[t._v("对于每个迭代map, parseInt()传递两个参数: 字符串和基数。")]),t._v(" "),a("p",[t._v("所以实际执行的的代码是：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("即返回的值分别为：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1，0、undefined、null直接被忽略，这种情况下1用10进制，如果0x开头用16进制")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN, 3 不是二进制")]),t._v("\n")])])]),a("p",[t._v("真正转为数字的做法:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [10, 10, 10, 10, 10]")]),t._v("\n")])])]),a("h3",{attrs:{id:"怎么做到更改一个数组的副本，不影响原数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么做到更改一个数组的副本，不影响原数组"}},[t._v("#")]),t._v(" 怎么做到更改一个数组的副本，不影响原数组")]),t._v(" "),a("p",[t._v("Array.prototyep.silce 返回一个新数组，原数组不变")]),t._v(" "),a("p",[t._v("splice 可以修改到原数组")]),t._v(" "),a("h2",{attrs:{id:"获取数组第一个元素和最后一个元素时间不一样吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取数组第一个元素和最后一个元素时间不一样吗？"}},[t._v("#")]),t._v(" 获取数组第一个元素和最后一个元素时间不一样吗？❓")]),t._v(" "),a("p",[t._v("v8 的数组实现有两种方式，分别是Fast Elements（线性） 和 Dictionary Elements（哈希表）")]),t._v(" "),a("p",[t._v("‘快数组’是一种线性的存储方式。新创建的空数组，默认的存储方式是快数组，快数组长度是可变的，可以根据元素的增加和删除来动态调整存储空间大小，内部是通过扩容和收缩机制实现")]),t._v(" "),a("p",[t._v("在 Fast Elements 模式中有一个扩展，是Fast Holey Elements模式。适合于数组中的 holes （空洞）情况，即只有某些索引存有数据，而其他的索引都没有赋值的情况。")]),t._v(" "),a("p",[t._v("‘慢数组’是一种字典的内存形式。不用开辟大块连续的存储空间，节省了内存，但是由于需要维护这样一个 HashTable，其效率会比快数组低。")]),t._v(" "),a("p",[t._v("两种方式转换机制（简单归结）：")]),t._v(" "),a("ul",[a("li",[t._v("快->慢 holys 的数量大于1024")]),t._v(" "),a("li",[t._v("慢->快 慢数组不再比快数组节省 50% 的空间（填补空洞）")])]),t._v(" "),a("h3",{attrs:{id:"数组数组效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组数组效率"}},[t._v("#")]),t._v(" 数组数组效率")]),t._v(" "),a("ul",[a("li",[t._v("pop()，push()等在数组尾部操作的方法的时间复杂度为O(1)")]),t._v(" "),a("li",[t._v("forEach()、map()、shift()、unshift()、等需要遍历或者在数组头部操作的方法的时间复杂度为O(n)")]),t._v(" "),a("li",[t._v("splice()、concat()、find()等方法的时间时间复杂度为O(n)，但最优情况可能为O(1)，如splice()在数组尾部操作、find()第一个元素就符合条件。")])]),t._v(" "),a("h2",{attrs:{id:"_1-2-3-3会输出什么以及为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-3会输出什么以及为什么"}},[t._v("#")]),t._v(" [1,2,3] + 3会输出什么以及为什么")]),t._v(" "),a("p",[t._v('输出："1,2,33"')]),t._v(" "),a("p",[t._v("数组会被转换成字符串，[1,2,3].toString()，变成'1,2,3'+3 -> '1,2,33'")]),t._v(" "),a("blockquote",[a("p",[t._v("数组的valueOf返回数组自身")])]),t._v(" "),a("h2",{attrs:{id:"数组转其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组转其他"}},[t._v("#")]),t._v(" 数组转其他")]),t._v(" "),a("ul",[a("li",[t._v("Object.fromEntries()方法是Object.entries()的逆操作，用于将一个键值对数组转为对象。")]),t._v(" "),a("li",[t._v("将数组传入 Map 构造函数，就可以转为 Map。")]),t._v(" "),a("li",[t._v("扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。")])]),t._v(" "),a("h2",{attrs:{id:"其他转数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他转数组"}},[t._v("#")]),t._v(" 其他转数组")]),t._v(" "),a("ul",[a("li",[t._v("Array.from()（set、map、具有length的类似数组的对象）")]),t._v(" "),a("li",[t._v("拓展运算符（...）（set、map、具有Iterator接口的对象）")]),t._v(" "),a("li",[t._v("Array.prototype.slice.call()")]),t._v(" "),a("li",[t._v("Array.of方法用于将一组值，转换为数组。")])]),t._v(" "),a("h2",{attrs:{id:"判断数组的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组的方法"}},[t._v("#")]),t._v(" 判断数组的方法")]),t._v(" "),a("ul",[a("li",[t._v("Array.isArray()")]),t._v(" "),a("li",[t._v("Object.prototype.toString.call()")]),t._v(" "),a("li",[t._v("instanceof")])]),t._v(" "),a("h2",{attrs:{id:"instanceof用来判断数组会不会严谨"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof用来判断数组会不会严谨"}},[t._v("#")]),t._v(" instanceof用来判断数组会不会严谨")]),t._v(" "),a("p",[t._v("对象的原型可以随意修改，所以这种判断并不准确。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.setPrototypeOf(obj, Array.prototype)")]),t._v("\nobj "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("注意，[] instanceof Object 也会返回true")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("PS")]),t._v(" "),a("p",[t._v("instanceof运算符可以判断一个值是否为非null的对象。**")]),t._v(" "),a("p",[a("strong",[t._v("instanceof的原理是检查右边构造函数的prototype属性，是否在左边对象的原型链上。")])]),t._v(" "),a("p",[a("strong",[t._v("有一种特殊情况，就是左边对象的原型链上，只有null对象。这时，instanceof判断会失真。")])]),t._v(" "),a("blockquote",[a("p",[t._v("不适用于原始类型的值")])])]),t._v(" "),a("h2",{attrs:{id:"object-prototype-tostring-call-判断类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call-判断类型"}},[t._v("#")]),t._v(" Object.prototype.toString.call()判断类型")]),t._v(" "),a("p",[a("strong",[t._v("Object.prototype.toString.call()不能校验自定义类型")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Object]"')]),t._v("\n")])])]),a("p",[t._v("对象的"),a("code",[t._v("Symbol.toStringTag")]),t._v("属性，指向一个方法。")]),t._v(" "),a("p",[t._v("在该对象上面调用"),a("code",[t._v("Object.prototype.toString")]),t._v("方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型。")]),t._v(" "),a("p",[t._v("所以"),a("code",[t._v("Symbol.toStringTag")]),t._v("属性被修改时也可能导致错误结果")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fakearray"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fakestring"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfakearray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfakearray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toStringTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Array'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fakearray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fakearray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Array]"')]),t._v("\nfakearray "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" realarray"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nrealarray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toStringTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Function'")]),t._v("\nrealarray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realarray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realarray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Function]"')]),t._v("\nrealarray "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[a("strong",[t._v("但是这时Array.isArray()还是能正常判断，没有问题（推荐使用）")])]),t._v(" "),a("h2",{attrs:{id:"array-isarray-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-isarray-2"}},[t._v("#")]),t._v(" Array.isArray❓")]),t._v(" "),a("p",[t._v("实现原理")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/ECMA-isArray",alt:"isArray",title:"isArray"}})]),t._v(" "),a("h2",{attrs:{id:"判断数组是否为空"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组是否为空"}},[t._v("#")]),t._v(" 判断数组是否为空⭐️")]),t._v(" "),a("p",[t._v("判断 length 是否为 0")]),t._v(" "),a("h2",{attrs:{id:"合并数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并数组"}},[t._v("#")]),t._v(" 合并数组")]),t._v(" "),a("ul",[a("li",[t._v("concat")]),t._v(" "),a("li",[t._v("for循环")]),t._v(" "),a("li",[t._v("[...arr, ...arr2]（扩展运算符）")])]),t._v(" "),a("h2",{attrs:{id:"数字元素越界会怎么样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字元素越界会怎么样"}},[t._v("#")]),t._v(" 数字元素越界会怎么样")]),t._v(" "),a("p",[t._v("会对第一个越界的元素进行覆盖。")]),t._v(" "),a("p",[t._v("在Array.prototype.push方法执行时,会先把每个要push的元素push进去,然后才设置数组的length属性为最大的索引值+1,越界的话就是Math.pow(2, 32) + 1,这时才会报错,但上面的元素已经push进去了.")]),t._v(" "),a("p",[t._v("如果再次push的话,还会从当前的length属性-1的那个索引处开始push,也就出现了覆盖而不是继续追加的情况")]),t._v(" "),a("h2",{attrs:{id:"数组倒序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组倒序"}},[t._v("#")]),t._v(" 数组倒序")]),t._v(" "),a("ul",[a("li",[t._v("reverse")]),t._v(" "),a("li",[t._v("for循环，前后交换")])]),t._v(" "),a("h2",{attrs:{id:"实现数组的push方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现数组的push方法"}},[t._v("#")]),t._v(" 实现数组的push方法")]),t._v(" "),a("p",[t._v("push方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("splice")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splicePush")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个参数为起始位置，第二个参数为0表示不删除元素，第三个是要添加的元素")]),t._v("\n\tarr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])]),t._v(" "),a("li",[a("p",[t._v("length属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lengthPush")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tarr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"实现slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现slice"}},[t._v("#")]),t._v(" 实现slice⭐️")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mySlice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mySlice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newAry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*确定起始的位置\n\tif(start===undefined){\n\t\tstart = 0;\n\t}\n\telse{\n\t\tif(isNaN(start)){\n\t\t\tstart = 0;\n\t\t}\n\t\telse{\n\t\t\tif(start >= 0){\n\t\t\t\t//在length内，向下取整\n\t\t\t\tif(start < this.length){\n\t\t\t\t\tstart = Math.floor(Number(start));\n\t\t\t\t}\n\t\t\t\telse{//超出了length，重置为length\n\t\t\t\t\tstart = this.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//处理负数的情况，一般加上length\n\t\t\telse{\n\t\t\t\t//加上length仍然为负数\n\t\t\t\tif(start < -this.legnth){\n\t\t\t\t\tstart = 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t//通常的倒数情况\n\t\t\t\t\tif(start <= -1){\n\t\t\t\t\t\tstart = this.length + Math.ceil(Number(start));\n\t\t\t\t\t}\n\t\t\t\t\t//处理为0\n\t\t\t\t\telse{\n\t\t\t\t\t\tstart = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t*/")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*确定结束的位置\n\tif(end === undefined){\n\t\tend = this.length;\n\t}\n\telse{\n\t\t//如果为NaN则设置为0；\n\t\tif(isNaN(end)){\n\t\t\tend = 0;\n\t\t}\n\t\telse{\n\t\t\tif(end >=0 ){\n\t\t\t\tif(end < this.length){\n\t\t\t\t\tend = Math.floor(Number(end));\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tend = this.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(end < -this.length){\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tend = this.length + Math.ceil(Number(end));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t*/")]),t._v("\n\tn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tnewAry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newAry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回新数组")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newAry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"实现array-find-、array-findindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现array-find-、array-findindex"}},[t._v("#")]),t._v(" 实现Array.find()、Array.findIndex()")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myFind")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myFindIndex")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"实现reduce"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现reduce"}},[t._v("#")]),t._v(" 实现reduce⭐️")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myReduce")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initialValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" initialValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" initialValue\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" startPoint "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" initialValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" startPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" base\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myReduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" currentValue\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"使用数组reduce实现map方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用数组reduce实现map方法"}},[t._v("#")]),t._v(" 使用数组reduce实现map方法⭐️")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写法一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mapUsingReduce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapUsingReduce")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("mappedArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      mappedArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thisArg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" mappedArray\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapUsingReduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" currentValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [5, 7, , 10]")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写法二")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reduceMap")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("mappedArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cur")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        mappedArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" mappedArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);