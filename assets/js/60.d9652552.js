(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{319:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"object-is"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-is"}},[t._v("#")]),t._v(" Object.is()⭐️")]),t._v(" "),a("p",[t._v("ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。")]),t._v(" "),a("p",[t._v("它们都有缺点，前者会自动转换数据类型，后者的 NaN 不等于自身，以及 +0 等于 -0。")]),t._v(" "),a("p",[t._v("JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。")]),t._v(" "),a("p",[t._v("ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。")]),t._v(" "),a("p",[a("strong",[t._v("Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。")])]),t._v(" "),a("p",[a("strong",[t._v("不同之处只有两个：一是 +0 不等于 -0，二是 NaN 等于自身。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ES5 可以通过下面的代码，部署Object.is。")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 针对+0 不等于 -0的情况")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 针对NaN的情况")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  configurable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  enumerable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  writable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"object-assign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-assign"}},[t._v("#")]),t._v(" Object.assign()⭐️")]),t._v(" "),a("h3",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),a("p",[t._v("Object.assign()方法用于对象的合并，将源对象（source）"),a("strong",[t._v("自身的")]),t._v("的所有"),a("strong",[t._v("可枚举")]),t._v("属性，复制到目标对象（target）。")]),t._v(" "),a("p",[t._v("Object.assign()方法的第一个参数是目标对象，后面的参数都是源对象。")]),t._v(" "),a("p",[t._v("注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。")]),t._v(" "),a("p",[t._v("如果只有一个参数，Object.assign()会直接返回该参数。")]),t._v(" "),a("p",[t._v("如果该参数不是对象，则会先转成对象，然后返回。")]),t._v(" "),a("p",[a("strong",[t._v("由于undefined和null无法转成对象，所以如果它们作为首参数，就会报错。")])]),t._v(" "),a("p",[t._v("如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。")]),t._v(" "),a("p",[t._v("首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。")]),t._v(" "),a("p",[t._v("其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，"),a("strong",[t._v("除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。")])]),t._v(" "),a("p",[a("strong",[t._v("因为只有字符串的包装对象，会产生可枚举属性。")])]),t._v(" "),a("blockquote",[a("p",[t._v("原始值都在包装对象的内部属性 PrimitiveValue上面，这个属性是不会被Object.assign()拷贝的。")])]),t._v(" "),a("p",[a("strong",[t._v("Object.assign()拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。")])]),t._v(" "),a("p",[a("strong",[t._v("属性名为 Symbol 值的属性，也会被Object.assign()拷贝。")])]),t._v(" "),a("p",[t._v("如果添加属性不可避免，要使用Object.assign方法。")]),t._v(" "),a("h3",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途⭐️")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("为对象添加属性")])]),t._v(" "),a("li",[a("p",[t._v("为对象添加方法")])]),t._v(" "),a("li",[a("p",[t._v("克隆对象⭐️")]),t._v(" "),a("p",[t._v("只能克隆原始对象自身的值，不能克隆它继承的值")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保持继承链写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("origin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" originProto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Object.create()方法生成的新对象，动态继承了原型，继承了它的原型对象的构造函数。")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originProto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("合并多个对象")])]),t._v(" "),a("li",[a("p",[t._v("为属性指定默认值")]),t._v(" "),a("p",[t._v("由于存在浅拷贝的问题，指定的默认值，最好都是简单类型，不要指向另一个对象。")]),t._v(" "),a("p",[t._v("否则，可能不起作用或是起到覆盖的作用。")])])]),t._v(" "),a("h3",{attrs:{id:"浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[t._v("#")]),t._v(" 浅拷贝")]),t._v(" "),a("p",[t._v("Object.assign()方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。")]),t._v(" "),a("h3",{attrs:{id:"同名属性的替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同名属性的替换"}},[t._v("#")]),t._v(" 同名属性的替换")]),t._v(" "),a("p",[t._v("对于这种嵌套的对象，一旦遇到同名属性，Object.assign()的处理方法是替换，而不是添加。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: { b: 'hello' } }")]),t._v("\n")])])]),a("h3",{attrs:{id:"数组的处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的处理"}},[t._v("#")]),t._v(" 数组的处理")]),t._v(" "),a("p",[a("strong",[t._v("Object.assign()可以用来处理数组，但是会把数组视为对象。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对饮位置进行覆盖")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [4, 5, 3]")]),t._v("\n")])])]),a("h3",{attrs:{id:"取值函数的处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取值函数的处理"}},[t._v("#")]),t._v(" 取值函数的处理")]),t._v(" "),a("p",[t._v("Object.assign()只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。")]),t._v(" "),a("h2",{attrs:{id:"object-getownpropertydescriptors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptors"}},[t._v("#")]),t._v(" Object.getOwnPropertyDescriptors()")]),t._v(" "),a("p",[t._v("ES5 的Object.getOwnPropertyDescriptor()方法会返回某个对象属性的描述对象（descriptor）。")]),t._v(" "),a("p",[t._v("ES2017 引入了Object.getOwnPropertyDescriptors()方法，返回指定对象**所有自身属性（非继承属性）**的描述对象。")]),t._v(" "),a("p",[t._v("简单实现：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" Reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ownKeys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("该方法的引入目的，主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。")]),t._v(" "),a("p",[t._v("这时，Object.getOwnPropertyDescriptors()方法配合Object.defineProperties()方法，就可以实现正确拷贝。")]),t._v(" "),a("p",[a("strong",[t._v("Object.getOwnPropertyDescriptors()方法的另一个用处，是配合Object.create()方法，将对象属性克隆到一个新对象。这属于浅拷贝。")])]),t._v(" "),a("h2",{attrs:{id:"proto-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto-属性"}},[t._v("#")]),t._v(" __proto__属性⭐️")]),t._v(" "),a("p",[t._v("__proto__属性（前后各两个下划线），用来读取或设置当前对象的原型对象（prototype）")]),t._v(" "),a("p",[t._v("实现上，__proto__调用的是Object.prototype."),a("strong",[t._v("proto")])]),t._v(" "),a("h2",{attrs:{id:"object-setprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-setprototypeof"}},[t._v("#")]),t._v(" Object.setPrototypeOf()⭐️")]),t._v(" "),a("p",[t._v("Object.setPrototypeOf方法的作用与__proto__相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。")]),t._v(" "),a("p",[t._v("它是 ES6 正式推荐的设置原型对象的方法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等同于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" proto")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。")]),t._v(" "),a("p",[t._v("由于undefined和null无法转为对象，所以如果第一个参数是undefined或null，就会报错。")]),t._v(" "),a("h2",{attrs:{id:"object-getprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getprototypeof"}},[t._v("#")]),t._v(" Object.getPrototypeOf()")]),t._v(" "),a("p",[t._v("该方法与Object.setPrototypeOf方法配套，用于读取一个对象的原型对象。")]),t._v(" "),a("p",[t._v("如果参数不是对象，会被自动转为对象。")]),t._v(" "),a("p",[t._v("如果参数是undefined或null，它们无法转为对象，所以会报错。")]),t._v(" "),a("h2",{attrs:{id:"object-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[t._v("#")]),t._v(" Object.keys()")]),t._v(" "),a("p",[t._v("ES5 引入了Object.keys方法，返回一个数组，成员是参数"),a("strong",[t._v("对象自身")]),t._v("的（"),a("strong",[t._v("不含继承")]),t._v("的）所有"),a("strong",[t._v("可遍历")]),t._v("（enumerable）属性的键名。")]),t._v(" "),a("p",[t._v("ES2017 引入了跟Object.keys配套的Object.values和Object.entries，作为遍历一个对象的补充手段，供for...of循环使用。")]),t._v(" "),a("h2",{attrs:{id:"object-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-values"}},[t._v("#")]),t._v(" Object.values()")]),t._v(" "),a("p",[t._v("Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。")]),t._v(" "),a("p",[t._v("Object.create方法的第二个参数添加的对象属性（属性p），如果不显式声明，默认是不可遍历的")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Object.create方法的第二个参数添加的对象属性（属性p），如果不显式声明，默认是不可遍历的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//因为p的属性描述对象的enumerable默认是false，Object.values不会返回这个属性。")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Object.values会过滤属性名为 Symbol 值的属性。")])]),t._v(" "),a("p",[t._v("如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。")]),t._v(" "),a("p",[t._v("如果参数不是对象，Object.values会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。所以，Object.values会返回空数组。")]),t._v(" "),a("h2",{attrs:{id:"object-entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-entries"}},[t._v("#")]),t._v(" Object.entries()⭐️")]),t._v(" "),a("p",[a("strong",[t._v("Object.entries()方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。")])]),t._v(" "),a("p",[t._v("如果原对象的属性名是一个 Symbol 值，该属性会被忽略。")]),t._v(" "),a("p",[t._v("Object.entries的基本用途是遍历对象的属性。")]),t._v(" "),a("p",[a("strong",[t._v("Object.entries方法的另一个用处是，将对象转为真正的Map结构。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" baz"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Map { foo: "bar", baz: 42 }')]),t._v("\n")])])]),a("h2",{attrs:{id:"object-fromentries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-fromentries"}},[t._v("#")]),t._v(" Object.fromEntries()⭐️")]),t._v(" "),a("p",[t._v("Object.fromEntries()方法是Object.entries()的逆操作，用于将一个键值对数组转为对象。")]),t._v(" "),a("p",[a("strong",[t._v("适合将 Map 结构转为对象。")])]),t._v(" "),a("p",[t._v("该方法的一个用处是配合URLSearchParams对象，将查询字符串转为对象。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEntries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URLSearchParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo=bar&baz=qux'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// { foo: "bar", baz: "qux" }')]),t._v("\n")])])]),a("h2",{attrs:{id:"属性的可枚举性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的可枚举性"}},[t._v("#")]),t._v(" 属性的可枚举性⭐️")]),t._v(" "),a("p",[t._v("对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。")]),t._v(" "),a("p",[t._v("Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。")]),t._v(" "),a("p",[t._v("有四个操作会忽略enumerable为false的属性。")]),t._v(" "),a("ul",[a("li",[t._v("for...in循环：只遍历对象自身的和继承的可枚举的属性。")]),t._v(" "),a("li",[t._v("Object.keys()：返回对象自身的所有可枚举的属性的键名。")]),t._v(" "),a("li",[t._v("JSON.stringify()：只串行化对象自身的可枚举的属性。")]),t._v(" "),a("li",[t._v("Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。")])]),t._v(" "),a("p",[a("strong",[t._v("for...in会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性")])]),t._v(" "),a("p",[t._v("ES6 规定，所有 Class 的原型的方法都是不可枚举的")]),t._v(" "),a("h2",{attrs:{id:"属性的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的遍历"}},[t._v("#")]),t._v(" 属性的遍历⭐️")]),t._v(" "),a("p",[t._v("对象属性的遍历")]),t._v(" "),a("h3",{attrs:{id:"for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for...in")]),t._v(" "),a("p",[t._v("for...in循环遍历对象"),a("strong",[t._v("自身")]),t._v("的和"),a("strong",[t._v("继承")]),t._v("的"),a("strong",[t._v("可枚举")]),t._v("属性（"),a("strong",[t._v("不含 Symbol 属性")]),t._v("）。")]),t._v(" "),a("h3",{attrs:{id:"object-keys-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-obj"}},[t._v("#")]),t._v(" Object.keys(obj)")]),t._v(" "),a("p",[t._v("Object.keys返回一个数组，包括对象"),a("strong",[t._v("自身的（不含继承的）"),a("strong",[t._v("所有")]),t._v("可枚举")]),t._v("属性（"),a("strong",[t._v("不含 Symbol 属性")]),t._v("）的键名。")]),t._v(" "),a("h3",{attrs:{id:"object-getownpropertynames-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames-obj"}},[t._v("#")]),t._v(" Object.getOwnPropertyNames(obj)")]),t._v(" "),a("p",[t._v("Object.getOwnPropertyNames返回一个数组，包含对象"),a("strong",[t._v("自身")]),t._v("的"),a("strong",[t._v("所有属性")]),t._v("（"),a("strong",[t._v("不含 Symbol 属性，但是包括不可枚举属性")]),t._v("）的键名。")]),t._v(" "),a("h3",{attrs:{id:"object-getownpropertysymbols-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertysymbols-obj"}},[t._v("#")]),t._v(" Object.getOwnPropertySymbols(obj)")]),t._v(" "),a("p",[t._v("Object.getOwnPropertySymbols返回一个数组，包含对象"),a("strong",[t._v("自身")]),t._v("的"),a("strong",[t._v("所有 Symbol 属性")]),t._v("的键名。")]),t._v(" "),a("h3",{attrs:{id:"reflect-ownkeys-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflect-ownkeys-obj"}},[t._v("#")]),t._v(" Reflect.ownKeys(obj)⭐️")]),t._v(" "),a("p",[t._v("Reflect.ownKeys返回一个数组，包含对象"),a("strong",[t._v("自身的")]),t._v("（不含继承的）"),a("strong",[t._v("所有键名")]),t._v("，"),a("strong",[t._v("不管键名是 Symbol 或字符串，也不管是否可枚举。")])]),t._v(" "),a("h2",{attrs:{id:"属性遍历的次序规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性遍历的次序规则"}},[t._v("#")]),t._v(" 属性遍历的次序规则⭐️")]),t._v(" "),a("p",[t._v("以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。")]),t._v(" "),a("ol",[a("li",[t._v("首先遍历所有数值键，按照数值升序排列。")]),t._v(" "),a("li",[t._v("其次遍历所有字符串键，按照加入时间升序排列。")]),t._v(" "),a("li",[t._v("最后遍历所有 Symbol 键，按照加入时间升序排列。")])]),t._v(" "),a("h2",{attrs:{id:"对象的扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展运算符"}},[t._v("#")]),t._v(" 对象的扩展运算符")]),t._v(" "),a("p",[t._v("ES2018 将扩展运算符引入了对象。")]),t._v(" "),a("h2",{attrs:{id:"解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[t._v("#")]),t._v(" 解构赋值")]),t._v(" "),a("p",[t._v("对象的解构赋值用于从一个对象取值，相当于将目标对象"),a("strong",[t._v("自身")]),t._v("的所有"),a("strong",[t._v("可遍历")]),t._v("的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。")]),t._v(" "),a("p",[t._v("所有的键和它们的值，都会拷贝到新对象上面。")]),t._v(" "),a("p",[t._v("由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null，就会报错，因为它们无法转为对象。")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("undefined 和 null 无法转为对象")])]),t._v(" "),a("p",[t._v("解构赋值必须是最后一个参数，否则会报错。")]),t._v(" "),a("p",[t._v("解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。")]),t._v(" "),a("p",[a("strong",[t._v("扩展运算符的解构赋值，不能复制继承自原型对象的属性。")])]),t._v(" "),a("p",[t._v("ES6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式")]),t._v(" "),a("p",[t._v("解构赋值的一个用处，是扩展某个函数的参数，引入其他操作。")]),t._v(" "),a("h2",{attrs:{id:"扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[t._v("#")]),t._v(" 扩展运算符")]),t._v(" "),a("p",[t._v("对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。")]),t._v(" "),a("p",[t._v("由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。")]),t._v(" "),a("p",[t._v("如果扩展运算符后面是一个空对象，则没有任何效果。")]),t._v(" "),a("p",[t._v("如果扩展运算符后面不是对象，则会自动将其转为对象。")]),t._v(" "),a("p",[t._v("如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。")]),t._v(" "),a("p",[t._v("对象的扩展运算符等同于使用Object.assign()方法。")]),t._v(" "),a("p",[t._v("扩展运算符可以用于合并两个对象")]),t._v(" "),a("p",[a("strong",[t._v("如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。")])]),t._v(" "),a("p",[a("strong",[t._v("如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。")])]),t._v(" "),a("p",[t._v("扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。")]),t._v(" "),a("h2",{attrs:{id:"克隆一个对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆一个对象"}},[t._v("#")]),t._v(" 克隆一个对象⭐️")]),t._v(" "),a("p",[t._v("还拷贝对象原型的属性，可以采用下面的写法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" clone1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  __proto__"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("obj\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法二")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" clone2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  obj\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法三")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" clone3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"链判断运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链判断运算符"}},[t._v("#")]),t._v(" 链判断运算符")]),t._v(" "),a("p",[t._v("编程实务中，如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。")]),t._v(" "),a("p",[t._v("三元运算符?:也常用于判断对象是否存在。")]),t._v(" "),a("p",[t._v("这样的层层判断非常麻烦，因此 ES2020 引入了“链判断运算符”（optional chaining operator）?.，简化上面的写法。")]),t._v(" "),a("p",[t._v("直接在链式调用的时候判断，左侧的对象是否为null或undefined。如果是的，就不再往下运算，而是返回undefined。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//iterator.return如果有定义，就会调用该方法，否则iterator.return直接返回undefined，不再执行?.后面的部分。")]),t._v("\niterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等同于")]),t._v("\niterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("链判断运算符有三种用法。")]),t._v(" "),a("ul",[a("li",[t._v("obj?.prop ， 对象属性")]),t._v(" "),a("li",[t._v("obj?.[expr] ，对象属性")]),t._v(" "),a("li",[t._v("func?.(...args) ， 函数或对象方法的调用")])]),t._v(" "),a("h3",{attrs:{id:"短路机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短路机制"}},[t._v("#")]),t._v(" 短路机制")]),t._v(" "),a("p",[t._v("?.运算符相当于一种短路机制，只要不满足条件，就不再往下执行。")]),t._v(" "),a("h3",{attrs:{id:"delete-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-运算符"}},[t._v("#")]),t._v(" delete 运算符")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n")])])]),a("p",[t._v("如果a是undefined或null，会直接返回undefined，而不会进行delete运算。")]),t._v(" "),a("h3",{attrs:{id:"括号的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#括号的影响"}},[t._v("#")]),t._v(" 括号的影响")]),t._v(" "),a("p",[t._v("如果属性链有圆括号，链判断运算符对圆括号外部没有影响(不管内部如果，外部都一定会执行)，只对圆括号内部有影响。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//?.对圆括号外部没有影响，不管a对象是否存在，圆括号后面的.c总是会执行。")]),t._v("\n")])])]),a("h3",{attrs:{id:"报错场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#报错场合"}},[t._v("#")]),t._v(" 报错场合")]),t._v(" "),a("p",[t._v("以下写法是禁止的，会报错。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链判断运算符的右侧有模板字符串")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("{b}")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("{c}")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链判断运算符的左侧是 super")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("foo\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链运算符用于赋值运算符左侧")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c\n")])])]),a("h3",{attrs:{id:"右侧不得为十进制数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右侧不得为十进制数值"}},[t._v("#")]),t._v(" 右侧不得为十进制数值")]),t._v(" "),a("p",[t._v("为了保证兼容以前的代码，允许foo?.3:0被解析成foo ? .3 : 0")]),t._v(" "),a("p",[t._v("因此规定如果?.后面紧跟一个十进制数字，那么?.不再被看成是一个完整的运算符，而会按照三元运算符进行处理")]),t._v(" "),a("p",[t._v("也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。")]),t._v(" "),a("h2",{attrs:{id:"null-判断运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-判断运算符"}},[t._v("#")]),t._v(" Null 判断运算符")]),t._v(" "),a("p",[t._v("读取对象属性的时候，如果某个属性的值是null或undefined，有时候需要为它们指定默认值。")]),t._v(" "),a("p",[t._v("常见做法是通过||运算符指定默认值。")]),t._v(" "),a("p",[t._v("但是这样写是错的。开发者的原意是，只要属性的值为null或undefined，默认值就会生效，但是属性的值如果为空字符串或false或0，默认值也会生效。")]),t._v(" "),a("p",[a("strong",[t._v("ES2020 引入了一个新的 Null 判断运算符??。它的行为类似||，但是只有运算符左侧的值为null或undefined时，才会返回右侧的值。")])]),t._v(" "),a("p",[t._v("??有一个运算优先级问题，它与&&和||的优先级孰高孰低。现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。")]),t._v(" "),a("h2",{attrs:{id:"属性的简洁表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的简洁表示法"}},[t._v("#")]),t._v(" 属性的简洁表示法⭐️")]),t._v(" "),a("p",[t._v("ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" birth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2000/01/01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等同于birth: birth")]),t._v("\n  birth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于hello: function ()...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我的名字是'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写法二")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我的名字是'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("属性的赋值器（setter）和取值器（getter），事实上也是采用这种写法。")]),t._v(" "),a("p",[t._v("简洁写法在打印对象时也很有用。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {name: "test"} {bar: "baz"}')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {user: {name: "test"}, foo: {bar: "baz"}}')]),t._v("\n")])])]),a("p",[a("strong",[t._v("注意，简写的对象方法不能用作构造函数，会报错。")])]),t._v(" "),a("h2",{attrs:{id:"属性名表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性名表达式"}},[t._v("#")]),t._v(" 属性名表达式")]),t._v(" "),a("p",[t._v("JavaScript 定义对象的属性，有两种方法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法一直接用标识符作为属性名")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法二用表达式作为属性名，这时要将表达式放在方括号之内。")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。")]),t._v(" "),a("p",[t._v("表达式还可以用于定义方法名。")]),t._v(" "),a("p",[t._v("属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]")]),t._v(" "),a("h2",{attrs:{id:"方法的-name-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法的-name-属性"}},[t._v("#")]),t._v(" 方法的 name 属性")]),t._v(" "),a("p",[t._v("函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。")]),t._v(" "),a("p",[t._v("如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，\n返回值是方法名前加上get和set")]),t._v(" "),a("p",[t._v("bind方法创造的函数，name属性返回bound加上原函数的名字；")]),t._v(" "),a("p",[t._v("Function构造函数创造的函数，name属性返回anonymous。")]),t._v(" "),a("p",[t._v("如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。")])])}),[],!1,null,null,null);s.default=e.exports}}]);