(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{370:function(t,a,s){"use strict";s.r(a);var e=s(9),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"待填坑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#待填坑"}},[t._v("#")]),t._v(" 待填坑")]),t._v(" "),s("h2",{attrs:{id:"xss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[t._v("#")]),t._v(" XSS")]),t._v(" "),s("p",[t._v("XSS (Cross Site Script)，跨站脚本攻击，因为缩写和 CSS (Cascading Style Sheets) 重叠，所以只能叫 XSS。")]),t._v(" "),s("p",[t._v("XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。")]),t._v(" "),s("h3",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("p",[t._v("XSS 的攻击方式千变万化，但还是可以大致细分为几种类型。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("DOM xss :")]),t._v(" "),s("p",[t._v("使用DOM可以允许程序和脚本动态的访问和更新文档的内容、结构和样式。它不需要服务器解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端的事情。")]),t._v(" "),s("p",[t._v("在使用 .innerHTML、.outerHTML、.appendChild、document.write()等API时要特别小心，不要把不可信的数据作为 HTML 插到页面上，")]),t._v(" "),s("p",[s("strong",[t._v("尽量使用 .innerText、.textContent、.setAttribute() 等。")])])]),t._v(" "),s("li",[s("p",[t._v("反射型 xss :")]),t._v(" "),s("p",[t._v("反射型XSS也被称为非持久性XSS，是现在最容易出现的一种XSS漏洞。发出请求时，XSS代码出现在URL中，最后输入提交到服务器，服务器解析后在响应内容中出现这段XSS代码，最后浏览器解析执行，混在其中的恶意代码也被执行。")])]),t._v(" "),s("li",[s("p",[t._v("存储型 xss :")]),t._v(" "),s("p",[t._v("存储型XSS又被称为持久性XSS，它是最危险的一种跨站脚本，相比反射型XSS和DOM型XSS具有更高的隐蔽性，所以危害更大，因为它不需要用户手动触发。")]),t._v(" "),s("p",[t._v("允许用户存储数据的web程序都可能存在存储型XSS漏洞，当攻击者提交一段XSS代码后，被服务器端接收并存储，当所有浏览者访问某个页面时都会被XSS，其中最典型的例子就是留言板。")]),t._v(" "),s("p",[t._v("存储型XSS攻击的原因仍然是没有做好数据过滤：前端提交数据至服务端时，没有做好过滤；服务端在接受到数据时，在存储之前，没有做过滤；前端从服务端请求到数据，没有过滤输出。")])])]),t._v(" "),s("h3",{attrs:{id:"csp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csp"}},[t._v("#")]),t._v(" CSP")]),t._v(" "),s("p",[t._v("在服务端使用 HTTP的 Content-Security-Policy 头部来指定策略，或者在前端设置 meta 标签")]),t._v(" "),s("p",[t._v("严格的 CSP 在 XSS 的防范中可以起到以下的作用：")]),t._v(" "),s("ul",[s("li",[t._v("禁止加载外域代码，防止复杂的攻击逻辑。")]),t._v(" "),s("li",[t._v("禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。")]),t._v(" "),s("li",[t._v("禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。")]),t._v(" "),s("li",[t._v("禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。")]),t._v(" "),s("li",[t._v("合理使用上报可以及时发现 XSS，利于尽快修复问题。")])]),t._v(" "),s("h3",{attrs:{id:"httponly"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#httponly"}},[t._v("#")]),t._v(" httpOnly")]),t._v(" "),s("p",[t._v("Cookie有一个httpOnly属性，表示只能被http请求携带。")]),t._v(" "),s("p",[t._v("假如你的网站遭受到XSS攻击，攻击者就无法通过document.cookie得到你的cookie信息。")]),t._v(" "),s("h3",{attrs:{id:"正则校验-数据转义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则校验-数据转义"}},[t._v("#")]),t._v(" 正则校验 + 数据转义")]),t._v(" "),s("p",[t._v("防范 DOM 型 XSS 攻击的核心就是对输入内容进行转义(DOM 中的内联事件监听器和链接跳转都能把字符串作为代码运行，需要对其内容进行检查)。")]),t._v(" "),s("ul",[s("li",[t._v("对于url链接(例如图片的src属性)，那么直接使用 encodeURIComponent 来转义。")]),t._v(" "),s("li",[t._v("非url，我们可以这样进行编码："),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeHtml")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v('/"/g')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&quot;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/'/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&apos;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/</g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&lt;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/>/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&gt;'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"输入检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入检查"}},[t._v("#")]),t._v(" 输入检查")]),t._v(" "),s("p",[t._v("一般是用于对于输入格式的检查，例如：邮箱，电话号码，用户名，密码……等，按照规定的格式输入。")]),t._v(" "),s("h2",{attrs:{id:"csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/csrf-attack.jpg",alt:"CSRF"}})]),t._v(" "),s("p",[t._v("CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),s("h3",{attrs:{id:"攻击流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#攻击流程"}},[t._v("#")]),t._v(" 攻击流程")]),t._v(" "),s("p",[t._v("一个典型的CSRF攻击有着如下的流程：")]),t._v(" "),s("ol",[s("li",[t._v("受害者登录a.com，并保留了登录凭证（Cookie）。")]),t._v(" "),s("li",[t._v("攻击者引诱受害者访问了b.com。")]),t._v(" "),s("li",[t._v("b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。")]),t._v(" "),s("li",[t._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。")]),t._v(" "),s("li",[t._v("a.com以受害者的名义执行了act=xx。")]),t._v(" "),s("li",[t._v("攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。")])]),t._v(" "),s("p",[t._v("在CSRF攻击中，就Cookie相关的特性：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("http请求，会自动携带Cookie。")])]),t._v(" "),s("li",[s("p",[t._v("携带的cookie，还是http请求所在域名的cookie。")])])]),t._v(" "),s("h3",{attrs:{id:"类型-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型-2"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("GET类型的CSRF")]),t._v(" "),s("p",[t._v("GET类型的CSRF利用非常简单，只需要一个HTTP请求，一般会这样利用：")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("![](https://xxx?amount=10000&for=hacker)\n")])])]),s("p",[t._v("在受害者访问含有这个img的页面后，浏览器会自动向 http://bank.example/withdraw?account=xiaoming&amount=10000&for=hacker 发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次跨域请求。")])]),t._v(" "),s("li",[s("p",[t._v("POST类型的CSRF")]),t._v(" "),s("p",[t._v("这种类型的CSRF利用起来通常使用的是一个自动提交的表单，如：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("form")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("action")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("POST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("account"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xiaoming"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("10000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("for"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hacker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("form")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])])]),s("p",[t._v("访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。")]),t._v(" "),s("p",[t._v("POST类型的攻击通常比GET要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源")])]),t._v(" "),s("li",[s("p",[t._v("链接类型的CSRF")]),t._v(" "),s("p",[t._v("链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击")])])]),t._v(" "),s("h3",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("ul",[s("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),s("li",[t._v("攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。")]),t._v(" "),s("li",[t._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。")]),t._v(" "),s("li",[t._v("跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")]),t._v(" "),s("li",[t._v("CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。")])]),t._v(" "),s("h3",{attrs:{id:"防护策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防护策略"}},[t._v("#")]),t._v(" 防护策略")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("阻止不明外域的访问（针对CSRF（通常）发生在第三方域名。）")]),t._v(" "),s("ul",[s("li",[t._v("同源检测")]),t._v(" "),s("li",[t._v("Samesite Cookie")])])]),t._v(" "),s("li",[s("p",[t._v("提交时要求附加本域才能获取的信息（针对CSRF攻击者不能获取到Cookie等信息，只是使用。）")]),t._v(" "),s("ul",[s("li",[t._v("CSRF Token")]),t._v(" "),s("li",[t._v("Cookie SameSite")])])])]),t._v(" "),s("h3",{attrs:{id:"同源检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源检测"}},[t._v("#")]),t._v(" 同源检测")]),t._v(" "),s("p",[t._v("在HTTP协议中，每一个异步请求都会携带两个Header，用于标记来源域名：")]),t._v(" "),s("p",[t._v("这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Origin Header，确定来源域名（不包含path及query）")]),t._v(" "),s("p",[t._v("在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。")])]),t._v(" "),s("li",[s("p",[t._v("Referer Header，确定来源域名")]),t._v(" "),s("p",[t._v("在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源地址。 对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。")]),t._v(" "),s("p",[t._v("在部分情况下，攻击者可以隐藏，甚至修改自己请求的Referer。")])])]),t._v(" "),s("p",[t._v("服务器可以通过解析这两个Header中的域名，确定请求的来源域。")]),t._v(" "),s("p",[t._v("HTTPS页面跳转到HTTP页面，所有浏览器Referer都丢失。")]),t._v(" "),s("h3",{attrs:{id:"使用token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用token"}},[t._v("#")]),t._v(" 使用Token")]),t._v(" "),s("p",[t._v("CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。")]),t._v(" "),s("p",[t._v("CSRF Token的防护策略分为三个步骤：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将CSRF Token输出到页面中")]),t._v(" "),s("p",[t._v("首先，用户打开页面的时候，服务器需要给这个用户生成一个Token，该Token通过加密算法对数据进行加密，一般Token都包括随机字符串和时间戳的组合，")]),t._v(" "),s("p",[t._v("显然在提交时Token不能再放在Cookie中了，否则又会被攻击者冒用。因此，为了安全起见Token最好还是存在服务器的Session中，之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。")])]),t._v(" "),s("li",[s("p",[t._v("页面提交的请求携带这个Token")]),t._v(" "),s("p",[t._v("对于GET请求，Token将附在请求地址之后，这样URL 就变成 http://url?csrftoken=tokenvalue。 而对于 POST 请求来说，要在 form 的最后加上：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("”hidden”")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("”csrftoken”")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("”tokenvalue”/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("这样，就把Token以参数的形式加入请求了。")])]),t._v(" "),s("li",[s("p",[t._v("服务器验证Token是否正确")]),t._v(" "),s("p",[t._v("当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性，验证过程是先解密Token，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个Token就是有效的。")]),t._v(" "),s("p",[t._v("这种方法要比之前检查Referer或者Origin要安全一些，Token可以在产生并放于Session之中，然后在每次请求时把Token从Session中拿出，与请求中的Token进行比对，但这种方法的比较麻烦的在于如何把Token以参数的形式加入请求。")])])]),t._v(" "),s("p",[t._v("由于使用Session存储，读取和验证CSRF Token会引起比较大的复杂度和性能问题，目前很多网站采用Encrypted Token Pattern方式。这种方法的Token是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的Token，只用再次计算一次即可。")]),t._v(" "),s("p",[t._v("这种Token的值通常是使用UserID、时间戳和随机数，通过加密的方法生成。这样既可以保证分布式服务的Token一致，又能保证Token不容易被破解。")]),t._v(" "),s("p",[t._v("在token解密成功之后，服务器可以访问解析值，Token中包含的UserID和时间戳将会被拿来被验证有效性，将UserID与当前登录的UserID进行比较，并将时间戳与当前时间进行比较。")]),t._v(" "),s("p",[t._v("但是此方法的实现比较复杂，需要给每一个页面都写入Token（前端无法使用纯静态页面），每一个Form及Ajax请求都携带这个Token，后端对每一个接口都进行校验，并保证页面Token及请求Token一致。这就使得这个防护策略不能在通用的拦截上统一拦截处理，而需要每一个页面和接口都添加对应的输出和校验。这种方法工作量巨大，且有可能遗漏。")]),t._v(" "),s("h3",{attrs:{id:"samesite"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#samesite"}},[t._v("#")]),t._v(" SameSite")]),t._v(" "),s("p",[t._v("Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Strict")]),t._v(" "),s("p",[t._v("Strict最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。")]),t._v(" "),s("p",[t._v("换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。")])]),t._v(" "),s("li",[s("p",[t._v("Lax")]),t._v(" "),s("p",[t._v("Lax规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。")]),t._v(" "),s("ul",[s("li",[t._v("链接")]),t._v(" "),s("li",[t._v('预加载请求, link rel="prerender"')]),t._v(" "),s("li",[t._v("GET 表单, form method = 'GET'")])])]),t._v(" "),s("li",[s("p",[t._v("None")]),t._v(" "),s("p",[t._v("这时，网站可以选择显式关闭SameSite属性，将其设为None。")]),t._v(" "),s("p",[t._v("不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。")])])]),t._v(" "),s("h2",{attrs:{id:"csp-内容安全策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csp-内容安全策略"}},[t._v("#")]),t._v(" CSP(内容安全策略)")]),t._v(" "),s("p",[t._v("内容安全策略（CSP）用于检测和减轻用于 Web 站点的特定类型的攻击，例如 XSS 和数据注入等。")]),t._v(" "),s("p",[t._v("该安全策略的实现基于一个称作 Content-Security-Policy 的 HTTP 首部。")]),t._v(" "),s("blockquote",[s("p",[t._v("不支持 CSP 的浏览器只会忽略它")])]),t._v(" "),s("p",[t._v("除此之外,  HTML 的 meta 元素也可以被用来配置该策略")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Content-Security-Policy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("default-src 'self'; img-src https://*; child-src 'none';"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("使用 Content-Security-Policy HTTP 头部来指定的策略，像这样:")]),t._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[t._v("Content-Security-Policy: policy\n")])])]),s("p",[t._v("policy参数是一个包含了各种描述你的CSP策略指令的字符串。")]),t._v(" "),s("p",[t._v("一个策略由一系列策略指令所组成，每个策略指令都描述了一个针对某个特定类型资源以及生效范围的策略。")]),t._v(" "),s("p",[t._v("你的策略应当包含一个default-src策略指令，在其他资源类型没有符合自己的策略时应用该策略。")]),t._v(" "),s("p",[t._v("一个策略可以包含 default-src  或者 script-src 指令来防止内联脚本运行, 并杜绝eval()的使用。")]),t._v(" "),s("p",[t._v("一个策略也可包含一个 default-src 或  style-src 指令去限制来自一个 style 元素或者style属性的內联样式。")]),t._v(" "),s("p",[t._v("CSP 的主要目标是减少和报告 XSS 攻击，XSS 攻击利用了浏览器对于从服务器所获取的内容的信任。恶意脚本在受害者的浏览器中得以运行，因为浏览器信任其内容来源，即使有的时候这些脚本并非来自于它本该来的地方。")]),t._v(" "),s("p",[t._v("CSP通过指定有效域，即浏览器认可的可执行脚本的有效来源，使服务器管理者有能力减少或消除XSS攻击所依赖的载体。一个CSP兼容的浏览器将会仅执行从白名单域获取到的脚本文件，忽略所有的其他脚本 (包括内联脚本和HTML的事件处理属性)。")]),t._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("p",[t._v("所有内容均来自站点的同一个源 (不包括其子域名)")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("Content-Security-Policy: default-src 'self'\n")])])]),s("p",[t._v("允许内容来自信任的域名及其子域名 (域名不必须与CSP设置所在的域名相同)")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("Content-Security-Policy: default-src 'self' *.trusted.com\n")])])]),s("p",[t._v("允许网页应用的用户在他们自己的内容中包含来自任何源的图片, 但是限制音频或视频需从信任的资源提供者获得，所有脚本必须从特定主机服务器获取可信的代码.")]),t._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[t._v("Content-Security-Policy: default-src 'self'; img-src *; media-src media1.com media2.com; script-src userscripts.example.com\n")])])]),s("h2",{attrs:{id:"点击劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点击劫持"}},[t._v("#")]),t._v(" 点击劫持")]),t._v(" "),s("p",[t._v("点击劫持是指在一个Web页面中隐藏了一个透明的iframe，用外层假页面诱导用户点击，实际上是在隐藏的frame上触发了点击事件进行一些用户不知情的操作。")]),t._v(" "),s("h3",{attrs:{id:"x-frame-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#x-frame-options"}},[t._v("#")]),t._v(" X-Frame-Options")]),t._v(" "),s("p",[t._v("X-FRAME-OPTIONS是微软提出的一个http头，专门用来防御利用iframe嵌套的点击劫持攻击。网站可以使用此功能，来确保自己网站内容没有被嵌到别人的网站中去，也从而避免点击劫持的攻击。")]),t._v(" "),s("p",[t._v("可以设置为以下值:")]),t._v(" "),s("ul",[s("li",[t._v("DENY: 拒绝任何域加载")]),t._v(" "),s("li",[t._v("SAMEORIGIN: 允许同源域下加载")]),t._v(" "),s("li",[t._v("ALLOW-FROM: 可以定义允许frame加载的页面地址")])]),t._v(" "),s("h2",{attrs:{id:"ddos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ddos"}},[t._v("#")]),t._v(" DDOS")]),t._v(" "),s("p",[t._v("在短时间内发起大量请求，耗尽服务器的资源，无法响应正常的访问，造成网站实质下线。")]),t._v(" "),s("blockquote",[s("p",[t._v("DDOS 里面的 DOS 是 denial of service（停止服务）的缩写，表示这种攻击的目的，就是使得服务中断。\n最前面的那个 D 是 distributed （分布式），表示攻击不是来自一个地方，而是来自四面八方，因此更难防。")])]),t._v(" "),s("h3",{attrs:{id:"防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防御"}},[t._v("#")]),t._v(" 防御")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("隐藏服务器ip")])]),t._v(" "),s("li",[s("p",[t._v("带宽扩容提高承受能力")]),t._v(" "),s("p",[t._v("CDN 指的是网站的静态内容分发到多个服务器，用户就近访问，提高速度。因此，CDN 也是带宽扩容的一种方法，可以用来防御 DDOS 攻击。")])]),t._v(" "),s("li",[s("p",[t._v("网站过滤ip请求")]),t._v(" "),s("p",[t._v("但是真正的 DDOS 攻击是没有特征的，它的请求看上去跟正常请求一样，而且来自不同的 IP 地址，所以没法拦截")])])]),t._v(" "),s("h2",{attrs:{id:"前端暴露js代码怎么解决。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端暴露js代码怎么解决。"}},[t._v("#")]),t._v(" 前端暴露JS代码怎么解决。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("代码重构")])]),t._v(" "),s("li",[s("p",[t._v("代码混淆主要涉及两种思路：")]),t._v(" "),s("ul",[s("li",[t._v("通过正则替换实现的混淆器；")]),t._v(" "),s("li",[t._v("通过语法树替换实现的混淆器。")])]),t._v(" "),s("p",[t._v("第一种实现成本低，但是效果也一般，适合对混淆要求不高的场景。第二种实现成本较高，但是更灵活，而且更安全，更适合对抗场景。")])]),t._v(" "),s("li",[s("p",[t._v("僵尸代码插入")])])]),t._v(" "),s("blockquote",[s("p",[t._v("国内有JShaman提供服务")])]),t._v(" "),s("h2",{attrs:{id:"怎么防sql注入（http注入）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么防sql注入（http注入）"}},[t._v("#")]),t._v(" 怎么防sql注入（http注入）")]),t._v(" "),s("h2",{attrs:{id:"文件上传漏洞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件上传漏洞"}},[t._v("#")]),t._v(" 文件上传漏洞")]),t._v(" "),s("h2",{attrs:{id:"网页验证码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网页验证码"}},[t._v("#")]),t._v(" 网页验证码")])])}),[],!1,null,null,null);a.default=n.exports}}]);