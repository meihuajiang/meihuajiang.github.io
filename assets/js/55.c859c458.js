(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{314:function(t,s,a){"use strict";a.r(s);var n=a(9),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"基本类型和引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和引用类型"}},[t._v("#")]),t._v(" 基本类型和引用类型")]),t._v(" "),a("ul",[a("li",[t._v("String")]),t._v(" "),a("li",[t._v("Number")]),t._v(" "),a("li",[t._v("Boolean")]),t._v(" "),a("li",[t._v("Undefined")]),t._v(" "),a("li",[t._v("Symbol")]),t._v(" "),a("li",[t._v("Null")]),t._v(" "),a("li",[t._v("BigInt")]),t._v(" "),a("li",[t._v("Object")])]),t._v(" "),a("blockquote",[a("p",[t._v("object 为引用类型，其实可以算成狭义的对象 + 数组 + 函数")])]),t._v(" "),a("h3",{attrs:{id:"各类型占的字节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#各类型占的字节"}},[t._v("#")]),t._v(" 各类型占的字节")]),t._v(" "),a("ul",[a("li",[t._v("string：2")]),t._v(" "),a("li",[t._v("boolean：4")]),t._v(" "),a("li",[t._v("number：8")])]),t._v(" "),a("h3",{attrs:{id:"堆和栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆和栈"}},[t._v("#")]),t._v(" 堆和栈")]),t._v(" "),a("p",[t._v("一般情况下，栈内存一般用来存放基本数据类型的值（Undefined、Null、Boolean、Number、String、Symbol、BigInt）。")]),t._v(" "),a("p",[t._v("栈内存由系统自动分配内存空间，存储值的大小固定，空间小，运行效率更高。不需要手动管理，函数调时创建，调用结束则消失。")]),t._v(" "),a("p",[t._v("堆内存用来存放引用数据类型的值（对象）。当我们声明了一个引用类型的值（对象）之后，这个引用类型的值（对象）保存在堆内存中。另一方面，这个值（对象）的地址会被保存在栈内存中，用来引用这个对象。同时，堆内存存储的值大小不定，可以动态调整，空间大，运行效率更低")]),t._v(" "),a("p",[t._v("基本数据类型是按值访问的，可以操作保存在变量中实际的值。")]),t._v(" "),a("p",[t._v("而引用数据类型是按引用访问的。")]),t._v(" "),a("h3",{attrs:{id:"闭包存在哪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包存在哪"}},[t._v("#")]),t._v(" 闭包存在哪")]),t._v(" "),a("p",[t._v("堆")]),t._v(" "),a("blockquote",[a("p",[t._v("栈中数据在函数执行结束后就会被销毁,而堆中的不会")])]),t._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),a("p",[t._v("ES6 引入Symbol，保证每个属性的名字都是独一无二，从根本上防止属性名的冲突")]),t._v(" "),a("h2",{attrs:{id:"symbol-的实际应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-的实际应用"}},[t._v("#")]),t._v(" symbol() 的实际应用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("作为对象属性名")]),t._v(" "),a("p",[t._v("不能用.运算符，要用方括号，否则会被识别成字符串。")])]),t._v(" "),a("li",[a("p",[t._v("定义常量")]),t._v(" "),a("p",[t._v("用const定义的常量不能保证常量值是独一无二的，这在一些判断语句中会出现问题")])])]),t._v(" "),a("h2",{attrs:{id:"symbol和const区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol和const区别"}},[t._v("#")]),t._v(" symbol和const区别")]),t._v(" "),a("p",[t._v("const是定义的变量名不可重复定义，但是值可以一样。")]),t._v(" "),a("p",[t._v("symbol是定义的变量值不会重复。")]),t._v(" "),a("h2",{attrs:{id:"symbol初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol初始化"}},[t._v("#")]),t._v(" symbol初始化")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//报错，Symbol is not a constructor，Symbol 是原始数据类型")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写法正确")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先查找，如果没有则新建")]),t._v("\n\n\n")])])]),a("p",[t._v("PS:Symbol.keyFor()方法返回一个已登记的 Symbol 类型值的key(Symbol的字符串描述)。")]),t._v(" "),a("p",[t._v("description能返回所有Symbol类型数据的描述，而Symbol.keyFor()只能返回Symbol.for()在全局注册过的描述。")]),t._v(" "),a("h3",{attrs:{id:"es5-实现-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es5-实现-symbol"}},[t._v("#")]),t._v(" ES5 实现 symbol")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://github.com/mqyqingfeng/Blog/issues/87",alt:"参考伢羽大佬"}})]),t._v(" "),a("h2",{attrs:{id:"bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[t._v("#")]),t._v(" BigInt")]),t._v(" "),a("p",[t._v("ES2020引进，ECMAScript 的第八种数据类型。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。")]),t._v(" "),a("p",[t._v("为了与 Number 类型区别，BigInt 类型的数据必须添加后缀n。")]),t._v(" "),a("p",[t._v("BigInt 同样可以使用各种进制表示，都要加上后缀n。")]),t._v(" "),a("p",[t._v("BigInt 与普通整数是两种值，它们之间并不相等。")]),t._v(" "),a("p",[a("strong",[t._v("typeof运算符对于 BigInt 类型的数据返回bigint。（都是小写）")])]),t._v(" "),a("p",[t._v("BigInt 可以使用负号（-），但是不能使用正号（+），因为会与 asm.js 冲突。")]),t._v(" "),a("blockquote",[a("p",[t._v("Emscripten（编译器）可以将 C / C++ 代码编译成 JS 代码，但不是普通的 JS，而是一种叫做 asm.js 的 JavaScript 变体。提升性能\nasm.js 不仅能让浏览器运行 3D 游戏，还可以运行各种服务器软件")])]),t._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("p",[t._v("基本类型之一。")]),t._v(" "),a("h2",{attrs:{id:"_12-和-12-0-有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-和-12-0-有什么区别？"}},[t._v("#")]),t._v(" 12 和 12.0 有什么区别？⭐️")]),t._v(" "),a("p",[t._v("JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 12 和 12.0 被视为同一个值。")]),t._v(" "),a("h2",{attrs:{id:"number的数据范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number的数据范围"}},[t._v("#")]),t._v(" Number的数据范围")]),t._v(" "),a("p",[t._v("JavaScript 对15位的十进制数都可以精确处理")]),t._v(" "),a("p",[t._v("如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript 无法表示这么大的数，这时就会返回Infinity。")]),t._v(" "),a("p",[t._v("如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“负向溢出”，即 JavaScript 无法表示这么小的数，这时会直接返回0。")]),t._v(" "),a("p",[t._v("JavaScript 提供Number对象的MAX_VALUE和MIN_VALUE属性，返回可以表示的具体的最大值和最小值。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.7976931348623157e+308")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5e-324")]),t._v("\n")])])]),a("h2",{attrs:{id:"最大的安全整数是多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最大的安全整数是多少"}},[t._v("#")]),t._v(" 最大的安全整数是多少")]),t._v(" "),a("p",[a("code",[t._v("Number.MAX_VALUE // 1.7976931348623157e+308")])]),t._v(" "),a("h2",{attrs:{id:"数据精度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据精度"}},[t._v("#")]),t._v(" 数据精度")]),t._v(" "),a("p",[t._v("由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。")]),t._v(" "),a("p",[t._v("JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点）")]),t._v(" "),a("h2",{attrs:{id:"_0-1-0-2-等于-0-3-吗？为什么？解决方案？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-等于-0-3-吗？为什么？解决方案？"}},[t._v("#")]),t._v(" 0.1 + 0.2 等于 0.3 吗？为什么？解决方案？")]),t._v(" "),a("p",[t._v("不等于")]),t._v(" "),a("p",[t._v("JS采用IEEE 754 双精度。六十四位中符号位占一位，整数位占十一位，其余五十二位都为小数位。因为 0.1 和 0.2 都是无限循环的二进制了，所以在小数位末尾处需要判断是否进位（就和十进制的四舍五入一样）。")]),t._v(" "),a("p",[t._v("用科学计数法表示二进制 0.1 并只保留前 52 位：\n2^-4 * 1.1 0011(12个) 010 （已考虑进位，1 + 12*4 + 3 = 52）")]),t._v(" "),a("p",[t._v("用科学计数法表示二进制 0.2 并只保留前 52 位：\n2^-3 * 1.1 0011(12个) 010 （已考虑进位）")]),t._v(" "),a("p",[t._v("两数相加等于：\n2^-2 * 1.0011(12个) 0100， 转换成十进制为0.30000000000000004")]),t._v(" "),a("p",[t._v("解决方法：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("法一：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toFixed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("法二：")]),t._v(" "),a("p",[t._v("先*10运算，后再/10")])])]),t._v(" "),a("h3",{attrs:{id:"js浮点数运算不精确-如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js浮点数运算不精确-如何解决"}},[t._v("#")]),t._v(" js浮点数运算不精确 如何解决?")]),t._v(" "),a("ul",[a("li",[t._v("引用库\n"),a("ul",[a("li",[t._v("Math.js")]),t._v(" "),a("li",[t._v("decimal.js")]),t._v(" "),a("li",[t._v("big.js")])])]),t._v(" "),a("li",[t._v("转字符串再运算")]),t._v(" "),a("li",[t._v("在知道小数位个数的前提下，可以考虑通过将浮点数放大倍数到整型(最后再除以相应倍数)")])]),t._v(" "),a("h2",{attrs:{id:"给number加一个方法，可以获取小数点后n位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给number加一个方法，可以获取小数点后n位"}},[t._v("#")]),t._v(" 给Number加一个方法，可以获取小数点后n位")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("法一：")]),t._v(" "),a("p",[t._v("num * Math.pow(10,n), 对结果使用parseInt(),然后整体%10，容易溢出")])]),t._v(" "),a("li",[a("p",[t._v("法二：")]),t._v(" "),a("p",[t._v("转换为字符串，先indexOf(.),在次基础上加上n即可")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNumNByString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" poi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("poi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"null和undefined使用number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null和undefined使用number"}},[t._v("#")]),t._v(" null和undefined使用Number()")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("h2",{attrs:{id:"数字转字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字转字符串"}},[t._v("#")]),t._v(" 数字转字符串")]),t._v(" "),a("ul",[a("li",[t._v("法一"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null 和 undefined 也能使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("法二"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个点被解析为小数点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null 和 undefined 用不了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("法三"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null 和 undefined 也能使用，可读性较差")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"科学计数法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#科学计数法"}},[t._v("#")]),t._v(" 科学计数法")]),t._v(" "),a("p",[t._v("只有以下两种情况 JavaScript 会自动将数值转为科学计数法表示，其他情况都采用字面形式直接表示。")]),t._v(" "),a("ul",[a("li",[t._v("小数点前的数字多于21位。")]),t._v(" "),a("li",[t._v("小数点后的零多于5个。")])]),t._v(" "),a("h2",{attrs:{id:"_8进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8进制"}},[t._v("#")]),t._v(" 8进制")]),t._v(" "),a("p",[t._v("通常来说，有前导0的数值会被视为八进制，但是如果前导0后面有数字8和9，则该数值被视为十进制。")]),t._v(" "),a("p",[t._v("前导0表示八进制，处理时很容易造成混乱。ES5 的严格模式和 ES6，已经废除了这种表示法，")]),t._v(" "),a("p",[t._v("但是浏览器为了兼容以前的代码，目前还继续支持这种表示法。")]),t._v(" "),a("h2",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[t._v("#")]),t._v(" NaN")]),t._v(" "),a("ul",[a("li",[t._v("数据类型为number")]),t._v(" "),a("li",[t._v("主要出现在将字符串解析成数字出错的场合。")]),t._v(" "),a("li",[t._v("NaN不等于任何值，包括它本身")]),t._v(" "),a("li",[t._v("NaN与任何数（包括它自己）的运算，得到的都是NaN。")]),t._v(" "),a("li",[t._v("Infinity与NaN比较，总是返回false。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("0除以0也会得到NaN")])]),t._v(" "),a("p",[t._v("isNaN方法可以用来判断一个值是否为NaN")]),t._v(" "),a("blockquote",[a("p",[t._v("isNaN只对数值有效，如果传入其他值，会被先转成数值,比如，传入字符串的时候，字符串会被先转成NaN，所以最后返回true")])]),t._v(" "),a("p",[a("strong",[t._v("判断NaN更可靠的方法是，利用NaN为唯一不等于自身的值的这个特点，进行判断。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("新增")]),t._v(" "),a("p",[t._v("Number.isNaN()用来检查一个值是否为NaN。")]),t._v(" "),a("p",[t._v("如果参数类型不是NaN，Number.isNaN一律返回false。")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("数组的indexOf方法内部使用的是严格相等运算符，所以该方法对NaN不成立")])]),t._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" string")]),t._v(" "),a("p",[t._v("字符串对象是一个类似数组的对象")]),t._v(" "),a("h3",{attrs:{id:"length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[t._v("#")]),t._v(" length")]),t._v(" "),a("p",[t._v("JavaScript 返回的字符串长度可能是不正确的。对于码点在U+10000到U+10FFFF之间的字符，length属性被认为是2")]),t._v(" "),a("p",[t._v("原因如下：")]),t._v(" "),a("p",[t._v("采用\\uxxxx形式表示一个字符,只限于码点在\\u0000~\\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示")]),t._v(" "),a("p",[t._v("ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。")]),t._v(" "),a("h3",{attrs:{id:"方法一览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一览"}},[t._v("#")]),t._v(" 方法一览")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("String.fromCharCode()")]),t._v(" "),a("td",[t._v("返回参数（码点）组成的字符串")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.charAt()")]),t._v(" "),a("td",[t._v("返回指定位置的字符，参数是从0开始编号的位置。")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.charCodeAt()")]),t._v(" "),a("td",[t._v("返回字符串指定位置的 Unicode 码点")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.toLowerCase()")]),t._v(" "),a("td",[t._v("用于将一个字符串全部转为小写")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.toUpperCase()")]),t._v(" "),a("td",[t._v("用于将一个字符串全部转为大写。")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作字符串方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("String.prototype.concat()")]),t._v(" "),a("td",[t._v("用于连接两个字符串")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.slice()")]),t._v(" "),a("td",[t._v("用于从原字符串取出子字符串并返回")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.substring()")]),t._v(" "),a("td",[t._v("用于从原字符串取出子字符串并返回")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.substr()")]),t._v(" "),a("td",[t._v("用于从原字符串取出子字符串并返回")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.replace()")]),t._v(" "),a("td",[t._v("用于替换匹配的子字符串")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.split()")]),t._v(" "),a("td",[t._v("split方法按照给定规则分割字符串")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.trim()")]),t._v(" "),a("td",[t._v("trim方法用于去除字符串两端的空格")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("查找字符方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("String.prototype.indexOf()")]),t._v(" "),a("td",[t._v("用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.lastIndexOf()")]),t._v(" "),a("td",[t._v("用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置,但是方向是从右向左")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.match()")]),t._v(" "),a("td",[t._v("用于确定原字符串是否匹配某个子字符串")])]),t._v(" "),a("tr",[a("td",[t._v("String.prototype.search()")]),t._v(" "),a("td",[t._v("用于确定原字符串是否匹配某个子字符串")])])])]),t._v(" "),a("h3",{attrs:{id:"string-fromcharcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-fromcharcode"}},[t._v("#")]),t._v(" String.fromCharCode()")]),t._v(" "),a("p",[t._v("该静态方法的参数是一个或多个数值，代表 Unicode 码点，返回值是这些码点组成的字符串。")]),t._v(" "),a("blockquote",[a("p",[t._v("参数为空，就返回空字符串")])]),t._v(" "),a("p",[a("code",[t._v('String.fromCharCode(104, 101, 108, 108, 111)// "hello"')])]),t._v(" "),a("p",[t._v("该方法不支持 Unicode 码点大于0xFFFF的字符")]),t._v(" "),a("blockquote",[a("p",[t._v("把1个4字节的字符拆分成2个2字节的字符才可以表示")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-charat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-charat"}},[t._v("#")]),t._v(" String.prototype.charAt()")]),t._v(" "),a("p",[t._v("完全可以用数组下标替代。")]),t._v(" "),a("p",[t._v("如果参数为负数，或大于等于字符串的长度，charAt返回空字符串。")]),t._v(" "),a("h3",{attrs:{id:"string-prototype-charcodeat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-charcodeat"}},[t._v("#")]),t._v(" String.prototype.charCodeAt()")]),t._v(" "),a("p",[t._v("charCodeAt()方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于String.fromCharCode()的逆操作。")]),t._v(" "),a("p",[a("strong",[t._v("如果没有任何参数，charCodeAt返回首字符的 Unicode 码点。不会为空")])]),t._v(" "),a("p",[t._v("如果参数为负数，或大于等于字符串的长度，charCodeAt返回NaN。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'astr'")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//97")]),t._v("\n")])])]),a("p",[t._v("如果遇到码点大于 65536 的字符（四个字节的字符），必须连续使用两次charCodeAt，不仅读入charCodeAt(i)，还要读入charCodeAt(i+1)，\n将两个值放在一起，才能得到准确的字符。")]),t._v(" "),a("h3",{attrs:{id:"string-prototype-concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-concat"}},[t._v("#")]),t._v(" String.prototype.concat()")]),t._v(" "),a("p",[t._v("concat方法用于连接两个字符串，"),a("strong",[t._v("返回一个新字符串，不改变原字符串。")])]),t._v(" "),a("p",[t._v("该方法可以接受多个参数。")]),t._v(" "),a("p",[a("strong",[t._v("如果参数不是字符串，concat方法会将其先转为字符串，然后再连接。")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-slice"}},[t._v("#")]),t._v(" String.prototype.slice()")]),t._v(" "),a("p",[t._v("slice()方法用于从原字符串取出子字符串并返回，"),a("strong",[t._v("不改变原字符串。")])]),t._v(" "),a("p",[a("strong",[t._v("它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果省略第二个参数，则表示子字符串一直到原字符串结束。")])]),t._v(" "),a("p",[t._v("如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。")]),t._v(" "),a("p",[a("strong",[t._v("如果第一个参数大于第二个参数（正数情况下），slice()方法返回一个空字符串。")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-substring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-substring"}},[t._v("#")]),t._v(" String.prototype.substring()")]),t._v(" "),a("p",[t._v("substring方法用于从原字符串取出子字符串并返回，不改变原字符串，跟slice方法很相像。")]),t._v(" "),a("p",[a("strong",[t._v("它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果省略第二个参数，则表示子字符串一直到原字符串的结束。")])]),t._v(" "),a("p",[t._v("如果参数是负数，substring方法会自动将负数转为0")]),t._v(" "),a("p",[a("strong",[t._v("如果第一个参数大于第二个参数，substring方法会自动更换两个参数的位置。")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-substr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-substr"}},[t._v("#")]),t._v(" String.prototype.substr()")]),t._v(" "),a("p",[t._v("substr方法用于从原字符串取出子字符串并返回，不改变原字符串，跟slice和substring方法的作用相同。")]),t._v(" "),a("p",[t._v("substr方法的第一个参数是子字符串的开始位置（从0开始计算），"),a("strong",[t._v("第二个参数是子字符串的长度。")])]),t._v(" "),a("blockquote",[a("p",[t._v("区别于slcie，substring的结束位置")])]),t._v(" "),a("p",[t._v("如果省略第二个参数，则表示子字符串一直到原字符串的结束。")]),t._v(" "),a("p",[t._v("如果第一个参数是负数，表示倒数计算的字符位置。跟slice一样")]),t._v(" "),a("p",[a("strong",[t._v("如果第二个参数是负数，将被自动转为0（长度为0），因此会返回空字符串。")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-indexof-，string-prototype-lastindexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-indexof-，string-prototype-lastindexof"}},[t._v("#")]),t._v(" String.prototype.indexOf()，String.prototype.lastIndexOf()")]),t._v(" "),a("p",[t._v("indexOf方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回-1，就表示不匹配。")]),t._v(" "),a("blockquote",[a("p",[t._v("indexOf方法还可以接受第二个参数，表示从该位置开始向后匹配。")])]),t._v(" "),a("p",[t._v("lastIndexOf方法的用法跟indexOf方法一致，主要的区别是lastIndexOf从尾部开始匹配（可以理解为最后一次出现），indexOf则是从头部开始匹配。")]),t._v(" "),a("blockquote",[a("p",[t._v("lastIndexOf的第二个参数表示从该位置起向前匹配。")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-trim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-trim"}},[t._v("#")]),t._v(" String.prototype.trim()")]),t._v(" "),a("p",[t._v("trim方法用于去除字符串两端的空格，"),a("strong",[t._v("返回一个新字符串，不改变原字符串。")])]),t._v(" "),a("p",[t._v("该方法去除的不仅是空格，还包括制表符（\\t、\\v）、换行符（\\n）和回车符（\\r）。")]),t._v(" "),a("h3",{attrs:{id:"string-prototype-tolowercase-，string-prototype-touppercase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-tolowercase-，string-prototype-touppercase"}},[t._v("#")]),t._v(" String.prototype.toLowerCase()，String.prototype.toUpperCase()")]),t._v(" "),a("p",[t._v("toLowerCase方法用于将一个字符串全部转为小写，toUpperCase则是全部转为大写。")]),t._v(" "),a("p",[t._v("它们都返回一个新字符串，不改变原字符串。")]),t._v(" "),a("h3",{attrs:{id:"string-prototype-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match"}},[t._v("#")]),t._v(" String.prototype.match()")]),t._v(" "),a("p",[t._v("match方法用于确定原字符串是否匹配某个子字符串，"),a("strong",[t._v("返回一个数组，成员为匹配的第一个字符串。")])]),t._v(" "),a("p",[t._v("如果没有找到匹配，则返回null。")]),t._v(" "),a("p",[t._v("返回的数组还有index属性和input属性，分别表示匹配字符串开始的位置和原始字符串。")]),t._v(" "),a("p",[a("strong",[t._v("搭配正则使用")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-search-，string-prototype-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search-，string-prototype-replace"}},[t._v("#")]),t._v(" String.prototype.search()，String.prototype.replace()")]),t._v(" "),a("p",[t._v("search方法的用法基本等同于match，但是"),a("strong",[t._v("返回值为匹配的第一个位置。")])]),t._v(" "),a("p",[t._v("如果没有找到匹配，则返回-1。")]),t._v(" "),a("p",[t._v("replace方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。")]),t._v(" "),a("p",[a("strong",[t._v("两者都可以搭配正则使用")])]),t._v(" "),a("h3",{attrs:{id:"string-prototype-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-split"}},[t._v("#")]),t._v(" String.prototype.split()")]),t._v(" "),a("p",[t._v("split方法按照给定规则分割字符串，"),a("strong",[t._v("返回一个由分割出来的子字符串组成的数组。")])]),t._v(" "),a("p",[a("strong",[t._v("如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。")])]),t._v(" "),a("p",[a("strong",[t._v("如果省略参数，则返回数组的唯一成员就是原字符串。")])]),t._v(" "),a("p",[t._v("如果满足分割规则的两个部分紧邻着（即两个分割符中间没有其他字符），则返回数组之中会有一个空字符串。")]),t._v(" "),a("p",[a("code",[t._v("'a||c'.split('|') // ['a', '', 'c']")])]),t._v(" "),a("p",[t._v("如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。")]),t._v(" "),a("p",[t._v("split方法还可以接受第二个参数，限定返回数组的最大成员数。")]),t._v(" "),a("p",[t._v("可以配合正则使用")]),t._v(" "),a("h3",{attrs:{id:"replace实现trim的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace实现trim的功能"}},[t._v("#")]),t._v(" replace实现trim的功能⭐️")]),t._v(" "),a("p",[a("code",[t._v("str.replace(/^\\s+|\\s+$/g, '')")])]),t._v(" "),a("p",[t._v("\\s匹配空格（包括换行符、制表符、空格符等）, +表示数量为1或者n个")]),t._v(" "),a("h3",{attrs:{id:"substring和slice的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#substring和slice的区别"}},[t._v("#")]),t._v(" substring和slice的区别⭐️")]),t._v(" "),a("p",[t._v("两者都不会改变原字符串")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一个参数大于第二个参数（正数）时")]),t._v(" "),a("ul",[a("li",[t._v("slice()方法返回一个空字符串。")]),t._v(" "),a("li",[t._v("substring()会自动更换两个参数的位置。")])])]),t._v(" "),a("li",[a("p",[t._v("参数是负数时")]),t._v(" "),a("ul",[a("li",[t._v("slice()表示从结尾开始倒数计算的位置")]),t._v(" "),a("li",[t._v("substring()会自动将负数转为0。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("substr方法作用相同，但是第二个参数含义不同，为子串的长度（count），而不是end\n如果第一个参数是负数，表示倒数计算的字符位置。跟slice一样\n如果第二个参数是负数，将被自动转为0（长度为0），因此会返回空字符串。")])]),t._v(" "),a("h3",{attrs:{id:"parseint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[t._v("#")]),t._v(" parseInt⭐️")]),t._v(" "),a("p",[t._v("用于将字符串转为整数")]),t._v(" "),a("p",[a("strong",[t._v("如果字符串头尾有空格，空格会被自动过滤。")])]),t._v(" "),a("p",[t._v("如果parseInt的参数不是字符串，则会先转为字符串再转换。")]),t._v(" "),a("p",[t._v("字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，则不再进行下去，返回已经转换好的部分。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回NaN。")])]),t._v(" "),a("p",[a("strong",[t._v("parseInt方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。")])]),t._v(" "),a("p",[t._v("默认情况下，parseInt的第二个参数为10，即默认是十进制转十进制。")]),t._v(" "),a("p",[t._v("如果第二个参数不是数值，会被自动转为一个整数。")]),t._v(" "),a("p",[t._v("这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回NaN。")]),t._v(" "),a("p",[a("strong",[t._v("如果第二个参数是0、undefined和null，则直接忽略。")])]),t._v(" "),a("p",[t._v("如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回NaN。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("特殊")]),t._v(" "),a("ul",[a("li",[t._v("如果字符串以0x或0X开头，将其按照十六进制数解析。")]),t._v(" "),a("li",[t._v("如果字符串以0开头，将其按照10进制解析。")]),t._v(" "),a("li",[t._v("对于那些会自动转为科学计数法的数字，parseInt会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。")])])]),t._v(" "),a("h3",{attrs:{id:"parsefloat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsefloat"}},[t._v("#")]),t._v(" parseFloat⭐️")]),t._v(" "),a("p",[t._v("用于将一个字符串转为浮点数。")]),t._v(" "),a("p",[t._v("自动过滤字符串前后的空格。")]),t._v(" "),a("p",[a("strong",[t._v("如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回NaN。")])]),t._v(" "),a("p",[t._v("如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。")]),t._v(" "),a("p",[t._v("如果字符串符合科学计数法，则会进行相应的转换。")]),t._v(" "),a("h2",{attrs:{id:"boolean转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean转换规则"}},[t._v("#")]),t._v(" boolean转换规则⭐️")]),t._v(" "),a("p",[t._v("除了下面六个值被转为false之外，其他值都视为true。")]),t._v(" "),a("ul",[a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("false")]),t._v(" "),a("li",[t._v("0")]),t._v(" "),a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v("\"\"或''（空字符串）")])]),t._v(" "),a("p",[a("strong",[t._v("注意，空数组（[]）和空对象（{}）对应的布尔值，'0'都是true。")])]),t._v(" "),a("h2",{attrs:{id:"数据类型检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型检测"}},[t._v("#")]),t._v(" 数据类型检测")]),t._v(" "),a("ul",[a("li",[t._v("typeof")]),t._v(" "),a("li",[t._v("instanceof")]),t._v(" "),a("li",[t._v("Object.prototype.toString.call()")])]),t._v(" "),a("h2",{attrs:{id:"如何判断-object-是-object-还是-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断-object-是-object-还是-array"}},[t._v("#")]),t._v(" 如何判断 Object 是 Object 还是 Array")]),t._v(" "),a("ul",[a("li",[t._v("Object.prototype.toString.call()")]),t._v(" "),a("li",[t._v("Array.isArray()")])]),t._v(" "),a("p",[t._v("typeof 都返回object, instaceof 无法区分")]),t._v(" "),a("h3",{attrs:{id:"new-string-a-和-a-是一样的么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-string-a-和-a-是一样的么"}},[t._v("#")]),t._v(" new String('a') 和 'a' 是一样的么?")]),t._v(" "),a("p",[t._v("不一样，"),a("code",[t._v("'a' === new String('a') //false")])]),t._v(" "),a("p",[t._v("基本数据类型"),a("code",[t._v("string")]),t._v("和包装对象的区别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h2",{attrs:{id:"instanceof-的原理和弊端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-的原理和弊端"}},[t._v("#")]),t._v(" instanceof 的原理和弊端")]),t._v(" "),a("p",[t._v("instanceof运算符可以判断一个值是否为"),a("strong",[t._v("非null")]),t._v("的对象。**")]),t._v(" "),a("p",[a("strong",[t._v("instanceof的原理是检查右边构造函数的prototype属性，是否在左边对象的原型链上。")])]),t._v(" "),a("p",[a("strong",[t._v("有一种特殊情况，就是左边对象的原型链上，只有null对象。这时，instanceof判断会失真。")])]),t._v(" "),a("p",[a("strong",[t._v("不适用于原始类型的值")])]),t._v(" "),a("h3",{attrs:{id:"instanceof-object-的结果是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-object-的结果是什么"}},[t._v("#")]),t._v(" [] instanceof Object 的结果是什么:")]),t._v(" "),a("p",[t._v("true ，因为本质上，数组属于一种特殊的对象")]),t._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" ===⭐️")]),t._v(" "),a("p",[t._v("比较规则：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("不同类型的值")]),t._v(" "),a("p",[t._v("如果两个值的类型不同，直接返回false。")])]),t._v(" "),a("li",[a("p",[t._v("同一类的原始类型值")]),t._v(" "),a("p",[t._v("同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。")]),t._v(" "),a("p",[a("code",[t._v("1 === 0x1 // true")])])]),t._v(" "),a("li",[a("p",[t._v("复合类型值")]),t._v(" "),a("p",[a("strong",[t._v("两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//都存放在不同的内存地址")]),t._v("\n")])])]),a("p",[t._v("如果两个变量引用同一个对象，则它们相等。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" v2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[a("strong",[t._v("注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。")])])]),t._v(" "),a("li",[a("p",[t._v("NaN、undefined 和 null")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false，NaN不等于自身")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("由于变量声明后默认值是undefined，因此两个只声明未赋值的变量是相等的。")])])]),t._v(" "),a("p",[a("strong",[t._v("+0 === -0 返回true")])]),t._v(" "),a("p",[a("strong",[t._v("NaN === NaN 返回false")])]),t._v(" "),a("h2",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")]),t._v(" ==⭐️")]),t._v(" "),a("p",[t._v("相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("原始类型值")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 Number('true') === Number(true)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 NaN === 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 Number('') === 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 0 === 0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 Number('1') === Number(true)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 1 === 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n  123  \\t'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为字符串转为数字时，省略前置和后置的空格")]),t._v("\n")])])]),a("p",[a("strong",[t._v("字符串和布尔值都转为数值，然后再进行比较")])])]),t._v(" "),a("li",[a("p",[t._v("对象与原始类型值")]),t._v(" "),a("p",[t._v("对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。")]),t._v(" "),a("p",[t._v("具体来说，先调用对象的valueOf()方法，如果得到原始类型的值，就按照上一小节的规则，互相比较；")]),t._v(" "),a("p",[t._v("如果得到的还是对象，则再调用toString()方法，得到字符串形式，再进行比较。")]),t._v(" "),a("p",[a("code",[t._v("[1, 2] == '1,2' // true")])]),t._v(" "),a("p",[a("strong",[t._v("JavaScript 引擎会先对数组调用数组的valueOf()方法，由于返回的还是一个数组，所以会接着调用数组的toString()方法，得到字符串形式，")])]),t._v(" "),a("p",[t._v("再按照上一小节的规则进行比较。")])]),t._v(" "),a("li",[a("p",[t._v("undefined 和 null")]),t._v(" "),a("p",[a("strong",[t._v("undefined和null只有与自身比较，或者互相比较时，才会返回true；与其他类型的值比较时，结果都为false。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，严格相等也是true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，严格相等也是true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，严格相等为false")]),t._v("\n")])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/2019-06-01-043719.png",alt:"==总结"}})]),t._v(" "),a("h3",{attrs:{id:"和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" == 和 === 的区别")]),t._v(" "),a("p",[t._v("简单说，它们的区别是相等运算符（==）比较两个值是否相等，严格相等运算符（===）比较它们是否为“同一个值”。")]),t._v(" "),a("p",[t._v("如果两个值不是同一类型，严格相等运算符（===）直接返回false，而相等运算符（==）会将它们转换成同一个类型，再用严格相等运算符进行比较。")]),t._v(" "),a("h3",{attrs:{id:"-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[t._v("#")]),t._v(" [] == ![]")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n左边：\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[].toString() -> ''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n右边：\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [] 直接转boolean转成 true，然后取反变成 false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n所以 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 返回 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("h3",{attrs:{id:"说输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说输出"}},[t._v("#")]),t._v(" [] === []说输出")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false，因为比较的是两个数组是否指向同一个内存地址。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false, 因为比较的是两个数组是否指向同一个内存地址。")]),t._v("\n")])])]),a("h3",{attrs:{id:"_0-结果是什么，为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-结果是什么，为什么"}},[t._v("#")]),t._v(" [] == 0 结果是什么，为什么")]),t._v(" "),a("p",[t._v("true，严格相等则为false")]),t._v(" "),a("p",[t._v("根据规则为转换成原始类型的值，先valueOf(),再toString(),得到空字符串。Number('')为0")]),t._v(" "),a("h3",{attrs:{id:"结果是什么，为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结果是什么，为什么"}},[t._v("#")]),t._v(' [] == "" 结果是什么，为什么')]),t._v(" "),a("p",[t._v("true，严格相等则为false")]),t._v(" "),a("p",[t._v("根据规则为转换成原始类型的值，先valueOf(),再toString(),得到空字符串。Number('')为0")]),t._v(" "),a("h2",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof⭐️")]),t._v(" "),a("p",[t._v("typeof运算符可以返回一个值的数据类型。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("数值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"number"')])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"string"')])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"boolean"')])]),t._v(" "),a("tr",[a("td",[t._v("函数")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"function"')])]),t._v(" "),a("tr",[a("td",[t._v("对象")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"object"')])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"undefined"')])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"object"')])]),t._v(" "),a("tr",[a("td",[t._v("Symbol")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"symbol"')])]),t._v(" "),a("tr",[a("td",[t._v("BigInt")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('"bigint"')])])])]),t._v(" "),a("p",[t._v("除了null返回object之外，其余数据类型正常")]),t._v(" "),a("h3",{attrs:{id:"typeof-会是什么结果，怎么判断一个引用数据类型的变量是不是数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-会是什么结果，怎么判断一个引用数据类型的变量是不是数组"}},[t._v("#")]),t._v(" typeof []会是什么结果，怎么判断一个引用数据类型的变量是不是数组")]),t._v(" "),a("p",[t._v('"odject",即typeof无法区分对象和数组')]),t._v(" "),a("blockquote",[a("p",[t._v("暂且不论通过验证数组方法的方式进而判断")])]),t._v(" "),a("p",[t._v("判断是否为数组的方法：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Array.isArray()")])]),t._v(" "),a("li",[a("p",[t._v("Object.prototypeof.toString.call()")]),t._v(" "),a("blockquote",[a("p",[t._v('返回[object Array]"')])])]),t._v(" "),a("li",[a("p",[t._v("instanceof")])])]),t._v(" "),a("h2",{attrs:{id:"null-和-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-的区别"}},[t._v("#")]),t._v(" null 和 undefined 的区别")]),t._v(" "),a("p",[t._v("简单来说，undefined表示应该有值，但没有定义，null表示值存在但是为空，没有意义")]),t._v(" "),a("p",[t._v("null 和 undefined 转换成number数据时，null 默认转成 0，undefined 默认转成 NaN")]),t._v(" "),a("p",[t._v("在下列场景中应该使用null。")]),t._v(" "),a("ul",[a("li",[t._v("用来初始化一个变量，这个变量可能赋值为一个对象。")]),t._v(" "),a("li",[t._v("在作用域中不再需要使用某个对象时，把null赋值给那个变量解除引用，以释放内存")]),t._v(" "),a("li",[t._v("当函数的参数期望是对象时，用作参数的传入。")]),t._v(" "),a("li",[t._v("当函数的返回值期望是对象时，用作返回值传出。（比如符合条件返回对象，不符合返回null）")]),t._v(" "),a("li",[t._v("在正则捕获的时候，如果没有捕获到结果，默认也是null")]),t._v(" "),a("li",[t._v("在javascript的DOM元素获取中，如果没有获取到指定的元素对象，结果一般是null")])]),t._v(" "),a("blockquote",[a("p",[t._v("null作为对象原型链的终点")])]),t._v(" "),a("p",[t._v("还有以下一些场景不应当使用null")]),t._v(" "),a("ul",[a("li",[t._v("不要使用null来检测是否传入了某个参数。")]),t._v(" "),a("li",[t._v("不要用null来检测一个未初始化的变量。")])]),t._v(" "),a("p",[t._v("值为undefined的场景")]),t._v(" "),a("ul",[a("li",[t._v("定义了形参，没有传实参，显示undefined")]),t._v(" "),a("li",[t._v("对象属性名不存在时，显示undefined")]),t._v(" "),a("li",[t._v("函数没有写返回值，即没有写return，拿到的是undefined")]),t._v(" "),a("li",[t._v("写了return，但没有赋值，拿到的是undefined")])]),t._v(" "),a("h3",{attrs:{id:"为什么-typeof-null-等于-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-typeof-null-等于-object"}},[t._v("#")]),t._v(" 为什么 typeof null 等于 Object?")]),t._v(" "),a("p",[t._v("不同的对象在底层原理的存储是用二进制表示的，")]),t._v(" "),a("p",[t._v("在 javaScript中，如果二进制的前三位都为 0 的话，系统会判定为是 Object类型。")]),t._v(" "),a("p",[t._v("null的存储二进制是 000，也是前三位，所以系统判定 null为 Object类型。")]),t._v(" "),a("blockquote",[a("p",[t._v("第一版JavaScript把null当成object的一个特殊值")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("扩展")]),t._v(" "),a("p",[t._v("这个 bug 个第一版的 javaScript留下来的。俺其他的几个类型标志位：")]),t._v(" "),a("ul",[a("li",[t._v("000：对象类型。")]),t._v(" "),a("li",[t._v("1：整型，数据是31位带符号整数。")]),t._v(" "),a("li",[t._v("010：双精度类型，数据是双精度数字。")]),t._v(" "),a("li",[t._v("100：字符串，数据是字符串。")]),t._v(" "),a("li",[t._v("110：布尔类型，数据是布尔值。")])])]),t._v(" "),a("h2",{attrs:{id:"数据转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据转换"}},[t._v("#")]),t._v(" 数据转换⭐️")]),t._v(" "),a("h3",{attrs:{id:"对象转成原始类型的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象转成原始类型的值"}},[t._v("#")]),t._v(" 对象转成原始类型的值")]),t._v(" "),a("p",[t._v("首先，自动调用对象的valueOf方法。")]),t._v(" "),a("blockquote",[a("p",[t._v("一般来说，对象的valueOf方法总是返回对象自身")])]),t._v(" "),a("p",[t._v("这时再自动调用对象的toString方法，将其转为字符串。")]),t._v(" "),a("blockquote",[a("p",[t._v("对象的toString方法默认返回[object Object]")])]),t._v(" "),a("h3",{attrs:{id:"强制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制转换"}},[t._v("#")]),t._v(" 强制转换⭐️")]),t._v(" "),a("h4",{attrs:{id:"number-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-2"}},[t._v("#")]),t._v(" Number()")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原始类型值⭐️")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("转换结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("数值")]),t._v(" "),a("td",[t._v("还是数值")])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("如果可以被解析为数值，则转换为相应的数值，如果不行则为NaN")])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("true 转成 1，false 转成 0")])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v("转成NaN")])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("转成0")])])])]),t._v(" "),a("p",[a("strong",[t._v("空字符串转为0，同时只要一个字符无法转成数值，整个字符串就会被转为NaN。（仍会过滤前后的空格）")])])]),t._v(" "),a("li",[a("p",[t._v("对象")]),t._v(" "),a("p",[t._v("简单的规则是，Number方法的参数是对象时，将返回NaN，除非是包含单个数值的数组。")]),t._v(" "),a("blockquote",[a("p",[t._v("调用了valueOf方法，不是原始类型再执行toString方法，如果最后仍返回对象则报错（TypeError）")])])])]),t._v(" "),a("h4",{attrs:{id:"string-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-2"}},[t._v("#")]),t._v(" String()")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原始类型值")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("转换结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("数值")]),t._v(" "),a("td",[t._v("转为相应的字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("转换后还是原来的值。")])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v('true转为字符串"true"，false转为字符串"false"。')])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v('转为字符串"undefined"。')])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v('转为字符串"null"。')])])])])]),t._v(" "),a("li",[a("p",[t._v("对象")]),t._v(" "),a("p",[t._v("如果是对象，返回一个类型字符串；")]),t._v(" "),a("p",[t._v("如果是数组，返回该数组的字符串形式。"),a("strong",[t._v("空数组返回空")])]),t._v(" "),a("blockquote",[a("p",[t._v("先执行toString方法，不是原始类型再执行valueOf方法，最后仍返回对象的话则报错（TypeError）")])])])]),t._v(" "),a("h4",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean()")]),t._v(" "),a("p",[t._v("除了以下五个值的转换结果为false，其他的值全部为true。")]),t._v(" "),a("ul",[a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("0（包含-0和+0）")]),t._v(" "),a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v("''（空字符串）")])]),t._v(" "),a("blockquote",[a("p",[t._v("少了false")])]),t._v(" "),a("p",[a("strong",[t._v("所有对象（包括空对象）的转换结果都是true，甚至连false对应的布尔对象new Boolean(false)也是true")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),a("p",[t._v("所有对象的布尔值都是true，这是因为 JavaScript 语言设计的时候，出于性能的考虑，")]),t._v(" "),a("p",[t._v("如果对象需要计算才能得到布尔值，对于obj1 && obj2这样的场景，可能会需要较多的计算。")]),t._v(" "),a("p",[t._v("为了保证性能，就统一规定，对象的布尔值为true。")])]),t._v(" "),a("h3",{attrs:{id:"隐式（自动）转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式（自动）转换"}},[t._v("#")]),t._v(" 隐式（自动）转换")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("不同类型的数据互相运算。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "5"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "5function (){}"')]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("对非布尔值类型的数据求布尔值。")])]),t._v(" "),a("li",[a("p",[t._v("对非数值类型的值使用一元运算符（即+和-）。")]),t._v(" "),a("p",[t._v("除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。如果该位置既可以是字符串，也可能是数值，那么默认转为数值。")])]),t._v(" "),a("h3",{attrs:{id:"_1-undefined，1-true，1-false-，1-1-null，1-1-，1-，-1-，"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-undefined，1-true，1-false-，1-1-null，1-1-，1-，-1-，"}},[t._v("#")]),t._v(" 1+undefined，1+true，1+'false'，1+[],1+null，1+'1'，1+{}，'1'+{}，")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("，\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN, 因为undefined转成数值的时候为 NaN")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2，等同于 1 + 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'false'")]),t._v("，\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ‘1false’，1被转成字符串，再与'false'拼接")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1',[] 执行valueOf()后还是数组，再执行toString()转换成字符串")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("，\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("，\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '11'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1[object Object]"，{}执行valueOf方法后还是对象，继续执行toString方法才变成字符串')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1[object Object]"')]),t._v("\n")])])]),a("h2",{attrs:{id:"console-log-typeof-typeof-typeof-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-log-typeof-typeof-typeof-null"}},[t._v("#")]),t._v(" console.log(typeof typeof typeof null)")]),t._v(" "),a("p",[t._v("string，第一个typeof null 返回的结果是'Object',为字符串类型")]),t._v(" "),a("blockquote",[a("p",[t._v("console.log(typeof typeof null)也是string")])]),t._v(" "),a("h2",{attrs:{id:"判断是否是对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断是否是对象"}},[t._v("#")]),t._v(" 判断是否是对象")]),t._v(" "),a("ul",[a("li",[t._v("typeof")]),t._v(" "),a("li",[t._v("instanceof")]),t._v(" "),a("li",[t._v("Object.prototype.toString.call()")])]),t._v(" "),a("h3",{attrs:{id:"判断是否是空对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断是否是空对象"}},[t._v("#")]),t._v(" 判断是否是空对象")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("for in")])]),t._v(" "),a("li",[a("p",[t._v("for of")])]),t._v(" "),a("li",[a("p",[t._v("JSON.stringify() == '{}'")]),t._v(" "),a("p",[t._v("将对象转换成JSON 后再判断是否为{}")])]),t._v(" "),a("li",[a("p",[t._v("Object.getOwnPropertyNames()")]),t._v(" "),a("p",[t._v("获取属性值，然后通过判断返回的数组的长度是否为0")])]),t._v(" "),a("li",[a("p",[t._v("Object.keys()")])]),t._v(" "),a("li",[a("p",[t._v("Object.values()")])])]),t._v(" "),a("p",[t._v("但是Symbol值会例外，因为获取不到，所以需要用上Object.getOwnPropertySymbols()，或者是Reflect.ownKeys()")]),t._v(" "),a("h2",{attrs:{id:"如何判断一个空的值？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个空的值？"}},[t._v("#")]),t._v(" 如何判断一个空的值？")]),t._v(" "),a("p",[t._v("可能是很多空白符，可能是null，可能是NaN")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//    var a = "";')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//    var a = " ";')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    var a = null;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    var a = undefined;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    var a = [];")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    var a = {};")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    var a = NaN;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能用 === 运算来测试某个值是否是未定义的")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为undefined"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为null"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String    ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ""')]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"为''\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意' ' == ''，返回false，但是Number(' '),返回0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// " "')]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"为' '\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "",null,undefined,NaN')]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为空"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "",[]')]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为空数组"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "",[]')]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为空数组"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为NaN"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("（非数值会先转换为数值再进行判断）、Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("也可以判断"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n")])])]),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("h3",{attrs:{id:"-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[t._v("#")]),t._v(" +")]),t._v(" "),a("p",[t._v("JavaScript 允许非数值的相加。")]),t._v(" "),a("ul",[a("li",[t._v("如果是两个字符串相加，这时加法运算符会变成连接运算符，返回一个新的字符串，将两个原字符串连接在一起。")]),t._v(" "),a("li",[t._v("如果一个运算子是字符串，另一个运算子是非字符串，这时非字符串会转成字符串，再连接在一起。")]),t._v(" "),a("li",[t._v("如果运算子是对象，必须先转成原始类型的值(先执行valueOf方法)，然后再相加。"),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Object]2"')]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("如果运算子是一个Date对象的实例，那么会优先执行toString方法。")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("作用")]),t._v(" "),a("p",[a("strong",[t._v("数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n\n")])])])]),t._v(" "),a("h3",{attrs:{id:"取反运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取反运算符（-）"}},[t._v("#")]),t._v(" 取反运算符（!）")]),t._v(" "),a("p",[t._v("对于非布尔值，取反运算符会将其转为布尔值。")]),t._v(" "),a("p",[t._v("以下六个值取反后为true，其他值都为false。")]),t._v(" "),a("ul",[a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("false")]),t._v(" "),a("li",[t._v("0")]),t._v(" "),a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v("空字符串（''）")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("使用")]),t._v(" "),a("p",[t._v("如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，")]),t._v(" "),a("p",[t._v("与Boolean函数的作用相同。这是一种常用的类型转换的写法。")])]),t._v(" "),a("h3",{attrs:{id:"且运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#且运算符（-）"}},[t._v("#")]),t._v(" 且运算符（&&）")]),t._v(" "),a("p",[t._v("它的运算规则是：如果第一个运算子的布尔值为true，")]),t._v(" "),a("p",[a("strong",[t._v("则返回第二个运算子的值（注意是值，不是布尔值）")]),t._v("；")]),t._v(" "),a("h3",{attrs:{id:"位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),a("p",[t._v("位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。")]),t._v(" "),a("p",[t._v("另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，")]),t._v(" "),a("p",[t._v("但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数")]),t._v(" "),a("p",[a("code",[t._v("i = i | 0;")])]),t._v(" "),a("blockquote",[a("p",[t._v("上面这行代码的意思，就是将i（不管是整数或小数）转为32位整数。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("使用")]),t._v(" "),a("p",[t._v("利用这个特性，可以写出一个函数，将任意数值转为32位整数。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toInt32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("对于大于或等于2的32次方的整数，大于32位的数位都会被舍去。")])])]),t._v(" "),a("p",[a("strong",[t._v("位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。")])]),t._v(" "),a("p",[t._v("所以，将一个小数与0进行二进制或运算，等同于对该数去除小数部分，即取整数位。")]),t._v(" "),a("p",[a("strong",[t._v("使用二进制否运算取整，是所有取整方法中最快的一种。")])]),t._v(" "),a("blockquote",[a("p",[t._v("进行二进制否运算，JavaScript 引擎会先调用Number函数，将字符串转为数值。")])]),t._v(" "),a("p",[a("strong",[t._v("一个数与自身的取反值相加，等于-1。")])]),t._v(" "),a("blockquote",[a("p",[t._v("正数补码等于原码，负数补码等于原码除符号位外所有位取反后+1，\n已知一个数的补码，求原码的操作其实就是对该补码再求补码")])]),t._v(" "),a("h3",{attrs:{id:"左移运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左移运算符（-）"}},[t._v("#")]),t._v(" 左移运算符（<<）")]),t._v(" "),a("p",[t._v("左移运算符（<<）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。")]),t._v(" "),a("p",[a("strong",[t._v("向左移动的时候，最高位的符号位是一起移动的。")])]),t._v(" "),a("p",[a("strong",[t._v("如果左移0位，就相当于将该数值转为32位整数，等同于取整")])]),t._v(" "),a("blockquote",[a("p",[t._v("优先级低于加减")])]),t._v(" "),a("h3",{attrs:{id:"右移运算符（-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右移运算符（-）"}},[t._v("#")]),t._v(" 右移运算符（>>）")]),t._v(" "),a("p",[t._v("右移运算符（>>）表示将一个数的二进制值向右移动指定的位数。")]),t._v(" "),a("p",[t._v("如果是正数，头部全部补0；如果是负数，头部全部补1。")]),t._v(" "),a("h3",{attrs:{id:"void运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void运算符"}},[t._v("#")]),t._v(" void运算符")]),t._v(" "),a("p",[t._v("void运算符的作用是执行一个表达式，然后不返回任何值，或者说返回undefined。")]),t._v(" "),a("p",[t._v("写法：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),a("p",[t._v("这个运算符的主要用途是浏览器的书签工具（Bookmarklet），以及在超级链接中插入代码防止网页跳转。")]),t._v(" "),a("h3",{attrs:{id:"逗号运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逗号运算符"}},[t._v("#")]),t._v(" 逗号运算符")]),t._v(" "),a("p",[t._v("逗号运算符用于对两个表达式求值，并返回后一个表达式的值。")]),t._v(" "),a("h3",{attrs:{id:"圆括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#圆括号"}},[t._v("#")]),t._v(" 圆括号")]),t._v(" "),a("p",[t._v("圆括号不是运算符，而是一种语法结构。")]),t._v(" "),a("p",[t._v("它一共有两种用法：")]),t._v(" "),a("ul",[a("li",[t._v("一种是把表达式放在圆括号之中，提升运算的优先级；")]),t._v(" "),a("li",[t._v("另一种是跟在函数的后面，作用是调用函数。")])]),t._v(" "),a("blockquote",[a("p",[t._v("函数放在圆括号中，会返回函数本身。")])]),t._v(" "),a("h3",{attrs:{id:"-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[t._v("#")]),t._v(" **")]),t._v(" "),a("p",[t._v("指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于 2 ** (3 ** 2)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n")])])]),a("p",[t._v("赋值运算符（=）和三元条件运算符（?:）也是右结合")]),t._v(" "),a("p",[t._v("ES2016 新增")])])}),[],!1,null,null,null);s.default=r.exports}}]);