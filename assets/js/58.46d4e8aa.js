(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{317:function(e,t,o){"use strict";o.r(t);var a=o(9),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("div",{staticClass:"custom-block warning"},[o("p",{staticClass:"custom-block-title"},[e._v("说明")]),e._v(" "),o("p",[e._v("查阅文档使用")])]),e._v(" "),o("h2",{attrs:{id:"node接口"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node接口"}},[e._v("#")]),e._v(" Node接口")]),e._v(" "),o("h3",{attrs:{id:"node属性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node属性"}},[e._v("#")]),e._v(" Node属性")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-nodetype"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nodetype"}},[e._v("#")]),e._v(" Node.prototype.nodeType")]),e._v(" "),o("p",[e._v("nodeType属性返回一个整数值，表示节点的类型。")]),e._v(" "),o("p",[e._v("不同节点的nodeType属性值和对应的常量如下。")]),e._v(" "),o("ul",[o("li",[e._v("文档节点（document）：9，对应常量Node.DOCUMENT_NODE")]),e._v(" "),o("li",[e._v("元素节点（element）：1，对应常量Node.ELEMENT_NODE")]),e._v(" "),o("li",[e._v("属性节点（attr）：2，对应常量Node.ATTRIBUTE_NODE")]),e._v(" "),o("li",[e._v("文本节点（text）：3，对应常量Node.TEXT_NODE")]),e._v(" "),o("li",[e._v("文档片断节点（DocumentFragment）：11，对应常量Node.DOCUMENT_FRAGMENT_NODE")]),e._v(" "),o("li",[e._v("文档类型节点（DocumentType）：10，对应常量Node.DOCUMENT_TYPE_NODE")]),e._v(" "),o("li",[e._v("注释节点（Comment）：8，对应常量Node.COMMENT_NODE")])]),e._v(" "),o("h4",{attrs:{id:"node-prototype-nodename"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nodename"}},[e._v("#")]),e._v(" Node.prototype.nodeName")]),e._v(" "),o("p",[e._v("nodeName属性返回节点的名称。")]),e._v(" "),o("p",[e._v("不同节点的nodeName属性值如下。")]),e._v(" "),o("ul",[o("li",[e._v("文档节点（document）：#document")]),e._v(" "),o("li",[e._v("元素节点（element）：大写的标签名")]),e._v(" "),o("li",[e._v("属性节点（attr）：属性的名称")]),e._v(" "),o("li",[e._v("文本节点（text）：#text")]),e._v(" "),o("li",[e._v("文档片断节点（DocumentFragment）：#document-fragment")]),e._v(" "),o("li",[e._v("文档类型节点（DocumentType）：文档的类型")]),e._v(" "),o("li",[e._v("注释节点（Comment）：#comment")])]),e._v(" "),o("h4",{attrs:{id:"node-prototype-nodevalue"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nodevalue"}},[e._v("#")]),e._v(" Node.prototype.nodeValue")]),e._v(" "),o("p",[e._v("nodeValue属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。")]),e._v(" "),o("p",[e._v("只有文本节点（text）、注释节点（comment）和属性节点（attr）有文本值，因此这三类节点的nodeValue可以返回结果，")]),e._v(" "),o("p",[e._v("其他类型的节点一律返回null。")]),e._v(" "),o("p",[e._v("同样的，也只有这三类节点可以设置nodeValue属性的值，其他类型的节点设置无效。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-textcontent"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-textcontent"}},[e._v("#")]),e._v(" Node.prototype.textContent")]),e._v(" "),o("p",[e._v("textContent属性返回当前节点和它的所有后代节点的文本内容。")]),e._v(" "),o("p",[e._v("textContent属性自动忽略当前节点内部的 HTML 标签，返回所有文本内容。")]),e._v(" "),o("p",[e._v("该属性是可读写的，设置该属性的值，会用一个新的文本节点，替换所有原来的子节点。")]),e._v(" "),o("p",[e._v("它还有一个好处，**就是自动对 HTML 标签转义。**这很适合用于用户提供的内容。")]),e._v(" "),o("p",[e._v("对于文本节点（text）、注释节点（comment）和属性节点（attr），textContent 属性的值与 nodeValue 属性相同。")]),e._v(" "),o("p",[e._v("对于其他类型的节点，该属性会将每个子节点（不包括注释节点）的内容连接在一起返回。")]),e._v(" "),o("p",[e._v("如果一个节点没有子节点，则返回空字符串。")]),e._v(" "),o("p",[e._v("文档节点（document）和文档类型节点（doctype）的textContent属性为null。")]),e._v(" "),o("p",[e._v("如果要读取整个文档的内容，可以使用document.documentElement.textContent。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-baseuri"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-baseuri"}},[e._v("#")]),e._v(" Node.prototype.baseURI")]),e._v(" "),o("p",[e._v("baseURI属性返回一个字符串，表示当前网页的绝对路径。")]),e._v(" "),o("p",[e._v("浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。")]),e._v(" "),o("p",[e._v("如果无法读到网页的 URL，baseURI属性返回null。")]),e._v(" "),o("p",[e._v("该属性的值一般由当前网址的 URL（即window.location属性）决定，")]),e._v(" "),o("p",[e._v("但是可以使用 HTML 的base标签，改变该属性的值。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-ownerdocument"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-ownerdocument"}},[e._v("#")]),e._v(" Node.prototype.ownerDocument")]),e._v(" "),o("p",[e._v("Node.ownerDocument属性返回当前节点所在的顶层文档对象，即document对象。")]),e._v(" "),o("blockquote",[o("p",[e._v("document对象本身的ownerDocument属性，返回null。")])]),e._v(" "),o("h4",{attrs:{id:"node-prototype-nextsibling"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nextsibling"}},[e._v("#")]),e._v(" Node.prototype.nextSibling")]),e._v(" "),o("p",[e._v("Node.nextSibling属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回null。")]),e._v(" "),o("p",[o("strong",[e._v("该属性还包括文本节点和注释节点（"),e._v("）。")])]),e._v(" "),o("p",[e._v("因此如果当前节点后面有空格，该属性会返回一个文本节点，内容为空格。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-previoussibling"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-previoussibling"}},[e._v("#")]),e._v(" Node.prototype.previousSibling")]),e._v(" "),o("p",[e._v("previousSibling属性返回当前节点前面的、距离最近的一个同级节点。")]),e._v(" "),o("p",[e._v("如果当前节点前面没有同级节点，则返回null。")]),e._v(" "),o("p",[e._v("注意，该属性还包括文本节点和注释节点。")]),e._v(" "),o("p",[e._v("因此如果当前节点前面有空格，该属性会返回一个文本节点，内容为空格。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-parentnode"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-parentnode"}},[e._v("#")]),e._v(" Node.prototype.parentNode")]),e._v(" "),o("p",[e._v("parentNode属性返回当前节点的父节点。")]),e._v(" "),o("p",[e._v("对于一个节点来说，它的父节点只可能是三种类型：元素节点（element）、文档节点（document）和文档片段节点（documentfragment）。")]),e._v(" "),o("p",[e._v("文档节点（document）和文档片段节点（documentfragment）的父节点都是null。")]),e._v(" "),o("p",[e._v("另外，对于那些生成后还没插入 DOM 树的节点，父节点也是null。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-parentelement"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-parentelement"}},[e._v("#")]),e._v(" Node.prototype.parentElement")]),e._v(" "),o("p",[e._v("parentElement属性返回当前节点的父元素节点。")]),e._v(" "),o("p",[e._v("如果当前节点没有父节点，或者父节点类型不是元素节点，则返回null。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-firstchild，node-prototype-lastchild"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-firstchild，node-prototype-lastchild"}},[e._v("#")]),e._v(" Node.prototype.firstChild，Node.prototype.lastChild")]),e._v(" "),o("p",[e._v("firstChild属性返回当前节点的第一个子节点，如果当前节点没有子节点，则返回null。")]),e._v(" "),o("p",[e._v("firstChild返回的除了元素节点，还可能是文本节点或注释节点")]),e._v(" "),o("p",[e._v("lastChild属性返回当前节点的最后一个子节点，")]),e._v(" "),o("p",[e._v("如果当前节点没有子节点，则返回null。用法与firstChild属性相同。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-childnodes"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-childnodes"}},[e._v("#")]),e._v(" Node.prototype.childNodes")]),e._v(" "),o("p",[e._v("childNodes属性返回一个类似数组的对象（NodeList集合），成员包括当前节点的所有子节点。")]),e._v(" "),o("blockquote",[o("p",[e._v("文档节点（document）就有两个子节点：文档类型节点（docType）和 HTML 根元素节点。")])]),e._v(" "),o("p",[e._v("除了元素节点，childNodes属性的返回值还包括文本节点和注释节点。")]),e._v(" "),o("p",[e._v("如果当前节点不包括任何子节点，则返回一个空的NodeList集合。")]),e._v(" "),o("p",[o("strong",[e._v("由于NodeList对象是一个动态集合，一旦子节点发生变化，立刻会反映在返回结果之中。")])]),e._v(" "),o("h4",{attrs:{id:"node-prototype-isconnected"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-isconnected"}},[e._v("#")]),e._v(" Node.prototype.isConnected")]),e._v(" "),o("p",[e._v("isConnected属性返回一个布尔值，表示当前节点是否在文档之中。")]),e._v(" "),o("h3",{attrs:{id:"node方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node方法"}},[e._v("#")]),e._v(" Node方法")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-appendchild"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-appendchild"}},[e._v("#")]),e._v(" Node.prototype.appendChild()")]),e._v(" "),o("p",[e._v("appendChild()方法接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。")]),e._v(" "),o("p",[o("strong",[e._v("该方法的返回值就是插入文档的子节点。")])]),e._v(" "),o("p",[e._v("如果参数节点是 DOM 已经存在的节点，appendChild()方法会将其从原来的位置，移动到尾部。")]),e._v(" "),o("p",[e._v("如果appendChild()方法的参数是DocumentFragment节点，那么插入的是DocumentFragment的所有子节点，而不是DocumentFragment节点本身。")]),e._v(" "),o("p",[e._v("返回值是一个空的DocumentFragment节点。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-haschildnodes"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-haschildnodes"}},[e._v("#")]),e._v(" Node.prototype.hasChildNodes()")]),e._v(" "),o("p",[e._v("hasChildNodes方法返回一个布尔值，表示当前节点是否有子节点。")]),e._v(" "),o("p",[e._v("子节点包括所有类型的节点，并不仅仅是元素节点。哪怕节点只包含一个空格，hasChildNodes方法也会返回true。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-clonenode"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-clonenode"}},[e._v("#")]),e._v(" Node.prototype.cloneNode()")]),e._v(" "),o("p",[e._v("cloneNode方法用于克隆一个节点。它接受一个布尔值作为参数，表示是否同时克隆子节点。")]),e._v(" "),o("p",[e._v("它的返回值是一个克隆出来的新节点。")]),e._v(" "),o("p",[e._v("使用注意点。")]),e._v(" "),o("ol",[o("li",[e._v("克隆一个节点，会拷贝该节点的所有属性，但是会丧失addEventListener方法和"),o("code",[e._v("on####")]),e._v("属性（如"),o("code",[e._v("node.onclick = fn")]),e._v("），添加在这个节点上的事件回调函数。")]),e._v(" "),o("li",[e._v("该方法返回的节点不在文档之中，即没有任何父节点，必须使用诸如Node.appendChild这样的方法添加到文档之中。")]),e._v(" "),o("li",[e._v('克隆一个节点之后，DOM 有可能出现两个有相同id属性（即id="xxx"）的网页元素，这时应该修改其中一个元素的id属性。如果原节点有name属性，可能也需要修改。')])]),e._v(" "),o("h4",{attrs:{id:"node-prototype-insertbefore"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-insertbefore"}},[e._v("#")]),e._v(" Node.prototype.insertBefore()")]),e._v(" "),o("p",[e._v("insertBefore方法用于将某个节点插入父节点内部的指定位置。")]),e._v(" "),o("p",[o("code",[e._v("var insertedNode = parentNode.insertBefore(newNode, referenceNode);")])]),e._v(" "),o("p",[e._v("第一个参数是所要插入的节点newNode，第二个参数是父节点parentNode内部的一个子节点referenceNode。")]),e._v(" "),o("p",[e._v("newNode将插在referenceNode这个子节点的前面。")]),e._v(" "),o("p",[e._v("返回值是插入的新节点newNode。")]),e._v(" "),o("p",[e._v("如果insertBefore方法的第二个参数为null，则新节点将插在当前节点内部的最后位置，即变成最后一个子节点。")]),e._v(" "),o("p",[e._v("如果所要插入的节点是当前 DOM 现有的节点，则该节点将从原有的位置移除，插入新的位置。")]),e._v(" "),o("p",[e._v("由于不存在insertAfter方法，如果新节点要插在父节点的某个子节点后面，可以用insertBefore方法结合nextSibling属性模拟。")]),e._v(" "),o("blockquote",[o("p",[e._v("parent.insertBefore(s1, s2.nextSibling);")])]),e._v(" "),o("p",[e._v("如果要插入的节点是DocumentFragment类型，那么插入的将是DocumentFragment的所有子节点，而不是DocumentFragment节点本身。")]),e._v(" "),o("p",[e._v("返回值将是一个空的DocumentFragment节点。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-removechild"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-removechild"}},[e._v("#")]),e._v(" Node.prototype.removeChild()")]),e._v(" "),o("p",[e._v("removeChild方法接受一个子节点作为参数，用于从当前节点移除该子节点。")]),e._v(" "),o("p",[e._v("返回值是移除的子节点。")]),e._v(" "),o("p",[e._v("被移除的节点依然存在于内存之中，但不再是 DOM 的一部分。")]),e._v(" "),o("p",[e._v("所以，一个节点移除以后，依然可以使用它，比如插入到另一个节点下面。")]),e._v(" "),o("p",[e._v("移除当前节点的所有子节点。")]),e._v(" "),o("div",{staticClass:"language-javascript extra-class"},[o("pre",{pre:!0,attrs:{class:"language-javascript"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" element "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" document"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("getElementById")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[e._v("'top'")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("element"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("firstChild"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\nelement"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("removeChild")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("element"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("firstChild"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),o("h4",{attrs:{id:"node-prototype-replacechild"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-replacechild"}},[e._v("#")]),e._v(" Node.prototype.replaceChild()")]),e._v(" "),o("p",[e._v("replaceChild方法用于将一个新的节点，替换当前节点的某一个子节点。")]),e._v(" "),o("p",[o("code",[e._v("var replacedNode = parentNode.replaceChild(newChild, oldChild);")])]),e._v(" "),o("p",[e._v("replaceChild方法接受两个参数，第一个参数newChild是用来替换的新节点，第二个参数oldChild是将要替换走的子节点。")]),e._v(" "),o("p",[e._v("返回值是替换走的那个节点oldChild。")]),e._v(" "),o("blockquote",[o("p",[e._v("insertNode()返回新插入的节点")])]),e._v(" "),o("h4",{attrs:{id:"node-prototype-contains"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-contains"}},[e._v("#")]),e._v(" Node.prototype.contains()⭐️")]),e._v(" "),o("p",[e._v("contains方法返回一个布尔值，表示参数节点是否满足以下三个条件之一。")]),e._v(" "),o("ul",[o("li",[e._v("参数节点为当前节点。")]),e._v(" "),o("li",[e._v("参数节点为当前节点的子节点。")]),e._v(" "),o("li",[e._v("参数节点为当前节点的后代节点。")])]),e._v(" "),o("p",[e._v("当前节点传入contains方法，返回true。")]),e._v(" "),o("p",[o("code",[e._v("nodeA.contains(nodeA) // true")])]),e._v(" "),o("h4",{attrs:{id:"node-prototype-comparedocumentposition"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-comparedocumentposition"}},[e._v("#")]),e._v(" Node.prototype.compareDocumentPosition()")]),e._v(" "),o("p",[e._v("compareDocumentPosition方法的用法，与contains方法完全一致.")]),e._v(" "),o("p",[e._v("返回一个六个比特位的二进制值，表示参数节点与当前节点的关系。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-isequalnode-，node-prototype-issamenode"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-isequalnode-，node-prototype-issamenode"}},[e._v("#")]),e._v(" Node.prototype.isEqualNode()，Node.prototype.isSameNode()")]),e._v(" "),o("p",[e._v("isEqualNode方法返回一个布尔值，用于检查两个节点是否相等。")]),e._v(" "),o("p",[e._v("所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。")]),e._v(" "),o("p",[e._v("isSameNode方法返回一个布尔值，表示两个节点是否为同一个节点。")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-normalize"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-normalize"}},[e._v("#")]),e._v(" Node.prototype.normalize()")]),e._v(" "),o("p",[e._v("normalize方法用于清理当前节点内部的所有文本节点（text）。")]),e._v(" "),o("p",[e._v("它会去除空的文本节点，并且将毗邻的文本节点合并成一个，")]),e._v(" "),o("p",[e._v("也就是说不存在空的文本节点，以及毗邻的文本节点。")]),e._v(" "),o("p",[e._v("该方法是Text.splitText的逆方法")]),e._v(" "),o("h4",{attrs:{id:"node-prototype-getrootnode"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-getrootnode"}},[e._v("#")]),e._v(" Node.prototype.getRootNode()")]),e._v(" "),o("p",[e._v("getRootNode()方法返回当前节点所在文档的根节点document，与ownerDocument属性的作用相同。")]),e._v(" "),o("div",{staticClass:"language-javascript extra-class"},[o("pre",{pre:!0,attrs:{class:"language-javascript"}},[o("code",[e._v("document"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("firstChild"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("getRootNode")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" document"),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// true")]),e._v("\ndocument"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("firstChild"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("getRootNode")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" document"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("firstChild"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ownerDocument"),o("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// true")]),e._v("\n")])])]),o("p",[e._v("该方法可用于document节点自身，这一点与document.ownerDocument不同。")]),e._v(" "),o("h3",{attrs:{id:"判断一个节点的子节点是否为空-satr"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#判断一个节点的子节点是否为空-satr"}},[e._v("#")]),e._v(" 判断一个节点的子节点是否为空:satr:")]),e._v(" "),o("ul",[o("li",[e._v("node.hasChildNodes()")]),e._v(" "),o("li",[e._v("node.firstChild !== null")]),e._v(" "),o("li",[e._v("node.childNodes && node.childNodes.length > 0")])]),e._v(" "),o("h2",{attrs:{id:"parentnode-接口"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-接口"}},[e._v("#")]),e._v(" ParentNode 接口")]),e._v(" "),o("p",[e._v("由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，")]),e._v(" "),o("p",[e._v("因此只有这三类节点会拥有ParentNode接口。")]),e._v(" "),o("h3",{attrs:{id:"parentnode-children"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-children"}},[e._v("#")]),e._v(" ParentNode.children")]),e._v(" "),o("p",[e._v("children属性返回一个HTMLCollection实例，成员是当前节点的所有元素子节点。该属性只读。")]),e._v(" "),o("p",[e._v("children属性只包括元素子节点，不包括其他类型的子节点（比如文本子节点）。")]),e._v(" "),o("p",[e._v("如果没有元素类型的子节点，返回值HTMLCollection实例的length属性为0。")]),e._v(" "),o("h3",{attrs:{id:"parentnode-firstelementchild"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-firstelementchild"}},[e._v("#")]),e._v(" ParentNode.firstElementChild")]),e._v(" "),o("p",[e._v("firstElementChild属性返回当前节点的第一个元素子节点。如果没有任何元素子节点，则返回null。")]),e._v(" "),o("h3",{attrs:{id:"parentnode-lastelementchild"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-lastelementchild"}},[e._v("#")]),e._v(" ParentNode.lastElementChild")]),e._v(" "),o("p",[e._v("lastElementChild属性返回当前节点的最后一个元素子节点，如果不存在任何元素子节点，则返回null。")]),e._v(" "),o("h3",{attrs:{id:"parentnode-childelementcount"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-childelementcount"}},[e._v("#")]),e._v(" ParentNode.childElementCount")]),e._v(" "),o("p",[e._v("childElementCount属性返回一个整数，表示当前节点的所有元素子节点的数目。如果不包含任何元素子节点，则返回0。")]),e._v(" "),o("blockquote",[o("p",[e._v("ParentNode.children的length属性")])]),e._v(" "),o("h3",{attrs:{id:"parentnode-append"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-append"}},[e._v("#")]),e._v(" ParentNode.append()")]),e._v(" "),o("p",[e._v("append()方法为当前节点追加一个或多个子节点，位置是最后一个元素子节点的后面。")]),e._v(" "),o("p",[e._v("该方法不仅可以添加元素子节点（参数为元素节点），还可以添加文本子节点（参数为字符串）。")]),e._v(" "),o("p",[e._v("该方法没有返回值。")]),e._v(" "),o("p",[e._v("注意，该方法与Node.prototype.appendChild()方法有三点不同。")]),e._v(" "),o("ul",[o("li",[e._v("append()允许字符串作为参数，appendChild()只允许子节点作为参数。")]),e._v(" "),o("li",[e._v("append()没有返回值，而appendChild()返回添加的子节点。")]),e._v(" "),o("li",[e._v("append()可以添加多个子节点和字符串（即允许多个参数），appendChild()只能添加一个节点（即只允许一个参数）。")])]),e._v(" "),o("h3",{attrs:{id:"parentnode-prepend"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-prepend"}},[e._v("#")]),e._v(" ParentNode.prepend()")]),e._v(" "),o("p",[e._v("prepend()方法为当前节点追加一个或多个子节点，位置是第一个元素子节点的前面。")]),e._v(" "),o("p",[e._v("它的用法与append()方法完全一致，也是没有返回值。")]),e._v(" "),o("h2",{attrs:{id:"childnode-接口"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#childnode-接口"}},[e._v("#")]),e._v(" ChildNode 接口")]),e._v(" "),o("h3",{attrs:{id:"childnode-remove"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#childnode-remove"}},[e._v("#")]),e._v(" ChildNode.remove()")]),e._v(" "),o("p",[e._v("remove()方法用于从父节点移除当前节点。")]),e._v(" "),o("h3",{attrs:{id:"childnode-before"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#childnode-before"}},[e._v("#")]),e._v(" ChildNode.before()")]),e._v(" "),o("p",[e._v("before()方法用于在当前节点的前面，插入一个或多个同级节点。两者拥有相同的父节点。")]),e._v(" "),o("p",[e._v("注意，该方法不仅可以插入元素节点，还可以插入文本节点。")]),e._v(" "),o("h3",{attrs:{id:"childnode-after"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#childnode-after"}},[e._v("#")]),e._v(" ChildNode.after()")]),e._v(" "),o("p",[e._v("after()方法用于在当前节点的后面，插入一个或多个同级节点，两者拥有相同的父节点。")]),e._v(" "),o("p",[e._v("用法与before方法完全相同。")]),e._v(" "),o("h3",{attrs:{id:"childnode-replacewith"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#childnode-replacewith"}},[e._v("#")]),e._v(" ChildNode.replaceWith()")]),e._v(" "),o("p",[e._v("replaceWith()方法使用参数节点，替换当前节点。参数可以是元素节点，也可以是文本节点。")]),e._v(" "),o("h2",{attrs:{id:"nodelist"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nodelist"}},[e._v("#")]),e._v(" NodeList")]),e._v(" "),o("p",[e._v("NodeList可以包含各种类型的节点，HTMLCollection只能包含 HTML 元素节点。")]),e._v(" "),o("p",[e._v("NodeList实例是一个类似数组的对象，它的成员是节点对象。")]),e._v(" "),o("blockquote",[o("p",[e._v("可以使用length属性和forEach方法")])]),e._v(" "),o("p",[e._v("如果NodeList实例要使用数组方法，可以将其转为真正的数组。")]),e._v(" "),o("p",[e._v("通过以下方法可以得到NodeList实例。")]),e._v(" "),o("ul",[o("li",[e._v("Node.childNodes")]),e._v(" "),o("li",[e._v("document.querySelectorAll()等节点搜索方法")])]),e._v(" "),o("p",[e._v("NodeList 实例可能是动态集合，也可能是静态集合")]),e._v(" "),o("p",[o("strong",[e._v("目前，只有Node.childNodes返回的是一个动态集合，其他的 NodeList 都是静态集合")])]),e._v(" "),o("p",[e._v("除了使用forEach方法遍历 NodeList 实例，还可以使用for循环。")]),e._v(" "),o("h3",{attrs:{id:"nodelist-prototype-item"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-prototype-item"}},[e._v("#")]),e._v(" NodeList.prototype.item()")]),e._v(" "),o("p",[e._v("item方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。")]),e._v(" "),o("p",[e._v("如果参数值大于实际长度，或者索引不合法（比如负数），item方法返回null。如果省略参数，item方法会报错。")]),e._v(" "),o("p",[o("strong",[e._v("所有类似数组的对象，都可以使用方括号运算符取出成员。一般情况下，都是使用方括号运算符，而不使用item方法。")])]),e._v(" "),o("h3",{attrs:{id:"nodelist-prototype-keys-，nodelist-prototype-values-，nodelist-prototype-entries"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-prototype-keys-，nodelist-prototype-values-，nodelist-prototype-entries"}},[e._v("#")]),e._v(" NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()")]),e._v(" "),o("p",[e._v("这三个方法都返回一个 ES6 的遍历器对象，可以通过for...of循环遍历获取每一个成员的信息。")]),e._v(" "),o("p",[e._v("区别在于，keys()返回键名的遍历器，values()返回键值的遍历器，entries()返回的遍历器同时包含键名和键值的信息。")]),e._v(" "),o("h2",{attrs:{id:"htmlcollection"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection"}},[e._v("#")]),e._v(" HTMLCollection")]),e._v(" "),o("p",[e._v("HTMLCollection是一个节点对象的集合，只能包含元素节点（element），不能包含其他类型的节点。")]),e._v(" "),o("p",[e._v("它的返回值是一个类似数组的对象，但是与NodeList接口不同，HTMLCollection没有forEach方法，只能使用for循环遍历。")]),e._v(" "),o("p",[e._v("返回HTMLCollection实例的，主要是一些Document对象的集合属性，比如document.links、document.images 和 "),o("strong",[e._v("ParentNode.children")]),e._v(" 等。")]),e._v(" "),o("p",[e._v("HTMLCollection实例都是动态集合，节点的变化会实时反映在集合中。")]),e._v(" "),o("p",[e._v("如果元素节点有id或name属性，那么HTMLCollection实例上面，可以使用id属性或name属性引用该节点元素。如果没有对应的节点，则返回null。")]),e._v(" "),o("h3",{attrs:{id:"htmlcollection-prototype-length"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection-prototype-length"}},[e._v("#")]),e._v(" HTMLCollection.prototype.length")]),e._v(" "),o("p",[e._v("length属性返回HTMLCollection实例包含的成员数量。")]),e._v(" "),o("h3",{attrs:{id:"htmlcollection-prototype-item"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection-prototype-item"}},[e._v("#")]),e._v(" HTMLCollection.prototype.item()")]),e._v(" "),o("p",[e._v("item方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。")]),e._v(" "),o("p",[e._v("由于方括号运算符也具有同样作用，而且使用更方便，所以一般情况下，总是使用方括号运算符。")]),e._v(" "),o("h3",{attrs:{id:"htmlcollection-prototype-nameditem"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection-prototype-nameditem"}},[e._v("#")]),e._v(" HTMLCollection.prototype.namedItem()")]),e._v(" "),o("p",[e._v("namedItem方法的参数是一个字符串，表示id属性或name属性的值，返回对应的元素节点。如果没有对应的节点，则返回null。")]),e._v(" "),o("h2",{attrs:{id:"text节点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#text节点"}},[e._v("#")]),e._v(" Text节点")]),e._v(" "),o("p",[e._v("文本节点（Text）代表元素节点（Element）和属性节点（Attribute）的文本内容。")]),e._v(" "),o("p",[e._v("如果一个节点只包含一段文本，那么它就有一个文本子节点，代表该节点的文本内容。")]),e._v(" "),o("h2",{attrs:{id:"documentfragment"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#documentfragment"}},[e._v("#")]),e._v(" DocumentFragment")]),e._v(" "),o("p",[e._v("DocumentFragment节点代表一个文档的片段，本身就是一个完整的 DOM 树形结构。")]),e._v(" "),o("p",[e._v("它没有父节点，parentNode返回null，但是可以插入任意数量的子节点。")]),e._v(" "),o("p",[e._v("它不属于当前文档，操作DocumentFragment节点，要比直接操作 DOM 树快得多。")]),e._v(" "),o("p",[e._v("document.createDocumentFragment方法，以及浏览器原生的 DocumentFragment 构造函数，可以创建一个空的DocumentFragment节点")]),e._v(" "),o("p",[e._v("DocumentFragment节点本身不能被插入当前文档。")]),e._v(" "),o("p",[e._v("当它作为appendChild()、insertBefore()、replaceChild()等方法的参数时，是它的所有子节点插入当前文档，而不是它自身。")]),e._v(" "),o("p",[e._v("一旦DocumentFragment节点被添加进当前文档，它自身就变成了空节点（textContent属性为空字符串），可以被再次使用。")]),e._v(" "),o("p",[e._v("如果想要保存DocumentFragment节点的内容，可以使用cloneNode方法。")]),e._v(" "),o("h2",{attrs:{id:"mutation-observer-api"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mutation-observer-api"}},[e._v("#")]),e._v(" Mutation Observer API⭐️")]),e._v(" "),o("p",[e._v("Mutation Observer API 用来监视 DOM 变动。")]),e._v(" "),o("p",[e._v("Mutation Observer 则是异步触发，DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。")]),e._v(" "),o("p",[e._v("Mutation Observer 有以下特点。")]),e._v(" "),o("ul",[o("li",[e._v("它等待所有脚本任务完成后，才会运行（即异步触发方式）。")]),e._v(" "),o("li",[e._v("它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。")]),e._v(" "),o("li",[e._v("它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。")])]),e._v(" "),o("h3",{attrs:{id:"mutationobserver-的实例方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver-的实例方法"}},[e._v("#")]),e._v(" MutationObserver 的实例方法")]),e._v(" "),o("ul",[o("li",[e._v("observe()")]),e._v(" "),o("li",[e._v("disconnect()，takeRecords()")])]),e._v(" "),o("h4",{attrs:{id:"observe"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#observe"}},[e._v("#")]),e._v(" observe()")]),e._v(" "),o("p",[e._v("observe()方法用来启动监听，它接受两个参数。")]),e._v(" "),o("ul",[o("li",[e._v("第一个参数：所要观察的 DOM 节点")]),e._v(" "),o("li",[e._v("第二个参数：一个配置对象，指定所要观察的特定变动")])]),e._v(" "),o("p",[e._v("变动类型：")]),e._v(" "),o("ul",[o("li",[e._v("childList：子节点的变动（指新增，删除或者更改）。")]),e._v(" "),o("li",[e._v("attributes：属性的变动。")]),e._v(" "),o("li",[e._v("characterData：节点内容或节点文本的变动。")])]),e._v(" "),o("p",[o("code",[e._v("observer.observe(article, options);")])]),e._v(" "),o("p",[e._v("想要观察哪一种变动类型，就在option对象中指定它的值为true。")]),e._v(" "),o("blockquote",[o("p",[e._v("需要注意的是，至少必须同时指定这三种观察的一种，若均未指定将报错。")])]),e._v(" "),o("p",[e._v("除了变动类型，options对象还可以设定以下属性：")]),e._v(" "),o("ul",[o("li",[e._v("subtree：布尔值，表示是否将该观察器应用于该节点的所有后代节点。")]),e._v(" "),o("li",[e._v("attributeOldValue：布尔值，表示观察attributes变动时，是否需要记录变动前的属性值。")]),e._v(" "),o("li",[e._v("characterDataOldValue：布尔值，表示观察characterData变动时，是否需要记录变动前的值。")]),e._v(" "),o("li",[e._v("attributeFilter：数组，表示需要观察的特定属性（比如['class','src']）")])]),e._v(" "),o("p",[e._v("对一个节点添加观察器，就像使用addEventListener()方法一样，多次添加同一个观察器是无效的，回调函数依然只会触发一次。")]),e._v(" "),o("p",[e._v("如果指定不同的options对象，以后面添加的那个为准，类似覆盖。")]),e._v(" "),o("h4",{attrs:{id:"disconnect-，takerecords"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#disconnect-，takerecords"}},[e._v("#")]),e._v(" disconnect()，takeRecords()")]),e._v(" "),o("p",[e._v("disconnect()方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。")]),e._v(" "),o("p",[e._v("takeRecords()方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。")])])}),[],!1,null,null,null);t.default=n.exports}}]);