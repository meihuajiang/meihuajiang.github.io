(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{341:function(a,t,s){"use strict";s.r(t);var r=s(9),h=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[a._v("#")]),a._v(" 应用场景")]),a._v(" "),s("h2",{attrs:{id:"二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[a._v("#")]),a._v(" 二叉搜索树")]),a._v(" "),s("h3",{attrs:{id:"动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[a._v("#")]),a._v(" 动态规划")]),a._v(" "),s("h3",{attrs:{id:"公式解法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公式解法"}},[a._v("#")]),a._v(" 公式解法")]),a._v(" "),s("h2",{attrs:{id:"b树和b-树的用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b树和b-树的用途"}},[a._v("#")]),a._v(" B树和B+树的用途")]),a._v(" "),s("h2",{attrs:{id:"非递归实现二叉树的先序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非递归实现二叉树的先序遍历"}},[a._v("#")]),a._v(" 非递归实现二叉树的先序遍历")]),a._v(" "),s("h2",{attrs:{id:"非递归实现二叉树的中序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非递归实现二叉树的中序遍历"}},[a._v("#")]),a._v(" 非递归实现二叉树的中序遍历")]),a._v(" "),s("h2",{attrs:{id:"非递归实现二叉树的后序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非递归实现二叉树的后序遍历"}},[a._v("#")]),a._v(" 非递归实现二叉树的后序遍历")]),a._v(" "),s("h2",{attrs:{id:"完全二叉树、满二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树、满二叉树"}},[a._v("#")]),a._v(" 完全二叉树、满二叉树")]),a._v(" "),s("h2",{attrs:{id:"二叉树的路径和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的路径和"}},[a._v("#")]),a._v(" 二叉树的路径和")]),a._v(" "),s("h2",{attrs:{id:"反转二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反转二叉树"}},[a._v("#")]),a._v(" 反转二叉树")]),a._v(" "),s("p",[a._v("递归\n迭代")]),a._v(" "),s("h2",{attrs:{id:"寻找二叉树的最近的公共祖先节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寻找二叉树的最近的公共祖先节点"}},[a._v("#")]),a._v(" 寻找二叉树的最近的公共祖先节点")]),a._v(" "),s("h2",{attrs:{id:"二叉树任意两个节点的最短路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树任意两个节点的最短路径"}},[a._v("#")]),a._v(" 二叉树任意两个节点的最短路径")]),a._v(" "),s("h2",{attrs:{id:"找到某节点的路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#找到某节点的路径"}},[a._v("#")]),a._v(" 找到某节点的路径")]),a._v(" "),s("h2",{attrs:{id:"二叉树全路径求和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树全路径求和"}},[a._v("#")]),a._v(" 二叉树全路径求和")]),a._v(" "),s("h2",{attrs:{id:"完全二叉树判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树判断"}},[a._v("#")]),a._v(" 完全二叉树判断")]),a._v(" "),s("h2",{attrs:{id:"前序遍历-中序遍历确定二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前序遍历-中序遍历确定二叉树"}},[a._v("#")]),a._v(" 前序遍历 + 中序遍历确定二叉树")]),a._v(" "),s("h2",{attrs:{id:"二叉树最大高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树最大高度"}},[a._v("#")]),a._v(" 二叉树最大高度")]),a._v(" "),s("p",[a._v("递归")]),a._v(" "),s("h2",{attrs:{id:"给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树"}},[a._v("#")]),a._v(" 给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树")]),a._v(" "),s("h2",{attrs:{id:"z字型（之字形）遍历二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#z字型（之字形）遍历二叉树"}},[a._v("#")]),a._v(" Z字型（之字形）遍历二叉树")]),a._v(" "),s("h2",{attrs:{id:"判断二叉树是否为平衡二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断二叉树是否为平衡二叉树"}},[a._v("#")]),a._v(" 判断二叉树是否为平衡二叉树")])])}),[],!1,null,null,null);t.default=h.exports}}]);