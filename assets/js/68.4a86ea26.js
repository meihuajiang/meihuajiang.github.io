(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{329:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前端模块化的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端模块化的理解"}},[t._v("#")]),t._v(" 前端模块化的理解")]),t._v(" "),a("p",[t._v("模块，指将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起")]),t._v(" "),a("p",[t._v("块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信")]),t._v(" "),a("p",[t._v("模块化开发的好处：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("避免变量污染，命名冲突")])]),t._v(" "),a("li",[a("p",[t._v("提高代码复用率")]),t._v(" "),a("p",[t._v("代码复用不仅仅是为了节省开发时间，同时也是保证代码质量的有效手段，代码的复用程度越高，其质量就越容易得到保证。")])]),t._v(" "),a("li",[a("p",[t._v("提高维护性")]),t._v(" "),a("p",[t._v("代码的可维护性的一种理解是，新功能的添加无需修改已有代码，旧有功能的变更无需修改多处代码。对于初期需求不明确，需要采用不断迭代方式开发的项目，代码可维护性就显的尤为重要。")])]),t._v(" "),a("li",[a("p",[t._v("多人协作的需要。")]),t._v(" "),a("p",[t._v("大型应用无法通过一人之力完成，多人协作是不可避免的。在多人协作的环境下，经常要面临修改或使用别人写的代码的问题。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/167b650e8d1fcc23",alt:"模块化一览"}})]),t._v(" "),a("h2",{attrs:{id:"浏览器加载module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器加载module"}},[t._v("#")]),t._v(" 浏览器加载module")]),t._v(" "),a("p",[t._v('浏览器加载 ES6 模块，可以使用script标签，但是要加入type="module"属性。')]),t._v(" "),a("blockquote",[a("p",[t._v('因为type="application/javascript"是默认值，且被省略了。')])]),t._v(" "),a("p",[a("strong",[t._v('浏览器对于带有type="module"的script，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了defer属性。')])]),t._v(" "),a("p",[t._v('如果网页有多个script type="module"，它们会按照在页面出现的顺序依次执行。')]),t._v(" "),a("p",[t._v("script标签的async属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。")]),t._v(" "),a("p",[t._v('一旦使用了async属性，script type="module"就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。')]),t._v(" "),a("p",[t._v("ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。")]),t._v(" "),a("h3",{attrs:{id:"注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[t._v("#")]),t._v(" 注意点")]),t._v(" "),a("p",[t._v("对于外部的模块脚本有几点需要注意。")]),t._v(" "),a("ul",[a("li",[t._v("代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。")]),t._v(" "),a("li",[t._v("模块脚本自动采用严格模式，不管有没有声明use strict。")]),t._v(" "),a("li",[t._v("模块之中，可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用export命令输出对外接口。")]),t._v(" "),a("li",[t._v("模块之中，顶层的this关键字返回undefined，而不是指向window。也就是说，在模块顶层使用this关键字，是无意义的。")]),t._v(" "),a("li",[t._v("同一个模块如果加载多次，将只执行一次。")])]),t._v(" "),a("h2",{attrs:{id:"amd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amd"}},[t._v("#")]),t._v(" AMD")]),t._v(" "),a("p",[t._v("AMD规范则是非同步加载模块，允许指定回调函数。")]),t._v(" "),a("blockquote",[a("p",[t._v("CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。\n由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。")])]),t._v(" "),a("p",[t._v("但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。")]),t._v(" "),a("blockquote",[a("p",[t._v("此外AMD规范比CommonJS规范在浏览器端实现要来着早。")])]),t._v(" "),a("h3",{attrs:{id:"定义暴露模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义暴露模块"}},[t._v("#")]),t._v(" 定义暴露模块:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义没有依赖的模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 模块\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义有依赖的模块,必须先写好")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'module1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'module2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 模块\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"引入使用模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入使用模块"}},[t._v("#")]),t._v(" 引入使用模块:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'module1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'module2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用m1/m2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[t._v("#")]),t._v(" CMD")]),t._v(" "),a("p",[t._v("CMD规范专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行。CMD规范整合了CommonJS和AMD规范的特点")]),t._v(" "),a("h3",{attrs:{id:"定义暴露模块："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义暴露模块："}},[t._v("#")]),t._v(" 定义暴露模块：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义没有依赖的模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n  module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义有依赖的模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//引入依赖模块(同步)，就近引入")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" module2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//引入依赖模块(异步)")]),t._v("\n    require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("async")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//暴露模块")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"引入使用模块："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入使用模块："}},[t._v("#")]),t._v(" 引入使用模块：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  m1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  m4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"amd-和-cmd-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amd-和-cmd-的区别"}},[t._v("#")]),t._v(" AMD 和 CMD 的区别")]),t._v(" "),a("ul",[a("li",[t._v("CMD 推崇依赖就近，AMD 推崇依赖前置。")]),t._v(" "),a("li",[t._v("对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。")]),t._v(" "),a("li",[t._v("对应 require.js 和 sea.js")])]),t._v(" "),a("h2",{attrs:{id:"commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[t._v("#")]),t._v(" CommonJS")]),t._v(" "),a("p",[t._v("CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。")]),t._v(" "),a("p",[t._v("语法上面，两者最明显的差异是，CommonJS 模块使用"),a("code",[t._v("require()")]),t._v("和"),a("code",[t._v("module.exports")]),t._v("，ES6 模块使用"),a("code",[t._v("import")]),t._v("和"),a("code",[t._v("export")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。")])]),t._v(" "),a("p",[t._v("Node.js 要求 ES6 模块采用.mjs后缀文件名。也就是说，只要脚本文件里面使用import或者export命令，那么就必须采用.mjs后缀名。Node.js 遇到.mjs文件，就认为它是 ES6 模块，默认启用严格模式")]),t._v(" "),a("p",[t._v("如果不希望将后缀名改成.mjs，可以在项目的package.json文件中，指定type字段为module。一旦设置了以后，该目录里面的 JS 脚本，就被解释用 ES6 模块。如果这时还要使用 CommonJS 模块，那么需要将 CommonJS 脚本的后缀名都改成.cjs。")]),t._v(" "),a("p",[t._v("如果没有type字段，或者type字段为commonjs，则.js脚本会被解释成 CommonJS 模块。")]),t._v(" "),a("p",[t._v("总结为一句话：.mjs文件总是以 ES6 模块加载，.cjs文件总是以 CommonJS 模块加载，.js文件的加载取决于package.json里面type字段的设置。")]),t._v(" "),a("p",[t._v("Node.js 规定 ES6 模块之中不能使用 CommonJS 模块的特有的一些内部变量。")]),t._v(" "),a("blockquote",[a("p",[t._v("ES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。")])]),t._v(" "),a("p",[a("strong",[t._v("this关键字。ES6 模块之中，顶层的this指向undefined；CommonJS 模块的顶层this指向当前模块，这是两者的一个重大差异。")])]),t._v(" "),a("h3",{attrs:{id:"commonjs-模块的加载原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块的加载原理"}},[t._v("#")]),t._v(" CommonJS 模块的加载原理")]),t._v(" "),a("p",[t._v("CommonJS 的一个模块，就是一个脚本文件。require命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  loaded"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面代码就是 Node 内部加载模块后生成的一个对象。该对象的id属性是模块名，exports属性是模块输出的各个接口，loaded属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。")]),t._v(" "),a("p",[t._v("以后需要用到这个模块的时候，就会到exports属性上面取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。")]),t._v(" "),a("h3",{attrs:{id:"commonjs为什么可以直接用require函数引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs为什么可以直接用require函数引入"}},[t._v("#")]),t._v(" CommonJS为什么可以直接用require函数引入")]),t._v(" "),a("p",[t._v("在node中引入模块，会经历以下三个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("路径分析")]),t._v(" "),a("li",[t._v("文件定位")]),t._v(" "),a("li",[t._v("编译执行")])]),t._v(" "),a("p",[t._v("关于require方法引入模块的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("通过计算获取模块的绝对路径")]),t._v(" "),a("li",[t._v("判断是否存在缓存，如果有，加载缓存")]),t._v(" "),a("li",[t._v("判断是否是核心模块")]),t._v(" "),a("li",[t._v("生成模块的实例，存进缓存")]),t._v(" "),a("li",[t._v("加载模块")]),t._v(" "),a("li",[t._v("输出模块的exports属性")])]),t._v(" "),a("p",[t._v("nodejs原生的“path”模块和“fs”模块，用于获取文件绝对路径和文件操作")]),t._v(" "),a("h3",{attrs:{id:"循环引用的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环引用的问题"}},[t._v("#")]),t._v(" 循环引用的问题⭐️")]),t._v(" "),a("p",[t._v('一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。')]),t._v(" "),a("h3",{attrs:{id:"commonjs-模块加载-es6-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块加载-es6-模块"}},[t._v("#")]),t._v(" CommonJS 模块加载 ES6 模块")]),t._v(" "),a("p",[t._v("CommonJS 的require()命令不能加载 ES6 模块，会报错，只能使用import()这个方法加载。")]),t._v(" "),a("h3",{attrs:{id:"es6-模块加载-commonjs-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块加载-commonjs-模块"}},[t._v("#")]),t._v(" ES6 模块加载 CommonJS 模块")]),t._v(" "),a("p",[t._v("ES6 模块的import命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。")]),t._v(" "),a("p",[t._v("Node.js 的内置模块可以整体加载，也可以加载指定的输出项。")]),t._v(" "),a("h3",{attrs:{id:"同时支持两种格式的模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同时支持两种格式的模块"}},[t._v("#")]),t._v(" 同时支持两种格式的模块")]),t._v(" "),a("p",[t._v("一个模块同时要支持 CommonJS 和 ES6 两种格式，也很容易。")]),t._v(" "),a("p",[t._v("如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如export default obj，使得 CommonJS 可以用import()进行加载。")]),t._v(" "),a("p",[t._v("如果原始模块是 CommonJS 格式，那么可以加一个包装层。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先整体输入 CommonJS 模块，然后再根据需要输出具名接口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cjsModule "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../index.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cjsModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("另一种做法是在package.json文件的exports字段，指明两种格式模块各自的加载入口。")]),t._v(" "),a("h3",{attrs:{id:"加载路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载路径"}},[t._v("#")]),t._v(" 加载路径")]),t._v(" "),a("p",[t._v("Node.js 的.mjs文件支持 URL 路径。")]),t._v(" "),a("p",[t._v("脚本路径带有参数?query=1，Node 会按 URL 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。")]),t._v(" "),a("p",[t._v("由于这个原因，只要文件名中含有:、%、#、?等特殊字符，最好对这些字符进行转义。")]),t._v(" "),a("p",[t._v("目前，Node.js 的import命令只支持加载本地模块（file:协议）和data:协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。")]),t._v(" "),a("h3",{attrs:{id:"package-json-的-exports-字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package-json-的-exports-字段"}},[t._v("#")]),t._v(" package.json 的 exports 字段⭐️")]),t._v(" "),a("p",[t._v("exports字段的优先级高于main字段。它有多种用法。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("子目录别名")]),t._v(" "),a("p",[t._v("package.json文件的exports字段可以指定脚本或子目录的别名")])]),t._v(" "),a("li",[a("p",[t._v("main 的别名")]),t._v(" "),a("p",[t._v("exports字段的别名如果是.，就代表模块的主入口，优先级高于main字段，并且可以直接简写成exports字段的值。")])]),t._v(" "),a("li",[a("p",[t._v("条件加载")]),t._v(" "),a("p",[t._v("利用.这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口。目前，这个功能需要在 Node.js 运行的时候，打开--experimental-conditional-exports标志。")])])]),t._v(" "),a("h3",{attrs:{id:"package-json-的-main-字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package-json-的-main-字段"}},[t._v("#")]),t._v(" package.json 的 main 字段")]),t._v(" "),a("p",[t._v("package.json文件有两个字段可以指定模块的入口文件：main和exports。比较简单的模块，可以只使用main字段，指定模块加载的入口文件。")]),t._v(" "),a("h2",{attrs:{id:"es6-moudle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-moudle"}},[t._v("#")]),t._v(" ES6 Moudle")]),t._v(" "),a("p",[t._v("ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。")]),t._v(" "),a("blockquote",[a("p",[t._v("CommonJS 和 AMD 模块，都只能在运行时确定这些东西。")])]),t._v(" "),a("h3",{attrs:{id:"只导入部分模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只导入部分模块"}},[t._v("#")]),t._v(" 只导入部分模块")]),t._v(" "),a("p",[t._v("ES6 Moudle 支持按需加载")]),t._v(" "),a("p",[t._v("import()可以在需要的时候，再加载某个模块")]),t._v(" "),a("h3",{attrs:{id:"export和export-default有什么区别？在导入上有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export和export-default有什么区别？在导入上有什么区别？"}},[t._v("#")]),t._v(" export和export default有什么区别？在导入上有什么区别？")]),t._v(" "),a("p",[t._v("使用export default命令，为模块指定默认输出。")]),t._v(" "),a("p",[t._v("**这时import命令，不使用大括号。**可以用任意名称指向模块输出的方法，达到不需要知道原模块输出的函数名就引入的目的。")]),t._v(" "),a("p",[t._v("export default命令只能使用一次。")]),t._v(" "),a("p",[t._v("因为export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("因为export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"import-和-require-导入的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-和-require-导入的区别"}},[t._v("#")]),t._v(" import 和 require 导入的区别⭐️")]),t._v(" "),a("p",[t._v("CommonJS 模块的require()是同步加载模块，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段")]),t._v(" "),a("h3",{attrs:{id:"require-有什么性能问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require-有什么性能问题"}},[t._v("#")]),t._v(" require 有什么性能问题")]),t._v(" "),a("p",[t._v("CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作")]),t._v(" "),a("h3",{attrs:{id:"循环引用的问题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环引用的问题-2"}},[t._v("#")]),t._v(" 循环引用的问题")]),t._v(" "),a("p",[t._v("ES6 处理“循环加载”与 CommonJS 有本质的不同。")]),t._v(" "),a("p",[t._v("ES6 模块是动态引用，如果使用import从一个模块加载变量（即import foo from 'foo'），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。")]),t._v(" "),a("p",[t._v("因为函数具有提升的作用，因此可以写成函数保证执行时能够取到值（"),a("strong",[t._v("函数表达式不行，不具有提升作用")]),t._v("）")]),t._v(" "),a("h3",{attrs:{id:"加载路径-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载路径-2"}},[t._v("#")]),t._v(" 加载路径")]),t._v(" "),a("p",[t._v("ES6 模块的加载路径必须给出脚本的完整路径，不能省略脚本的后缀名。import命令和package.json文件的main字段如果省略脚本的后缀名，会报错")]),t._v(" "),a("h2",{attrs:{id:"es6-模块与-commonjs-模块的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块与-commonjs-模块的差异"}},[t._v("#")]),t._v(" ES6 模块与 CommonJS 模块的差异⭐️")]),t._v(" "),a("p",[t._v("主要有三个重要的差别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。")])]),t._v(" "),a("li",[a("p",[t._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")]),t._v(" "),a("p",[t._v("因为 CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("CommonJS 模块的require()是同步加载模块，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段")]),t._v("。")])])]),t._v(" "),a("h2",{attrs:{id:"module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[t._v("#")]),t._v(" module⭐️")]),t._v(" "),a("p",[t._v("ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。")]),t._v(" "),a("blockquote",[a("p",[t._v("CommonJS 和 AMD 模块，都只能在运行时确定这些东西。")])]),t._v(" "),a("p",[t._v("ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。")]),t._v(" "),a("p",[t._v("ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象")]),t._v(" "),a("p",[t._v("ES6 模块还有以下好处。")]),t._v(" "),a("ul",[a("li",[t._v("不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。")]),t._v(" "),a("li",[t._v("将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。")]),t._v(" "),a("li",[t._v("不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。")])]),t._v(" "),a("p",[a("strong",[t._v("ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。")])]),t._v(" "),a("h3",{attrs:{id:"export-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-命令"}},[t._v("#")]),t._v(" export 命令⭐️")]),t._v(" "),a("p",[t._v("模块功能主要由两个命令构成：export和import。")]),t._v(" "),a("p",[t._v("export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。")]),t._v(" "),a("p",[t._v("一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。")]),t._v(" "),a("p",[t._v("如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。")]),t._v(" "),a("p",[t._v("export命令除了输出变量，还可以输出函数或类（class）。")]),t._v(" "),a("p",[t._v("通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。")]),t._v(" "),a("p",[t._v("export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法二")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写法三")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错，直接输出 1，1只是一个值，不是接口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错，通过变量m，还是直接输出 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("同样的，function和class的输出，也必须遵守这样的写法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。")])]),t._v(" "),a("blockquote",[a("p",[t._v("CommonJS 模块输出的是值的缓存，不存在动态更新")])]),t._v(" "),a("p",[t._v("export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，import命令也是如此。")]),t._v(" "),a("blockquote",[a("p",[t._v("这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。")])]),t._v(" "),a("h3",{attrs:{id:"export-default-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-default-命令"}},[t._v("#")]),t._v(" export default 命令⭐️")]),t._v(" "),a("p",[t._v("通常情况下，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。")]),t._v(" "),a("p",[t._v("可以使用export default命令，为模块指定默认输出。")]),t._v(" "),a("p",[t._v("**这时import命令，不使用大括号。**可以用任意名称指向模块输出的方法，达到不需要知道原模块输出的函数名就引入的目的。")]),t._v(" "),a("p",[t._v("export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令")]),t._v(" "),a("p",[t._v("因为export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("因为export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("export default也可以用来输出类。")]),t._v(" "),a("h3",{attrs:{id:"import-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-命令"}},[t._v("#")]),t._v(" import 命令⭐️")]),t._v(" "),a("p",[t._v("使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。")]),t._v(" "),a("p",[t._v("想为输入的变量重新取一个名字，import命令可以使用as关键字，将输入的变量重命名。")]),t._v(" "),a("p",[t._v("import命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。")]),t._v(" "),a("blockquote",[a("p",[t._v("但是，如果a是一个对象，改写a的属性是允许的。")])]),t._v(" "),a("p",[a("strong",[t._v("注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。")])]),t._v(" "),a("blockquote",[a("p",[t._v("import命令是编译阶段执行的，在代码运行之前。")])]),t._v(" "),a("p",[a("strong",[t._v("由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。")])]),t._v(" "),a("p",[t._v("如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。")]),t._v(" "),a("h3",{attrs:{id:"import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[t._v("#")]),t._v(" import()")]),t._v(" "),a("p",[a("strong",[t._v("import()返回一个 Promise 对象，支持动态加载模块")])]),t._v(" "),a("p",[a("strong",[t._v("import()类似于 Node 的require方法，区别主要是前者是异步加载，后者是同步加载。")])]),t._v(" "),a("p",[t._v("import()加载模块成功以后，这个模块会作为一个对象，当作then方法的参数")]),t._v(" "),a("blockquote",[a("p",[t._v("因此，可以使用对象解构赋值的语法，获取输出接口。")])]),t._v(" "),a("p",[t._v("如果想同时加载多个模块，可以采用下面的写法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module1.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module2.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module3.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("module1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   ···\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("使用场合：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("按需加载。")]),t._v(" "),a("p",[t._v("import()可以在需要的时候，再加载某个模块。")])]),t._v(" "),a("li",[a("p",[t._v("条件加载")]),t._v(" "),a("p",[t._v("import()可以放在if代码块，根据不同的情况，加载不同的模块")])]),t._v(" "),a("li",[a("p",[t._v("动态的模块路径")]),t._v(" "),a("p",[t._v("import()允许模块路径动态生成。")])])]),t._v(" "),a("h3",{attrs:{id:"export-与-import-的复合写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-与-import-的复合写法"}},[t._v("#")]),t._v(" export 与 import 的复合写法")]),t._v(" "),a("p",[t._v("如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。")]),t._v(" "),a("p",[t._v("相当于对外转发了接口，导致当前模块不能直接使用。")]),t._v(" "),a("h3",{attrs:{id:"模块的整体加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块的整体加载"}},[t._v("#")]),t._v(" 模块的整体加载")]),t._v(" "),a("p",[t._v("除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面")]),t._v(" "),a("p",[t._v("模块整体加载所在的那个对象，应该是可以静态分析的，所以不允许运行时改变。")])])}),[],!1,null,null,null);s.default=e.exports}}]);