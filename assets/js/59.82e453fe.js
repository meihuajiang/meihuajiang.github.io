(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{322:function(t,a,s){"use strict";s.r(a);var n=s(9),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"array-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[t._v("#")]),t._v(" Array.from()⭐️")]),t._v(" "),s("p",[s("strong",[t._v("Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）")])]),t._v(" "),s("p",[t._v("只要是部署了 Iterator 接口的数据结构，Array.from都能将其转为数组。")]),t._v(" "),s("p",[t._v("如果参数是一个真正的数组，Array.from会返回一个一模一样的新数组。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("PS")]),t._v(" "),s("p",[t._v("扩展运算符（...）也可以将某些数据结构转为数组。")])]),t._v(" "),s("p",[s("strong",[t._v("任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。")])]),t._v(" "),s("p",[s("strong",[t._v("对于还没有部署该方法的浏览器，可以用Array.prototype.slice方法替代。")])]),t._v(" "),s("p",[t._v("Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。")]),t._v(" "),s("p",[t._v("如果map函数里面用到了this关键字，还可以传入Array.from的第三个参数，用来绑定this。")]),t._v(" "),s("p",[s("strong",[t._v("Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符")])]),t._v(" "),s("p",[s("strong",[t._v("Array.from()不会跳过空位")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 0, 2, 0, 3]")]),t._v("\n")])])]),s("h2",{attrs:{id:"array-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-of"}},[t._v("#")]),t._v(" Array.of()⭐️")]),t._v(" "),s("p",[t._v("Array.of方法用于将一组值，转换为数组。")]),t._v(" "),s("blockquote",[s("p",[t._v("为了弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。")])]),t._v(" "),s("p",[t._v("只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度")]),t._v(" "),s("p",[t._v("Array.of()基本上可以用来替代Array()或new Array()，并且不存在由于参数不同而导致的重载。它的行为非常统一。")]),t._v(" "),s("p",[t._v("Array.of()总是返回参数值组成的数组。如果没有参数，就返回一个空数组。")]),t._v(" "),s("p",[t._v("Array.of方法可以用下面的代码模拟实现。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ArrayOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"数组实例的-copywithin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-copywithin"}},[t._v("#")]),t._v(" 数组实例的 copyWithin()")]),t._v(" "),s("p",[t._v("数组实例的copyWithin()方法，在当前"),s("strong",[t._v("数组内部")]),t._v("，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。")]),t._v(" "),s("p",[t._v("也就是说，使用这个方法，会修改当前数组。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyWithin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("它接受三个参数。")]),t._v(" "),s("ul",[s("li",[t._v("target（必需）：从该位置开始"),s("strong",[t._v("替换")]),t._v("数据。如果为负值，表示倒数。")]),t._v(" "),s("li",[t._v("start（可选）：从该位置开始"),s("strong",[t._v("读取")]),t._v("数据，默认为 0。如果为负值，表示从末尾开始计算。")]),t._v(" "),s("li",[t._v("end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。")])]),t._v(" "),s("h2",{attrs:{id:"数组实例的-find-和-findindex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-find-和-findindex"}},[t._v("#")]),t._v(" 数组实例的 find() 和 findIndex()⭐️")]),t._v(" "),s("p",[t._v("数组实例的find方法，用于找出第一个符合条件的数组成员。")]),t._v(" "),s("p",[t._v("它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。")]),t._v(" "),s("p",[t._v("如果没有符合条件的成员，则返回undefined。")]),t._v(" "),s("p",[s("strong",[t._v("find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。")])]),t._v(" "),s("blockquote",[s("p",[t._v("基本上都是这三个值，顺序也是")])]),t._v(" "),s("p",[t._v("数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。")]),t._v(" "),s("p",[t._v("这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。")]),t._v(" "),s("p",[s("strong",[t._v("这两个方法都可以发现NaN，弥补了数组的indexOf方法的不足。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),s("h2",{attrs:{id:"数组实例的-fill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-fill"}},[t._v("#")]),t._v(" 数组实例的 fill()")]),t._v(" "),s("p",[t._v("fill方法使用给定值，填充一个数组。")]),t._v(" "),s("p",[t._v("fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。")]),t._v(" "),s("p",[t._v("fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置(start)和结束位置(end,本身不包含)")]),t._v(" "),s("p",[t._v("注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。")]),t._v(" "),s("h2",{attrs:{id:"数组实例的-entries-，keys-和-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-entries-，keys-和-values"}},[t._v("#")]),t._v(" 数组实例的 entries()，keys() 和 values()")]),t._v(" "),s("p",[t._v("ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象，可以用for...of循环进行遍历")]),t._v(" "),s("p",[t._v("唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。")]),t._v(" "),s("p",[t._v("如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。")]),t._v(" "),s("h2",{attrs:{id:"数组实例的-includes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-includes"}},[t._v("#")]),t._v(" 数组实例的 includes()⭐️")]),t._v(" "),s("p",[t._v("Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。")]),t._v(" "),s("p",[t._v("该方法的第二个参数表示搜索的起始位置，默认为0。")]),t._v(" "),s("p",[t._v("如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。")]),t._v(" "),s("p",[t._v("没有该方法之前，通常使用数组的indexOf方法，检查是否包含某个值。")]),t._v(" "),s("p",[t._v("indexOf方法有两个缺点，")]),t._v(" "),s("ul",[s("li",[t._v("一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。")]),t._v(" "),s("li",[t._v("二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。")])]),t._v(" "),s("p",[s("strong",[t._v("includes使用的是不一样的判断算法，可以发现NaN")])]),t._v(" "),s("p",[t._v("Map 和 Set 数据结构的has方法，需要注意与includes区分。")]),t._v(" "),s("ul",[s("li",[t._v("Map 结构的has方法，是用来查找键名的，比如Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.has(target, propertyKey)。")]),t._v(" "),s("li",[t._v("Set 结构的has方法，是用来查找值的，比如Set.prototype.has(value)、WeakSet.prototype.has(value)。")])]),t._v(" "),s("h2",{attrs:{id:"数组实例的-flat-，flatmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组实例的-flat-，flatmap"}},[t._v("#")]),t._v(" 数组实例的 flat()，flatMap()")]),t._v(" "),s("p",[t._v("数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。")]),t._v(" "),s("p",[s("strong",[t._v("该方法返回一个新数组，对原数据没有影响")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 展开一层数组")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等效于")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("acc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" acc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, 3, 4]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用扩展运算符 ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("flattened")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1")]),t._v(" "),s("p",[t._v("如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。")]),t._v(" "),s("p",[s("strong",[t._v("如果原数组有空位，flat()方法会跳过空位。")])]),t._v(" "),s("p",[t._v("flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。")]),t._v(" "),s("p",[t._v("该方法返回一个新数组，不改变原数组。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于 [[2, 4], [3, 6], [4, 8]].flat()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [2, 4, 3, 6, 4, 8]")]),t._v("\n")])])]),s("p",[t._v("flatMap()只能展开一层数组。")]),t._v(" "),s("p",[t._v("flatMap()方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。")]),t._v(" "),s("p",[t._v("flatMap()方法还可以有第二个参数，用来绑定遍历函数里面的this。")]),t._v(" "),s("h2",{attrs:{id:"空位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空位"}},[t._v("#")]),t._v(" 空位⭐️")]),t._v(" "),s("p",[t._v("ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。")]),t._v(" "),s("ul",[s("li",[t._v("forEach(), filter(), reduce(), every() 和some()都会跳过空位。")]),t._v(" "),s("li",[t._v("map()会跳过空位，但会保留这个值")]),t._v(" "),s("li",[t._v("join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。")])]),t._v(" "),s("h2",{attrs:{id:"array-prototype-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-sort"}},[t._v("#")]),t._v(" Array.prototype.sort()")]),t._v(" "),s("p",[t._v("ES2019 明确规定，Array.prototype.sort()的默认排序算法必须稳定。")]),t._v(" "),s("h2",{attrs:{id:"函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[t._v("#")]),t._v(" 函数参数")]),t._v(" "),s("p",[t._v("ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。")]),t._v(" "),s("p",[s("strong",[t._v("参数变量是默认声明的，所以不能用let或const再次声明。")])]),t._v(" "),s("p",[t._v("使用参数默认值时，函数不能有同名参数。")]),t._v(" "),s("p",[t._v("如果传入undefined，将触发该参数等于默认值，null则没有这个效果。")]),t._v(" "),s("p",[t._v("通常情况下，定义了默认值的参数，应该是函数的尾参数")]),t._v(" "),s("h2",{attrs:{id:"尾逗号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#尾逗号"}},[t._v("#")]),t._v(" 尾逗号")]),t._v(" "),s("p",[t._v("ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。")]),t._v(" "),s("p",[s("strong",[t._v("此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。")])]),t._v(" "),s("p",[s("strong",[t._v("函数参数与数组和对象的尾逗号规则，保持一致了。")])]),t._v(" "),s("h3",{attrs:{id:"函数的-length-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的-length-属性"}},[t._v("#")]),t._v(" 函数的 length 属性")]),t._v(" "),s("p",[t._v("指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。")]),t._v(" "),s("p",[t._v("因为length属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。")]),t._v(" "),s("p",[t._v("同理，rest 参数也不会计入length属性。")]),t._v(" "),s("p",[t._v("如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了")]),t._v(" "),s("h3",{attrs:{id:"作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),s("p",[t._v("一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。")]),t._v(" "),s("p",[t._v("等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n**参数y的默认值等于变量x。调用函数f时，参数形成一个单独的作用域。\n**在这个作用域里面，默认值变量x指向第一个参数x，而不是全局变量x，所以输出是2。\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n**函数f调用时，参数y = x形成一个单独的作用域。这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x。\n**如果此时，全局变量x不存在，就会报错。\n**/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数调用时，函数体内部的局部变量x影响不到默认值变量x。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),s("p",[t._v("如果参数的默认值是一个函数，该函数的作用域也遵守这个规则")]),t._v(" "),s("h2",{attrs:{id:"函数的严格模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数的严格模式"}},[t._v("#")]),t._v(" 函数的严格模式")]),t._v(" "),s("p",[t._v("ES2016 规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。")]),t._v(" "),s("p",[t._v("函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。")]),t._v(" "),s("p",[t._v("两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。")]),t._v(" "),s("p",[t._v("第二种是把函数包在一个无参数的立即执行函数里面。")]),t._v(" "),s("h2",{attrs:{id:"函数name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数name"}},[t._v("#")]),t._v(" 函数name")]),t._v(" "),s("p",[t._v("ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串，而 ES6 的name属性会返回实际的函数名。")]),t._v(" "),s("p",[t._v("Function构造函数返回的函数实例，name属性的值为anonymous。")]),t._v(" "),s("p",[t._v("bind返回的函数，name属性值会加上bound前缀。")]),t._v(" "),s("h2",{attrs:{id:"function-prototype-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-prototype-tostring"}},[t._v("#")]),t._v(" Function.prototype.toString()")]),t._v(" "),s("p",[t._v("ES2019 对函数实例的toString()方法做出了修改。")]),t._v(" "),s("p",[t._v("toString()方法返回函数代码本身，以前会省略注释和空格。")]),t._v(" "),s("h2",{attrs:{id:"catch-命令的参数省略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#catch-命令的参数省略"}},[t._v("#")]),t._v(" catch 命令的参数省略")]),t._v(" "),s("p",[t._v("ES2019 做出了改变，允许catch语句省略参数。")]),t._v(" "),s("h2",{attrs:{id:"二进制和八进制表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制和八进制表示法"}},[t._v("#")]),t._v(" 二进制和八进制表示法")]),t._v(" "),s("p",[t._v("ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。")]),t._v(" "),s("p",[t._v("如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。")]),t._v(" "),s("h2",{attrs:{id:"数值新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值新增方法"}},[t._v("#")]),t._v(" 数值新增方法")]),t._v(" "),s("h3",{attrs:{id:"number-isfinite-number-isnan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-isfinite-number-isnan"}},[t._v("#")]),t._v(" Number.isFinite(), Number.isNaN()")]),t._v(" "),s("p",[t._v("ES6 在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。")]),t._v(" "),s("p",[t._v("Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity")]),t._v(" "),s("p",[t._v("注意，如果参数类型不是数值，Number.isFinite一律返回false。")]),t._v(" "),s("p",[t._v("Number.isNaN()用来检查一个值是否为NaN。")]),t._v(" "),s("p",[t._v("如果参数类型不是NaN，Number.isNaN一律返回false。")]),t._v(" "),s("p",[t._v("它们与传统的全局方法isFinite()和isNaN()的区别在于")]),t._v(" "),s("p",[s("strong",[t._v("传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效")])]),t._v(" "),s("p",[t._v("Number.isFinite()对于非数值一律返回false, Number.isNaN()只有对于NaN才返回true，非NaN一律返回false。")]),t._v(" "),s("h3",{attrs:{id:"number-parseint-number-parsefloat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-parseint-number-parsefloat"}},[t._v("#")]),t._v(" Number.parseInt(), Number.parseFloat()")]),t._v(" "),s("p",[t._v("ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。")]),t._v(" "),s("p",[t._v("这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。")]),t._v(" "),s("h3",{attrs:{id:"number-isinteger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-isinteger"}},[t._v("#")]),t._v(" Number.isInteger()")]),t._v(" "),s("p",[t._v("Number.isInteger()用来判断一个数值是否为整数。")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。")])]),t._v(" "),s("p",[t._v("如果参数不是数值，Number.isInteger返回false。")]),t._v(" "),s("p",[t._v("由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。")]),t._v(" "),s("p",[t._v("如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。")]),t._v(" "),s("p",[t._v("如果一个数值的绝对值小于Number.MIN_VALUE（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0。这时，Number.isInteger也会误判。")]),t._v(" "),s("p",[t._v("如果对数据精度的要求较高，不建议使用Number.isInteger()判断一个数值是否为整数。")]),t._v(" "),s("h3",{attrs:{id:"number-epsilon"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-epsilon"}},[t._v("#")]),t._v(" Number.EPSILON")]),t._v(" "),s("p",[t._v("ES6 在Number对象上面，新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。")]),t._v(" "),s("p",[t._v("对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001，小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。")]),t._v(" "),s("p",[t._v("Number.EPSILON实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。")]),t._v(" "),s("p",[t._v("引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。")]),t._v(" "),s("h3",{attrs:{id:"安全整数和-number-issafeinteger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全整数和-number-issafeinteger"}},[t._v("#")]),t._v(" 安全整数和 Number.isSafeInteger()⭐️")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。")])]),t._v(" "),s("p",[t._v("ES6 引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。")]),t._v(" "),s("p",[t._v("Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。")]),t._v(" "),s("h2",{attrs:{id:"bigint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[t._v("#")]),t._v(" BigInt")]),t._v(" "),s("p",[t._v("JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。")]),t._v(" "),s("p",[t._v("一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示的，这使得 JavaScript 不适合进行科学和金融方面的精确计算。")]),t._v(" "),s("p",[t._v("二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回Infinity。")]),t._v(" "),s("p",[t._v("ECMAScript 的第八种数据类型。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。")]),t._v(" "),s("p",[t._v("为了与 Number 类型区别，BigInt 类型的数据必须添加后缀n。")]),t._v(" "),s("p",[t._v("BigInt 同样可以使用各种进制表示，都要加上后缀n。")]),t._v(" "),s("p",[t._v("BigInt 与普通整数是两种值，它们之间并不相等。")]),t._v(" "),s("p",[s("strong",[t._v("typeof运算符对于 BigInt 类型的数据返回bigint。")])]),t._v(" "),s("p",[t._v("BigInt 可以使用负号（-），但是不能使用正号（+），因为会与 asm.js 冲突。")]),t._v(" "),s("h2",{attrs:{id:"bigint-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bigint-对象"}},[t._v("#")]),t._v(" BigInt 对象")]),t._v(" "),s("p",[t._v("JavaScript 原生提供BigInt对象，可以用作构造函数生成 BigInt 类型的数值。转换规则基本与Number()一致，将其他类型的值转为 BigInt。")]),t._v(" "),s("p",[s("strong",[t._v("BigInt()构造函数必须有参数，而且参数必须可以正常转为数值。")])]),t._v(" "),s("p",[s("code",[t._v("BigInt('123n') // SyntaxError")])]),t._v(" "),s("p",[t._v("参数如果是小数，也会报错。")]),t._v(" "),s("p",[s("code",[t._v("BigInt(1.5) // RangeError")])]),t._v(" "),s("h3",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),s("p",[t._v("BigInt 对象继承了 Object 对象的两个实例方法。")]),t._v(" "),s("ul",[s("li",[t._v("BigInt.prototype.toString()")]),t._v(" "),s("li",[t._v("BigInt.prototype.valueOf()")])]),t._v(" "),s("p",[t._v("它还继承了 Number 对象的一个实例方法。")]),t._v(" "),s("ul",[s("li",[t._v("BigInt.prototype.toLocaleString()")])]),t._v(" "),s("p",[t._v("此外，还提供了三个静态方法。")]),t._v(" "),s("ul",[s("li",[t._v("BigInt.asUintN(width, BigInt)： 给定的 BigInt 转为 0 到 2的width次方 - 1 之间对应的值。")]),t._v(" "),s("li",[t._v("BigInt.asIntN(width, BigInt)：给定的 BigInt 转为 -2的（width-1）次方 - 1 到 2的（width-1）次方 - 1 之间对应的值。")]),t._v(" "),s("li",[t._v("BigInt.parseInt(string[, radix])：近似于Number.parseInt()，将一个字符串转换成指定进制的 BigInt。")])]),t._v(" "),s("h3",{attrs:{id:"转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换规则"}},[t._v("#")]),t._v(" 转换规则")]),t._v(" "),s("p",[t._v("可以使用Boolean()、Number()和String()这三个方法，将 BigInt 可以转为布尔值、数值和字符串类型。")]),t._v(" "),s("p",[t._v("转为字符串时后缀n会消失。")]),t._v(" "),s("h3",{attrs:{id:"数学运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数学运算"}},[t._v("#")]),t._v(" 数学运算")]),t._v(" "),s("p",[t._v("数学运算方面，BigInt 类型的+、-、*和**这四个二元运算符，与 Number 类型的行为一致。")]),t._v(" "),s("p",[t._v("除法运算/会舍去小数部分，返回一个整数。")]),t._v(" "),s("p",[t._v("几乎所有的数值运算符都可以用在 BigInt，但是有两个例外。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("不带符号的右移位运算符>>>")]),t._v(" "),s("p",[t._v("因为>>>运算符是不带符号的，但是 BigInt 总是带有符号的，导致该运算无意义，完全等同于右移运算符>>")])]),t._v(" "),s("li",[s("p",[t._v("一元的求正运算符+")]),t._v(" "),s("p",[t._v("因为一元运算符+在 asm.js 里面总是返回 Number 类型，为了不破坏 asm.js 就规定+1n会报错。")])])]),t._v(" "),s("p",[s("strong",[t._v("BigInt 不能与普通数值进行混合运算。")])]),t._v(" "),s("blockquote",[s("p",[t._v("因为无论返回的是 BigInt 或 Number，都会导致丢失精度信息")])]),t._v(" "),s("p",[t._v("如果一个标准库函数的参数预期是 Number 类型，但是得到的是一个 BigInt，就会报错。")]),t._v(" "),s("p",[t._v("比较运算符（比如>）和相等运算符（==）允许 BigInt 与其他类型的值混合计算，因为这样做不会损失精度。")]),t._v(" "),s("p",[t._v("BigInt 与字符串混合运算时，会先转为字符串，再进行运算。")]),t._v(" "),s("h2",{attrs:{id:"模板字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串"}},[t._v("#")]),t._v(" 模板字符串")]),t._v(" "),s("p",[t._v("模板字符串（template string）是增强版的字符串，用反引号（`）标识。")]),t._v(" "),s("p",[t._v("它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。")]),t._v(" "),s("p",[t._v("如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。")]),t._v(" "),s("p",[t._v("模板字符串中嵌入变量，需要将变量名写在${}之中。")]),t._v(" "),s("p",[t._v("大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，调用函数，以及引用对象属性。")]),t._v(" "),s("p",[t._v("如果大括号中的值不是字符串，将按照一般的规则转为字符串")]),t._v(" "),s("p",[t._v("由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。")]),t._v(" "),s("h2",{attrs:{id:"字符串扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串扩展"}},[t._v("#")]),t._v(" 字符串扩展")]),t._v(" "),s("h3",{attrs:{id:"for-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[t._v("#")]),t._v(" for of")]),t._v(" "),s("p",[t._v("ES6 为字符串添加了遍历器接口（详见 Iterator 部分），使得字符串可以被for...of循环遍历。")]),t._v(" "),s("p",[t._v("除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。")]),t._v(" "),s("h2",{attrs:{id:"字符串新增方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串新增方法"}},[t._v("#")]),t._v(" 字符串新增方法")]),t._v(" "),s("h3",{attrs:{id:"includes-startswith-endswith"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#includes-startswith-endswith"}},[t._v("#")]),t._v(" includes(), startsWith(), endsWith()")]),t._v(" "),s("ul",[s("li",[t._v("includes()：返回布尔值，表示是否找到了参数字符串。")]),t._v(" "),s("li",[t._v("startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。")]),t._v(" "),s("li",[t._v("endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。")])]),t._v(" "),s("p",[t._v("这三个方法都支持第二个参数，表示开始搜索的位置。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("et s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\ns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\ns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n")])])]),s("p",[t._v("使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。")]),t._v(" "),s("h3",{attrs:{id:"repeat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repeat"}},[t._v("#")]),t._v(" repeat()")]),t._v(" "),s("p",[t._v("repeat方法返回一个新字符串，表示将原字符串重复n次。")]),t._v(" "),s("p",[t._v("参数如果是小数，会被取整。")]),t._v(" "),s("p",[t._v("如果repeat的参数是负数或者Infinity，会报错。")]),t._v(" "),s("p",[t._v("参数NaN等同于 0")]),t._v(" "),s("p",[t._v("如果repeat的参数是字符串，则会先转换成数字。")]),t._v(" "),s("h3",{attrs:{id:"replaceall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replaceall"}},[t._v("#")]),t._v(" replaceAll()")]),t._v(" "),s("p",[t._v("ES2021 引入了replaceAll()方法，可以一次性替换所有匹配。")]),t._v(" "),s("p",[t._v("返回一个新字符串，不会改变原字符串。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("searchValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" replacement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面代码中，searchValue是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有g修饰符）。")]),t._v(" "),s("p",[t._v("如果searchValue是一个不带有g修饰符的正则表达式，replaceAll()会报错。这一点跟replace()不同。")]),t._v(" "),s("p",[t._v("replaceAll()的第二个参数replacement是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。")]),t._v(" "),s("ul",[s("li",[t._v("$&：匹配的子字符串。")]),t._v(" "),s("li",[t._v("$`：匹配结果前面的文本。")]),t._v(" "),s("li",[t._v("$'：匹配结果后面的文本。")]),t._v(" "),s("li",[t._v("$n：匹配成功的第n组内容，n是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。")]),t._v(" "),s("li",[t._v("$$：指代美元符号$。")])]),t._v(" "),s("p",[t._v("replaceAll()的第二个参数replacement除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数searchValue匹配的文本。")]),t._v(" "),s("h3",{attrs:{id:"padstart-，padend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#padstart-，padend"}},[t._v("#")]),t._v(" padStart()，padEnd()")]),t._v(" "),s("p",[t._v("ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。")]),t._v(" "),s("p",[t._v("padStart()用于头部补全，padEnd()用于尾部补全。")]),t._v(" "),s("p",[t._v("padStart()和padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。")]),t._v(" "),s("p",[t._v("如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串")]),t._v(" "),s("p",[t._v("如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。")]),t._v(" "),s("p",[t._v("如果省略第二个参数，默认使用空格补全长度。")]),t._v(" "),s("p",[t._v("padStart()的常见用途是为数值补全指定位数")]),t._v(" "),s("h3",{attrs:{id:"trimstart-，trimend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trimstart-，trimend"}},[t._v("#")]),t._v(" trimStart()，trimEnd()")]),t._v(" "),s("p",[t._v("ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。它们的行为与trim()一致")]),t._v(" "),s("p",[t._v("trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。")]),t._v(" "),s("p",[t._v("它们返回的都是新字符串，不会修改原始字符串。")]),t._v(" "),s("h3",{attrs:{id:"string-fromcodepoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-fromcodepoint"}},[t._v("#")]),t._v(" String.fromCodePoint()")]),t._v(" "),s("p",[t._v("ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于0xFFFF的字符。")]),t._v(" "),s("p",[t._v("ES6 提供了String.fromCodePoint()方法，可以识别大于0xFFFF的字符，在作用上，正好与下面的codePointAt()方法相反。")]),t._v(" "),s("p",[t._v("如果String.fromCodePoint方法有多个参数，则它们会被合并成一个字符串返回。")]),t._v(" "),s("p",[t._v("注意，fromCodePoint方法定义在String对象上，而codePointAt方法定义在字符串的实例对象上。")]),t._v(" "),s("h3",{attrs:{id:"string-raw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-raw"}},[t._v("#")]),t._v(" String.raw()")]),t._v(" "),s("p",[t._v("ES6 还为原生的 String 对象，提供了一个raw()方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串。")]),t._v(" "),s("p",[t._v("String.raw()方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。")]),t._v(" "),s("h3",{attrs:{id:"codepointat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#codepointat"}},[t._v("#")]),t._v(" codePointAt()")]),t._v(" "),s("p",[t._v("ES6 提供了codePointAt()方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。")]),t._v(" "),s("p",[t._v("但是参数仍是不正确的，能正确返回但是仍视为两个字符。")]),t._v(" "),s("h3",{attrs:{id:"识别utf-16字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#识别utf-16字符"}},[t._v("#")]),t._v(" 识别UTF-16字符")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用for...of循环，因为它会正确识别 32 位的 UTF-16 字符。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'𠮷a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ch "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20bb7")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 61")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用扩展运算符（...）进行展开运算。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'𠮷a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arr.length === 2")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20bb7")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 61")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"正则扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则扩展"}},[t._v("#")]),t._v(" 正则扩展")]),t._v(" "),s("p",[t._v("如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。")]),t._v(" "),s("p",[t._v("而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符")]),t._v(" "),s("p",[t._v("ES6 将String 的4 个方法，在语言内部全部调用RegExp的实例方法，从而做到所有与正则相关的方法，全都定义在RegExp对象上。")]),t._v(" "),s("ul",[s("li",[t._v("String.prototype.match 调用 RegExp.prototype[Symbol.match]")]),t._v(" "),s("li",[t._v("String.prototype.replace 调用 RegExp.prototype[Symbol.replace]")]),t._v(" "),s("li",[t._v("String.prototype.search 调用 RegExp.prototype[Symbol.search]")]),t._v(" "),s("li",[t._v("String.prototype.split 调用 RegExp.prototype[Symbol.split]")])]),t._v(" "),s("h3",{attrs:{id:"s-修饰符：dotall-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#s-修饰符：dotall-模式"}},[t._v("#")]),t._v(" s 修饰符：dotAll 模式")]),t._v(" "),s("p",[t._v("正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，")]),t._v(" "),s("p",[t._v("但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符（换行、回车、段分隔符和行分隔符）")]),t._v(" "),s("blockquote",[s("p",[t._v("匹配任意单个字符，可以[^]")])]),t._v(" "),s("h3",{attrs:{id:"y修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#y修饰符"}},[t._v("#")]),t._v(" y修饰符")]),t._v(" "),s("p",[t._v("ES6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。")]),t._v(" "),s("p",[t._v("y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。")]),t._v(" "),s("p",[t._v("不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。")]),t._v(" "),s("p",[t._v("lastIndex属性指定每次搜索的开始位置，g修饰符从这个位置开始向后搜索，直到发现匹配为止。")]),t._v(" "),s("p",[t._v("y修饰符同样遵守lastIndex属性，但是要求必须在lastIndex指定的位置发现匹配。")]),t._v(" "),s("h4",{attrs:{id:"regexp-prototype-sticky-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-sticky-属性"}},[t._v("#")]),t._v(" RegExp.prototype.sticky 属性")]),t._v(" "),s("p",[t._v("与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。")]),t._v(" "),s("h3",{attrs:{id:"u-修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#u-修饰符"}},[t._v("#")]),t._v(" u 修饰符")]),t._v(" "),s("p",[t._v("ES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。")]),t._v(" "),s("p",[t._v("也就是说，会正确处理四个字节的 UTF-16 编码。")]),t._v(" "),s("h4",{attrs:{id:"regexp-prototype-unicode-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-unicode-属性"}},[t._v("#")]),t._v(" RegExp.prototype.unicode 属性")]),t._v(" "),s("p",[t._v("正则实例对象新增unicode属性，表示是否设置了u修饰符。")]),t._v(" "),s("h3",{attrs:{id:"后行断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后行断言"}},[t._v("#")]),t._v(" 后行断言")]),t._v(" "),s("p",[t._v("x只有在y后面才匹配，必须写成/(?<=y)x/。")]),t._v(" "),s("blockquote",[s("p",[t._v("“先行断言”指的是，x只有在y前面才匹配，必须写成/x(?=y)/")])]),t._v(" "),s("p",[t._v("比如，只匹配美元符号之后的数字，要写成/(?<=$)\\d+/。")]),t._v(" "),s("p",[t._v("“后行否定断言”，x只有不在y后面才匹配，必须写成/(?<!y)x/。")]),t._v(" "),s("p",[t._v("比如，只匹配不在美元符号后面的数字，要写成/(?<!$)\\d+/。")]),t._v(" "),s("p",[t._v("后行断言”的实现，需要先匹配/(?<=y)x/的x，然后再回到左边，匹配y的部分。")]),t._v(" "),s("p",[t._v("这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。")]),t._v(" "),s("p",[t._v("后行断言的组匹配，与正常情况下结果是不一样的。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?<=(\\d+)(\\d+))$/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1053'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["", "1", "053"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1053'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["1053", "105", "3"]')]),t._v("\n")])])]),s("p",[t._v("上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是105和3。")]),t._v(" "),s("p",[t._v("而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是1和053。")]),t._v(" "),s("p",[t._v("“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。")]),t._v(" "),s("h3",{attrs:{id:"具名组匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具名组匹配"}},[t._v("#")]),t._v(" 具名组匹配")]),t._v(" "),s("p",[t._v("ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_DATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_DATE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1999-12-31'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" year "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("year"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1999"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" month "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("month"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "12"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" day "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("day"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "31"')]),t._v("\n")])])]),s("p",[t._v("上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”，")]),t._v(" "),s("p",[t._v("然后就可以在exec方法返回结果的groups属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。")]),t._v(" "),s("p",[t._v("如果具名组没有匹配，那么对应的groups对象属性会是undefined。")]),t._v(" "),s("p",[t._v("有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模式名groups")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("groups"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^(?<one>.*):(?<two>.*)$/u")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo:bar'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\none  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo")]),t._v("\ntwo  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bar")]),t._v("\n")])])]),s("p",[t._v("字符串替换时，使用$<组名>引用具名组。")]),t._v(" "),s("h4",{attrs:{id:"引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),s("p",[t._v("如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k<组名>的写法。")]),t._v(" "),s("p",[t._v("数字引用（\\n）依然有效。")]),t._v(" "),s("h3",{attrs:{id:"string-prototype-matchall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-matchall"}},[t._v("#")]),t._v(" String.prototype.matchAll()")]),t._v(" "),s("p",[t._v("如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。")]),t._v(" "),s("p",[t._v("ES2020 增加了String.prototype.matchAll()方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test1test2test3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/t(e)(st(\\d?))/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]')]),t._v("\n")])])]),s("p",[t._v("可以用for...of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。")]),t._v(" "),s("p",[s("strong",[t._v("遍历器转为数组是非常简单的，使用...运算符或Array.from()方法就可以了。")])]),t._v(" "),s("h2",{attrs:{id:"math对象扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math对象扩展"}},[t._v("#")]),t._v(" Math对象扩展")]),t._v(" "),s("h3",{attrs:{id:"math-trunc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-trunc"}},[t._v("#")]),t._v(" Math.trunc()")]),t._v(" "),s("p",[t._v("Math.trunc方法用于去除一个数的小数部分，返回整数部分。")]),t._v(" "),s("p",[t._v("对于非数值，Math.trunc内部使用Number方法将其先转为数值。")]),t._v(" "),s("p",[t._v("对于空值和无法截取整数的值，返回NaN。")]),t._v(" "),s("h3",{attrs:{id:"math-sign"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-sign"}},[t._v("#")]),t._v(" Math.sign()")]),t._v(" "),s("p",[t._v("Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。")]),t._v(" "),s("p",[t._v("它会返回五种值。")]),t._v(" "),s("ul",[s("li",[t._v("参数为正数，返回+1；")]),t._v(" "),s("li",[t._v("参数为负数，返回-1；")]),t._v(" "),s("li",[t._v("参数为 0，返回0；")]),t._v(" "),s("li",[t._v("参数为-0，返回-0;")]),t._v(" "),s("li",[t._v("其他值，返回NaN。")])]),t._v(" "),s("p",[t._v("如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回NaN。")]),t._v(" "),s("h3",{attrs:{id:"math-cbrt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-cbrt"}},[t._v("#")]),t._v(" Math.cbrt()")]),t._v(" "),s("p",[t._v("Math.cbrt()方法用于计算一个数的立方根。")]),t._v(" "),s("p",[t._v("对于非数值，Math.cbrt()方法内部也是先使用Number()方法将其转为数值。")]),t._v(" "),s("p",[t._v("数值计算部分等同于"),s("code",[t._v("var y = Math.pow(Math.abs(x), 1/3);")]),t._v(",最后再加上符号")]),t._v(" "),s("h3",{attrs:{id:"math-log10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-log10"}},[t._v("#")]),t._v(" Math.log10()")]),t._v(" "),s("p",[t._v("Math.log10(x)返回以 10 为底的x的对数。如果x小于 0，则返回 NaN。")]),t._v(" "),s("p",[s("code",[t._v("Math.log(x) / Math.LN10;")])]),t._v(" "),s("h3",{attrs:{id:"math-log2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-log2"}},[t._v("#")]),t._v(" Math.log2()")]),t._v(" "),s("p",[t._v("Math.log2(x)返回以 2 为底的x的对数。如果x小于 0，则返回 NaN。")])])}),[],!1,null,null,null);a.default=r.exports}}]);