(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{331:function(t,a,s){"use strict";s.r(a);var v=s(9),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"待填坑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#待填坑"}},[t._v("#")]),t._v(" 待填坑")]),t._v(" "),s("h2",{attrs:{id:"regexp对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象"}},[t._v("#")]),t._v(" RegExp对象")]),t._v(" "),s("p",[t._v("提供正则表达式的功能。")]),t._v(" "),s("h2",{attrs:{id:"新建正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建正则表达式"}},[t._v("#")]),t._v(" 新建正则表达式")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("一种是使用字面量，以斜杠表示开始和结束。")]),t._v(" "),s("p",[s("code",[t._v("var regex = /xyz/;")])]),t._v(" "),s("blockquote",[s("p",[t._v("可以为空，/ /")])])]),t._v(" "),s("li",[s("p",[t._v("另一种是使用RegExp构造函数。")]),t._v(" "),s("p",[s("code",[t._v("var regex = new RegExp('xyz');")])]),t._v(" "),s("blockquote",[s("p",[t._v("RegExp构造函数还可以接受第二个参数，表示修饰符")])])])]),t._v(" "),s("p",[t._v("第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。")]),t._v(" "),s("p",[t._v("前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。")]),t._v(" "),s("h2",{attrs:{id:"实例属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[t._v("#")]),t._v(" 实例属性")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("RegExp.prototype.ignoreCase")]),t._v(" "),s("p",[t._v("返回一个布尔值，表示是否设置了i修饰符。该属性只读")])]),t._v(" "),s("li",[s("p",[t._v("RegExp.prototype.global")]),t._v(" "),s("p",[t._v("返回一个布尔值，表示是否设置了g修饰符。该属性只读")])]),t._v(" "),s("li",[s("p",[t._v("RegExp.prototype.multiline")]),t._v(" "),s("p",[t._v("返回一个布尔值，表示是否设置了m修饰符。该属性只读")])]),t._v(" "),s("li",[s("p",[t._v("RegExp.prototype.flags")]),t._v(" "),s("p",[t._v("返回一个字符串，包含了已经设置的所有修饰符，按字母排序。该属性只读")])]),t._v(" "),s("li",[s("p",[t._v("RegExp.prototype.lastIndex")]),t._v(" "),s("p",[t._v("返回一个整数，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义。")])]),t._v(" "),s("li",[s("p",[t._v("RegExp.prototype.source")]),t._v(" "),s("p",[t._v("返回正则表达式的字符串形式（不包括反斜杠），该属性只读。")])])]),t._v(" "),s("h2",{attrs:{id:"实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),s("h3",{attrs:{id:"regexp-prototype-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test"}},[t._v("#")]),t._v(" RegExp.prototype.test()")]),t._v(" "),s("p",[t._v("正则实例对象的test方法返回一个布尔值，表示当前模式是否能匹配参数字符串")]),t._v(" "),s("p",[t._v("如果正则表达式带有g修饰符，则每一次test方法都从上一次结束的位置开始向后匹配。")]),t._v(" "),s("p",[t._v("带有g修饰符时，可以通过正则对象的lastIndex属性指定开始搜索的位置。")]),t._v(" "),s("p",[t._v("带有g修饰符时，正则表达式内部会记住上一次的lastIndex属性，这时不应该更换所要匹配的字符串。")]),t._v(" "),s("p",[t._v("如果正则模式是一个空字符串，则匹配所有字符串。")]),t._v(" "),s("p",[s("code",[t._v("new RegExp('').test('abc')// true")])]),t._v(" "),s("h3",{attrs:{id:"regexp-prototype-exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec"}},[t._v("#")]),t._v(" RegExp.prototype.exec()")]),t._v(" "),s("p",[t._v("正则实例对象的exec()方法，用来返回匹配结果。")]),t._v(" "),s("p",[t._v("如果发现匹配，就"),s("strong",[t._v("返回一个数组，成员是匹配成功的子字符串")]),t._v("，否则返回null。")]),t._v(" "),s("p",[s("strong",[t._v("如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。")])]),t._v(" "),s("p",[s("strong",[t._v("第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。")])]),t._v(" "),s("p",[t._v("也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。")]),t._v(" "),s("p",[t._v("整个数组的length属性等于组匹配的数量再加1。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<img src=www.baidu.com alt=none>'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?:src)=([^\\s]+)/g")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// www.baidu.com")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reg.exec(str) 返回一个数组，其中(?:)非捕获，不会出现在数组中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'src=www.baidu.com',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'www.baidu.com',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index: 5,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// input: '<img src=www.baidu.com alt=none>',")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// groups: undefined")]),t._v("\n")])])]),s("h2",{attrs:{id:"字符串的实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的实例方法"}},[t._v("#")]),t._v(" 字符串的实例方法")]),t._v(" "),s("p",[t._v("字符串的实例方法之中，有4种与正则表达式有关。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("String.prototype.match()")]),t._v(" "),s("td",[t._v("返回一个数组，成员是所有匹配的子字符串。")])]),t._v(" "),s("tr",[s("td",[t._v("String.prototype.search()")]),t._v(" "),s("td",[t._v("按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。")])]),t._v(" "),s("tr",[s("td",[t._v("String.prototype.replace()")]),t._v(" "),s("td",[t._v("按照给定的正则表达式进行替换，返回替换后的字符串。")])]),t._v(" "),s("tr",[s("td",[t._v("String.prototype.split()")]),t._v(" "),s("td",[t._v("按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。")])])])]),t._v(" "),s("h3",{attrs:{id:"string-prototype-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match"}},[t._v("#")]),t._v(" String.prototype.match()")]),t._v(" "),s("p",[t._v("字符串实例对象的match方法对字符串进行正则匹配，返回匹配结果。")]),t._v(" "),s("p",[t._v("字符串的match方法与正则对象的exec方法非常类似：匹配成功返回一个数组，匹配失败返回null。")]),t._v(" "),s("p",[s("strong",[t._v("如果正则表达式带有g修饰符，则该方法与正则对象的exec方法行为不同，会一次性返回所有匹配成功的结果。")])]),t._v(" "),s("p",[s("strong",[t._v("设置正则表达式的lastIndex属性，对match方法无效，匹配总是从字符串的第一个字符开始。")])]),t._v(" "),s("h3",{attrs:{id:"string-prototype-replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace"}},[t._v("#")]),t._v(" String.prototype.replace()⭐️")]),t._v(" "),s("p",[t._v("字符串对象的replace方法可以替换匹配的值。")]),t._v(" "),s("p",[t._v("它接受两个参数，第一个是正则表达式，表示搜索模式，第二个是替换的内容。")]),t._v(" "),s("p",[t._v("replace方法的第二个参数还可以是一个函数，将每一个匹配内容替换为函数返回值。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式如果不加g修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值。")])]),t._v(" "),s("p",[t._v("replace方法的第二个参数可以使用美元符号$，用来指代所替换的内容。")]),t._v(" "),s("ul",[s("li",[t._v("$&：匹配的子字符串。")]),t._v(" "),s("li",[t._v("$`：匹配结果前面的文本。")]),t._v(" "),s("li",[t._v("$'：匹配结果后面的文本。（使用\\）")]),t._v(" "),s("li",[t._v("$n：匹配成功的第n组内容，n是从1开始的自然数。")]),t._v(" "),s("li",[t._v("$$：指代美元符号$。")])]),t._v(" "),s("h3",{attrs:{id:"string-prototype-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-split"}},[t._v("#")]),t._v(" String.prototype.split()")]),t._v(" "),s("p",[t._v("字符串对象的split方法按照正则规则分割字符串，返回一个由分割后的各个部分组成的数组")]),t._v(" "),s("p",[t._v("该方法接受两个参数，第一个参数是正则表达式，表示分隔规则，第二个参数是返回数组的最大成员数。")]),t._v(" "),s("p",[t._v("如果正则表达式带有括号，则括号匹配的部分也会作为数组成员返回。")]),t._v(" "),s("h2",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),s("p",[t._v("一部分字符有特殊含义，不代表字面的意思。它们叫做“元字符”（metacharacters）")]),t._v(" "),s("h3",{attrs:{id:"点字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点字符"}},[t._v("#")]),t._v(" 点字符(.)")]),t._v(" "),s("p",[s("strong",[t._v("点字符（.）匹配除回车（\\r）、换行(\\n) 、行分隔符（\\u2028）和段分隔符（\\u2029）以外的所有字符。")])]),t._v(" "),s("p",[t._v("注意，对于码点大于0xFFFF字符，点字符不能正确匹配，会认为这是两个字符。")]),t._v(" "),s("h3",{attrs:{id:"开始位置字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始位置字符"}},[t._v("#")]),t._v(" 开始位置字符(^)")]),t._v(" "),s("p",[t._v("^ 表示字符串的开始位置")]),t._v(" "),s("h3",{attrs:{id:"结束位置字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结束位置字符"}},[t._v("#")]),t._v(" 结束位置字符($)")]),t._v(" "),s("p",[t._v("$ 表示字符串的结束位置")]),t._v(" "),s("h3",{attrs:{id:"选择符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择符"}},[t._v("#")]),t._v(" 选择符(|)")]),t._v(" "),s("p",[t._v("竖线符号（|）在正则表达式中表示“或关系”（OR），")]),t._v(" "),s("p",[t._v("多个选择符可以联合使用。")]),t._v(" "),s("h3",{attrs:{id:"转义符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转义符"}},[t._v("#")]),t._v(" 转义符")]),t._v(" "),s("p",[t._v("正则表达式中那些有特殊含义的元字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。")]),t._v(" "),s("p",[t._v("比如要匹配+，就要写成+")]),t._v(" "),s("p",[t._v("正则表达式中，需要反斜杠转义的，一共有12个字符：^、.、[、$、(、)、|、*、+、?、{和\\。")]),t._v(" "),s("p",[s("strong",[t._v("需要特别注意的是，如果使用RegExp方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。")])]),t._v(" "),s("h3",{attrs:{id:"字符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[t._v("#")]),t._v(" 字符类[]")]),t._v(" "),s("p",[t._v("字符类[]表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内")]),t._v(" "),s("h3",{attrs:{id:"脱字符（-）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脱字符（-）"}},[t._v("#")]),t._v(" 脱字符（^）")]),t._v(" "),s("p",[t._v("如果方括号内的第一个字符是[^]，则表示除了字符类之中的字符，其他字符都可以匹配。")]),t._v(" "),s("p",[t._v("[^xyz]表示除了x、y、z之外都可以匹配。")]),t._v(" "),s("p",[s("strong",[t._v("只有[^]，就表示匹配一切字符，其中包括换行符。")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义。")])]),t._v(" "),s("h3",{attrs:{id:"连字符（-）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连字符（-）"}},[t._v("#")]),t._v(" 连字符（-）")]),t._v(" "),s("p",[t._v("某些情况下，对于连续序列的字符，连字符（-）用来提供简写形式，表示字符的连续范围。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义")]),t._v(" "),s("p",[t._v("字符类[1-31]，不代表1到31，只代表1到3。")])]),t._v(" "),s("h3",{attrs:{id:"量词符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词符"}},[t._v("#")]),t._v(" 量词符")]),t._v(" "),s("p",[t._v("量词符用来设定某个模式出现的次数。")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("?")]),t._v(" 问号表示某个模式出现0次或1次，等同于{0, 1}。")]),t._v(" "),s("blockquote",[s("p",[t._v("有或者没有")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("*")]),t._v(" 星号表示某个模式出现0次或多次，等同于{0,}。")]),t._v(" "),s("blockquote",[s("p",[t._v("像星星，可能没有，也可能有很多")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("+")]),t._v(" 加号表示某个模式出现1次或多次，等同于{1,}。")]),t._v(" "),s("blockquote",[s("p",[t._v("至少得有1个后，才能追加")])])])]),t._v(" "),s("h3",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),s("p",[t._v("修饰符（modifier）表示模式的附加规则，放在正则模式的最尾部。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("g")]),t._v(" "),s("p",[t._v("g修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。")])]),t._v(" "),s("li",[s("p",[t._v("i")]),t._v(" "),s("p",[t._v("默认情况下，正则对象区分字母的大小写，加上i修饰符以后表示忽略大小写（ignoreCase）")])]),t._v(" "),s("li",[s("p",[t._v("m")]),t._v(" "),s("p",[t._v("m修饰符表示多行模式（multiline），会修改^和$的行为")]),t._v(" "),s("p",[t._v("加上m修饰符以后，^和$还会匹配行首和行尾，即^和$会识别换行符（\\n）。")])]),t._v(" "),s("li",[s("p",[t._v("s")]),t._v(" "),s("p",[t._v("默认情况下的圆点 . 是匹配除换行符 \\n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \\n。")])])]),t._v(" "),s("p",[t._v("修饰符可以单个使用，也可以多个一起使用。")]),t._v(" "),s("h3",{attrs:{id:"重复类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重复类"}},[t._v("#")]),t._v(" 重复类")]),t._v(" "),s("p",[t._v("模式的精确匹配次数，使用大括号（{}）表示。")]),t._v(" "),s("p",[t._v("{n}表示恰好重复n次")]),t._v(" "),s("p",[t._v("{n,}表示至少重复n次")]),t._v(" "),s("p",[t._v("{n,m}表示重复不少于n次，不多于m次。")]),t._v(" "),s("h2",{attrs:{id:"预定义模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预定义模式"}},[t._v("#")]),t._v(" 预定义模式⭐️")]),t._v(" "),s("p",[t._v("预定义模式指的是某些常见模式的简写方式。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("模式")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",[t._v("匹配0-9之间的任一数字，相当于[0-9]。")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("匹配所有0-9以外的字符，相当于[^0-9]。")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v("匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。")])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。")])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("匹配空格（包括换行符、制表符、空格符等），相等于[ \\t\\r\\n\\v\\f]。")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("匹配非空格的字符，相当于[^ \\t\\r\\n\\v\\f]。")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("匹配词的边界。")])]),t._v(" "),s("tr",[s("td",[t._v("\\B")]),t._v(" "),s("td",[t._v("匹配非词边界，即在词的内部。在连字符之后不符合")])])])]),t._v(" "),s("h2",{attrs:{id:"贪婪模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式"}},[t._v("#")]),t._v(" 贪婪模式")]),t._v(" "),s("p",[t._v("三个量词符(?*+)，默认情况下都是最大可能匹配，即匹配到下一个字符不满足匹配规则为止。这被称为贪婪模式。")]),t._v(" "),s("h3",{attrs:{id:"非贪婪模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪模式"}},[t._v("#")]),t._v(" 非贪婪模式")]),t._v(" "),s("p",[t._v("即最小可能匹配。只要一发现匹配，就返回结果，")]),t._v(" "),s("p",[s("strong",[t._v("将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号。")])]),t._v(" "),s("h2",{attrs:{id:"组匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组匹配"}},[t._v("#")]),t._v(" 组匹配")]),t._v(" "),s("p",[t._v("正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容。")]),t._v(" "),s("p",[t._v("使用组匹配时，不宜同时使用g修饰符，否则match方法不会捕获分组的内容。")]),t._v(" "),s("blockquote",[s("p",[t._v("使用正则表达式的exec方法，配合循环，才能读到每一轮匹配的组捕获。")])]),t._v(" "),s("p",[t._v("正则表达式内部，还可以用\\n引用括号匹配的内容，n是从1开始的自然数，表示对应顺序的括号。")]),t._v(" "),s("h3",{attrs:{id:"非捕获组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非捕获组"}},[t._v("#")]),t._v(" 非捕获组")]),t._v(" "),s("p",[t._v("(?:x)称为非捕获组（Non-capturing group），表示不返回该组匹配的内容，即匹配的结果中不计入这个括号。")]),t._v(" "),s("p",[t._v("非捕获组的作用请考虑这样一个场景，假定需要匹配foo或者foofoo，正则表达式就应该写成/(foo){1, 2}/，但是这样会占用一个组匹配。")]),t._v(" "),s("p",[t._v("这时，就可以使用非捕获组，将正则表达式改为/(?:foo){1, 2}/，它的作用与前一个正则是一样的，但是不会单独输出括号内部的内容。")]),t._v(" "),s("h2",{attrs:{id:"先行断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先行断言"}},[t._v("#")]),t._v(" 先行断言")]),t._v(" "),s("p",[s("strong",[t._v("x(?=y)称为先行断言（Positive look-ahead），x只有在y前面才匹配，y不会被计入返回结果。")])]),t._v(" "),s("p",[t._v("比如，要匹配后面跟着百分号的数字，可以写成/\\d+(?=%)/。")]),t._v(" "),s("p",[t._v("“先行断言”中，括号里的部分是不会返回的。")]),t._v(" "),s("h3",{attrs:{id:"先行否定断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先行否定断言"}},[t._v("#")]),t._v(" 先行否定断言")]),t._v(" "),s("p",[t._v("x(?!y)称为先行否定断言（Negative look-ahead），x只有不在y前面才匹配，y不会被计入返回结果。")]),t._v(" "),s("p",[t._v("比如，要匹配后面跟的不是百分号的数字，就要写成/\\d+(?!%)/。")]),t._v(" "),s("p",[t._v("“先行否定断言”中，括号里的部分是不会返回的。")]),t._v(" "),s("h2",{attrs:{id:"去掉两边字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#去掉两边字符串"}},[t._v("#")]),t._v(" 去掉两边字符串")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("trim")])]),t._v(" "),s("li",[s("p",[t._v("replace + 正则")]),t._v(" "),s("p",[s("code",[t._v("str.replace(/^\\s+|\\s+$/g,'')")])])])]),t._v(" "),s("h2",{attrs:{id:"匹配网页标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配网页标签"}},[t._v("#")]),t._v(" 匹配网页标签")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tagName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/<([^>]+)>[^<]*<\\/\\1>/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntagName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<b>bold</b>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'b'")]),t._v("\ntagName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<b>bold</b>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <b>bold</b>")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个成员是整个的匹配结果，第二个是对应括号匹配成功的组")]),t._v("\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" html "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<b class=\"hello\">Hello</b><i>world</i>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/<(\\w+)([^>]*)>(.*?)<\\/\\1>/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "b"')]),t._v("\nmatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// " class="hello""')]),t._v("\nmatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Hello"')]),t._v("\n\n")])])]),s("h2",{attrs:{id:"解析网址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析网址"}},[t._v("#")]),t._v(" 解析网址")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nurl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://google.com/data'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["http://google.com/", "http", "google.com", "/data"]')]),t._v("\n")])])]),s("h2",{attrs:{id:"字面量字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字面量字符"}},[t._v("#")]),t._v(" 字面量字符")]),t._v(" "),s("p",[t._v("某个字符只表示它字面的含义，叫做“字面量字符”（literal characters）")])])}),[],!1,null,null,null);a.default=r.exports}}]);